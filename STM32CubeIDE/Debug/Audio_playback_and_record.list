
Audio_playback_and_record.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c050  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800c1d8  0800c1d8  0001c1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2b0  0800c2b0  00020520  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2b0  0800c2b0  0001c2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2b8  0800c2b8  00020520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2b8  0800c2b8  0001c2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2bc  0800c2bc  0001c2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000520  20000000  0800c2c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020520  2**0
                  CONTENTS
 10 .bss          000039c8  20000520  20000520  00020520  2**2
                  ALLOC
 11 ._user_heap_stack 00004000  20003ee8  20003ee8  00020520  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020520  2**0
                  CONTENTS, READONLY
 13 .comment      000000be  00000000  00000000  00020550  2**0
                  CONTENTS, READONLY
 14 .debug_line   00020c4d  00000000  00000000  0002060e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 0000008b  00000000  00000000  0004125b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   0001aad7  00000000  00000000  000412e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000044a9  00000000  00000000  0005bdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001948  00000000  00000000  00060268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8256  00000000  00000000  00061bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000138e  00000000  00000000  00139e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  000254f6  00000000  00000000  0013b194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006dfc  00000000  00000000  0016068c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000520 	.word	0x20000520
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c1c0 	.word	0x0800c1c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000524 	.word	0x20000524
 80001c4:	0800c1c0 	.word	0x0800c1c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004c8:	480d      	ldr	r0, [pc, #52]	; (8000500 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004ca:	490e      	ldr	r1, [pc, #56]	; (8000504 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004cc:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d0:	e002      	b.n	80004d8 <LoopCopyDataInit>

080004d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d6:	3304      	adds	r3, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004dc:	d3f9      	bcc.n	80004d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004de:	4a0b      	ldr	r2, [pc, #44]	; (800050c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004e0:	4c0b      	ldr	r4, [pc, #44]	; (8000510 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e4:	e001      	b.n	80004ea <LoopFillZerobss>

080004e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e8:	3204      	adds	r2, #4

080004ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ec:	d3fb      	bcc.n	80004e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004ee:	f002 fbaf 	bl	8002c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004f2:	f00b fa4d 	bl	800b990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004f6:	f000 f80f 	bl	8000518 <main>
  bx  lr    
 80004fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80004fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000504:	20000520 	.word	0x20000520
  ldr r2, =_sidata
 8000508:	0800c2c0 	.word	0x0800c2c0
  ldr r2, =_sbss
 800050c:	20000520 	.word	0x20000520
  ldr r4, =_ebss
 8000510:	20003ee8 	.word	0x20003ee8

08000514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC_IRQHandler>
	...

08000518 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
     - Configure the Flash prefetch, instruction and Data caches
     - Configure the Systick to generate an interrupt each 1 msec
     - Set NVIC Group Priority to 4
     - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 800051c:	f002 fbce 	bl	8002cbc <HAL_Init>
  

  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 8000520:	2001      	movs	r0, #1
 8000522:	f001 fa77 	bl	8001a14 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000526:	2000      	movs	r0, #0
 8000528:	f001 fa74 	bl	8001a14 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 800052c:	2002      	movs	r0, #2
 800052e:	f001 fa71 	bl	8001a14 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8000532:	2003      	movs	r0, #3
 8000534:	f001 fa6e 	bl	8001a14 <BSP_LED_Init>
  
  /* Configure the system clock to 168 MHz */
  SystemClock_Config();
 8000538:	f000 f84a 	bl	80005d0 <SystemClock_Config>
  
  /* Initialize MEMS Accelerometer mounted on STM32F4-Discovery board */
  if(BSP_ACCELERO_Init() != ACCELERO_OK)
 800053c:	f001 fe3a 	bl	80021b4 <BSP_ACCELERO_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <main+0x32>
  {
    /* Initialization Error */
    Error_Handler();
 8000546:	f000 f92b 	bl	80007a0 <Error_Handler>
  }
  
  MemsID = BSP_ACCELERO_ReadID();
 800054a:	f001 febf 	bl	80022cc <BSP_ACCELERO_ReadID>
 800054e:	4603      	mov	r3, r0
 8000550:	461a      	mov	r2, r3
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <main+0x74>)
 8000554:	701a      	strb	r2, [r3, #0]
  
  /* Turn ON LED4: start of application */
  BSP_LED_On(LED4);
 8000556:	2000      	movs	r0, #0
 8000558:	f001 fad4 	bl	8001b04 <BSP_LED_On>
  
  /* Configure TIM4 Peripheral to manage LEDs lighting */
  TIM_LED_Config();
 800055c:	f000 f8a2 	bl	80006a4 <TIM_LED_Config>
  
  /* Initialize the Repeat state */
  RepeatState = REPEAT_ON;
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <main+0x78>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
  
  /* Turn OFF all LEDs */
  LEDsState = LEDS_OFF;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <main+0x7c>)
 8000568:	2207      	movs	r2, #7
 800056a:	601a      	str	r2, [r3, #0]
  
  /* Configure USER Button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800056c:	2101      	movs	r1, #1
 800056e:	2000      	movs	r0, #0
 8000570:	f001 fb16 	bl	8001ba0 <BSP_PB_Init>
    
    /*##-4- Start Host Process ###############################################*/
//    USBH_Start(&hUSB_Host);
    
    /* Run Application (Blocking mode)*/
AppliState = APPLICATION_START;
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <main+0x80>)
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		switch(AppliState)
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <main+0x80>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d102      	bne.n	8000588 <main+0x70>
		{
			case APPLICATION_START:
				MSC_Application();
 8000582:	f000 f80b 	bl	800059c <MSC_Application>
				break;
 8000586:	e000      	b.n	800058a <main+0x72>
			case APPLICATION_IDLE:
			default:
				break;
 8000588:	bf00      	nop
		switch(AppliState)
 800058a:	e7f6      	b.n	800057a <main+0x62>
 800058c:	200005a8 	.word	0x200005a8
 8000590:	200005a4 	.word	0x200005a4
 8000594:	20000998 	.word	0x20000998
 8000598:	200005b0 	.word	0x200005b0

0800059c <MSC_Application>:
  * @brief  Main routine for Mass storage application
  * @param  None
  * @retval None
  */
static void MSC_Application(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0

COMMAND_AudioExecuteApplication();
 80005a0:	f000 f802 	bl	80005a8 <COMMAND_AudioExecuteApplication>
//    break;
//
//  default:
//    break;
//  }
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <COMMAND_AudioExecuteApplication>:
  * @brief  COMMAND_AudioExecuteApplication.
  * @param  None
  * @retval None
  */
static void COMMAND_AudioExecuteApplication(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* Execute the command switch the command index */
  switch (CmdIndex)
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <COMMAND_AudioExecuteApplication+0x20>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d105      	bne.n	80005c0 <COMMAND_AudioExecuteApplication+0x18>
//      WavePlayerStart();
//    break;
    
    /* Start Recording in USB Flash memory */ 
  case CMD_RECORD:
    RepeatState = REPEAT_ON;
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <COMMAND_AudioExecuteApplication+0x24>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
    WaveRecorderProcess();
 80005ba:	f000 fa99 	bl	8000af0 <WaveRecorderProcess>
    break;
 80005be:	e000      	b.n	80005c2 <COMMAND_AudioExecuteApplication+0x1a>
    
  default:
    break;
 80005c0:	bf00      	nop
  }
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000008 	.word	0x20000008
 80005cc:	200005a4 	.word	0x200005a4

080005d0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	4b2f      	ldr	r3, [pc, #188]	; (8000698 <SystemClock_Config+0xc8>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	4a2e      	ldr	r2, [pc, #184]	; (8000698 <SystemClock_Config+0xc8>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e4:	6413      	str	r3, [r2, #64]	; 0x40
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <SystemClock_Config+0xc8>)
 80005e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <SystemClock_Config+0xcc>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a28      	ldr	r2, [pc, #160]	; (800069c <SystemClock_Config+0xcc>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6013      	str	r3, [r2, #0]
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <SystemClock_Config+0xcc>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060e:	2301      	movs	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000616:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000620:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000622:	2308      	movs	r3, #8
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000626:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000630:	2307      	movs	r3, #7
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4618      	mov	r0, r3
 800063a:	f006 ff31 	bl	80074a0 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000644:	f000 f8ac 	bl	80007a0 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000648:	230f      	movs	r3, #15
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8000654:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000660:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000664:	2105      	movs	r1, #5
 8000666:	4618      	mov	r0, r3
 8000668:	f007 f992 	bl	8007990 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000672:	f000 f895 	bl	80007a0 <Error_Handler>
  }

  /* STM32F405x/407x/415x/417x Revision Z and upper devices: prefetch is supported  */
  if (HAL_GetREVID() >= 0x1001)
 8000676:	f002 fbb9 	bl	8002dec <HAL_GetREVID>
 800067a:	4603      	mov	r3, r0
 800067c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000680:	d905      	bls.n	800068e <SystemClock_Config+0xbe>
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <SystemClock_Config+0xd0>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <SystemClock_Config+0xd0>)
 8000688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800068c:	6013      	str	r3, [r2, #0]
  }  
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000
 80006a0:	40023c00 	.word	0x40023c00

080006a4 <TIM_LED_Config>:
  * @brief  Configures TIM4 Peripheral for LEDs lighting.
  * @param  None
  * @retval None
  */
static void TIM_LED_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
  uint16_t prescalervalue = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	81fb      	strh	r3, [r7, #14]
  uint32_t tmpvalue = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]

  /* TIM4 clock enable */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b34      	ldr	r3, [pc, #208]	; (8000788 <TIM_LED_Config+0xe4>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	4a33      	ldr	r2, [pc, #204]	; (8000788 <TIM_LED_Config+0xe4>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6413      	str	r3, [r2, #64]	; 0x40
 80006c2:	4b31      	ldr	r3, [pc, #196]	; (8000788 <TIM_LED_Config+0xe4>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);  
 80006ce:	2200      	movs	r2, #0
 80006d0:	2106      	movs	r1, #6
 80006d2:	201e      	movs	r0, #30
 80006d4:	f002 fc71 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006d8:	201e      	movs	r0, #30
 80006da:	f002 fc8a 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
    CC update rate = TIM4 counter clock / CCR_Val = 32.687 Hz
    ==> Toggling frequency = 16.343 Hz  
  ----------------------------------------------------------------------- */
  
  /* Compute the prescaler value */
  tmpvalue = HAL_RCC_GetPCLK1Freq();
 80006de:	f007 fb4f 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 80006e2:	60b8      	str	r0, [r7, #8]
  prescalervalue = (uint16_t) ((tmpvalue * 2) / 550000) - 1;
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4a28      	ldr	r2, [pc, #160]	; (800078c <TIM_LED_Config+0xe8>)
 80006ea:	fba2 2303 	umull	r2, r3, r2, r3
 80006ee:	0c1b      	lsrs	r3, r3, #16
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3b01      	subs	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]
  
  /* Time base configuration */
  hTimLed.Instance = TIM4;
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <TIM_LED_Config+0xec>)
 80006f8:	4a26      	ldr	r2, [pc, #152]	; (8000794 <TIM_LED_Config+0xf0>)
 80006fa:	601a      	str	r2, [r3, #0]
  hTimLed.Init.Period = 65535;
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <TIM_LED_Config+0xec>)
 80006fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000702:	60da      	str	r2, [r3, #12]
  hTimLed.Init.Prescaler = prescalervalue;
 8000704:	89fb      	ldrh	r3, [r7, #14]
 8000706:	4a22      	ldr	r2, [pc, #136]	; (8000790 <TIM_LED_Config+0xec>)
 8000708:	6053      	str	r3, [r2, #4]
  hTimLed.Init.ClockDivision = 0;
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <TIM_LED_Config+0xec>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hTimLed.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <TIM_LED_Config+0xec>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_OC_Init(&hTimLed) != HAL_OK)
 8000716:	481e      	ldr	r0, [pc, #120]	; (8000790 <TIM_LED_Config+0xec>)
 8000718:	f008 f8b2 	bl	8008880 <HAL_TIM_OC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <TIM_LED_Config+0x82>
  {
    /* Initialization Error */
    Error_Handler();
 8000722:	f000 f83d 	bl	80007a0 <Error_Handler>
  }
  
  /* Output Compare Timing Mode configuration: Channel1 */
  sConfigLed.OCMode = TIM_OCMODE_TIMING;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <TIM_LED_Config+0xf4>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
  sConfigLed.OCIdleState = TIM_OCIDLESTATE_SET;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <TIM_LED_Config+0xf4>)
 800072e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000732:	615a      	str	r2, [r3, #20]
  sConfigLed.Pulse = CCR1Val;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <TIM_LED_Config+0xf8>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	b29b      	uxth	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <TIM_LED_Config+0xf4>)
 800073e:	605a      	str	r2, [r3, #4]
  sConfigLed.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <TIM_LED_Config+0xf4>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  sConfigLed.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <TIM_LED_Config+0xf4>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  sConfigLed.OCFastMode = TIM_OCFAST_ENABLE;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <TIM_LED_Config+0xf4>)
 800074e:	2204      	movs	r2, #4
 8000750:	611a      	str	r2, [r3, #16]
  sConfigLed.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <TIM_LED_Config+0xf4>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	619a      	str	r2, [r3, #24]
  
  /* Initialize the TIM4 Channel1 with the structure above */
  if(HAL_TIM_OC_ConfigChannel(&hTimLed, &sConfigLed, TIM_CHANNEL_1) != HAL_OK)
 800075a:	2200      	movs	r2, #0
 800075c:	490e      	ldr	r1, [pc, #56]	; (8000798 <TIM_LED_Config+0xf4>)
 800075e:	480c      	ldr	r0, [pc, #48]	; (8000790 <TIM_LED_Config+0xec>)
 8000760:	f008 faee 	bl	8008d40 <HAL_TIM_OC_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <TIM_LED_Config+0xca>
  {
    /* Initialization Error */
    Error_Handler();
 800076a:	f000 f819 	bl	80007a0 <Error_Handler>
  }

  /* Start the Output Compare */
  if(HAL_TIM_OC_Start_IT(&hTimLed, TIM_CHANNEL_1) != HAL_OK)
 800076e:	2100      	movs	r1, #0
 8000770:	4807      	ldr	r0, [pc, #28]	; (8000790 <TIM_LED_Config+0xec>)
 8000772:	f008 f8df 	bl	8008934 <HAL_TIM_OC_Start_IT>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <TIM_LED_Config+0xdc>
  {
    /* Start Error */
    Error_Handler();
 800077c:	f000 f810 	bl	80007a0 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	1e81080d 	.word	0x1e81080d
 8000790:	2000053c 	.word	0x2000053c
 8000794:	40000800 	.word	0x40000800
 8000798:	20000584 	.word	0x20000584
 800079c:	20000004 	.word	0x20000004

080007a0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f001 f9ad 	bl	8001b04 <BSP_LED_On>
  while(1)
 80007aa:	e7fe      	b.n	80007aa <Error_Handler+0xa>

080007ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t capture = 0; 
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  
  /* Set click recognition only for L1S302DL*/
  if ((AudioPlayStart != 0x00) && (MemsID == I_AM_LIS302DL))
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_TIM_OC_DelayElapsedCallback+0xc8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d005      	beq.n	80007cc <HAL_TIM_OC_DelayElapsedCallback+0x20>
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <HAL_TIM_OC_DelayElapsedCallback+0xcc>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b3b      	cmp	r3, #59	; 0x3b
 80007c6:	d101      	bne.n	80007cc <HAL_TIM_OC_DelayElapsedCallback+0x20>
  {
    /* Read click and status registers*/
    BSP_ACCELERO_Click_ITClear();  
 80007c8:	f001 fd98 	bl	80022fc <BSP_ACCELERO_Click_ITClear>
  }
  
  if (LEDsState == LED3_TOGGLE)
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	d109      	bne.n	80007e8 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
  {
    /* Toggling LED3 */
    BSP_LED_Toggle(LED3);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f001 f9c9 	bl	8001b6c <BSP_LED_Toggle>
    BSP_LED_Off(LED6);
 80007da:	2003      	movs	r0, #3
 80007dc:	f001 f9ac 	bl	8001b38 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f001 f9a9 	bl	8001b38 <BSP_LED_Off>
 80007e6:	e033      	b.n	8000850 <HAL_TIM_OC_DelayElapsedCallback+0xa4>
  }
  else if (LEDsState == LED4_TOGGLE)
 80007e8:	4b24      	ldr	r3, [pc, #144]	; (800087c <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b04      	cmp	r3, #4
 80007ee:	d109      	bne.n	8000804 <HAL_TIM_OC_DelayElapsedCallback+0x58>
  {
    /* Toggling LED4 */
    BSP_LED_Toggle(LED4);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f001 f9bb 	bl	8001b6c <BSP_LED_Toggle>
    BSP_LED_Off(LED6);
 80007f6:	2003      	movs	r0, #3
 80007f8:	f001 f99e 	bl	8001b38 <BSP_LED_Off>
    BSP_LED_Off(LED3);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f001 f99b 	bl	8001b38 <BSP_LED_Off>
 8000802:	e025      	b.n	8000850 <HAL_TIM_OC_DelayElapsedCallback+0xa4>
  }
  else if (LEDsState == LED6_TOGGLE)
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b06      	cmp	r3, #6
 800080a:	d109      	bne.n	8000820 <HAL_TIM_OC_DelayElapsedCallback+0x74>
  {
    /* Toggling LED6 */
    BSP_LED_Off(LED3);
 800080c:	2001      	movs	r0, #1
 800080e:	f001 f993 	bl	8001b38 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8000812:	2000      	movs	r0, #0
 8000814:	f001 f990 	bl	8001b38 <BSP_LED_Off>
    BSP_LED_Toggle(LED6);
 8000818:	2003      	movs	r0, #3
 800081a:	f001 f9a7 	bl	8001b6c <BSP_LED_Toggle>
 800081e:	e017      	b.n	8000850 <HAL_TIM_OC_DelayElapsedCallback+0xa4>
  }
  else if (LEDsState == STOP_TOGGLE)
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d103      	bne.n	8000830 <HAL_TIM_OC_DelayElapsedCallback+0x84>
  {
    /* Turn ON LED6 */
    BSP_LED_On(LED6);
 8000828:	2003      	movs	r0, #3
 800082a:	f001 f96b 	bl	8001b04 <BSP_LED_On>
 800082e:	e00f      	b.n	8000850 <HAL_TIM_OC_DelayElapsedCallback+0xa4>
  }
  else if (LEDsState == LEDS_OFF)
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b07      	cmp	r3, #7
 8000836:	d10b      	bne.n	8000850 <HAL_TIM_OC_DelayElapsedCallback+0xa4>
  {
    /* Turn OFF all LEDs */
    BSP_LED_Off(LED3);
 8000838:	2001      	movs	r0, #1
 800083a:	f001 f97d 	bl	8001b38 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 800083e:	2000      	movs	r0, #0
 8000840:	f001 f97a 	bl	8001b38 <BSP_LED_Off>
    BSP_LED_Off(LED5);
 8000844:	2002      	movs	r0, #2
 8000846:	f001 f977 	bl	8001b38 <BSP_LED_Off>
    BSP_LED_Off(LED6);
 800084a:	2003      	movs	r0, #3
 800084c:	f001 f974 	bl	8001b38 <BSP_LED_Off>
  }
  /* Get the TIM4 Input Capture 1 value */
  capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000850:	2100      	movs	r1, #0
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f008 fad0 	bl	8008df8 <HAL_TIM_ReadCapturedValue>
 8000858:	60f8      	str	r0, [r7, #12]
  
  /* Set the TIM4 Capture Compare1 Register value */
  __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (CCR1Val + capture));
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	b29b      	uxth	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	440a      	add	r2, r1
 800086a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000099c 	.word	0x2000099c
 8000878:	200005a8 	.word	0x200005a8
 800087c:	20000998 	.word	0x20000998
 8000880:	20000004 	.word	0x20000004

08000884 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0) 
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d126      	bne.n	80008e2 <HAL_GPIO_EXTI_Callback+0x5e>
  {
    if (PbPressCheck == 0)
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <HAL_GPIO_EXTI_Callback+0x90>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d11f      	bne.n	80008dc <HAL_GPIO_EXTI_Callback+0x58>
    {
      HAL_Delay(10);
 800089c:	200a      	movs	r0, #10
 800089e:	f002 fa81 	bl	8002da4 <HAL_Delay>
      /* Test on the command: Recording */
      if (CmdIndex == CMD_RECORD)
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <HAL_GPIO_EXTI_Callback+0x94>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d106      	bne.n	80008b8 <HAL_GPIO_EXTI_Callback+0x34>
      {
        RepeatState = REPEAT_ON;
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <HAL_GPIO_EXTI_Callback+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
        
        /* Switch to Play command */
        CmdIndex = CMD_PLAY;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <HAL_GPIO_EXTI_Callback+0x94>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	e00d      	b.n	80008d4 <HAL_GPIO_EXTI_Callback+0x50>
      }
      /* Test on the command: Playing */
      else if (CmdIndex == CMD_PLAY)
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_GPIO_EXTI_Callback+0x94>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d103      	bne.n	80008c8 <HAL_GPIO_EXTI_Callback+0x44>
      {
        /* Switch to Record command */
        CmdIndex = CMD_RECORD;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_GPIO_EXTI_Callback+0x94>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	e005      	b.n	80008d4 <HAL_GPIO_EXTI_Callback+0x50>
      }
      else
      {
        RepeatState = REPEAT_ON;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_GPIO_EXTI_Callback+0x98>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
        /* Default Command Index: Play command */
        CmdIndex = CMD_PLAY; 
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_GPIO_EXTI_Callback+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
      }
      PbPressCheck = 1;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_GPIO_EXTI_Callback+0x90>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	e002      	b.n	80008e2 <HAL_GPIO_EXTI_Callback+0x5e>
    }
    else
    {
      PbPressCheck = 0;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_GPIO_EXTI_Callback+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
    }
  }
  
  if(GPIO_Pin == GPIO_PIN_1) 
 80008e2:	88fb      	ldrh	r3, [r7, #6]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d110      	bne.n	800090a <HAL_GPIO_EXTI_Callback+0x86>
  {
    if (PressCount == 1)
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d106      	bne.n	80008fe <HAL_GPIO_EXTI_Callback+0x7a>
    {
      /* Resume playing Wave status */
      PauseResumeStatus = RESUME_STATUS;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_GPIO_EXTI_Callback+0xa0>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	601a      	str	r2, [r3, #0]
      PressCount = 0;
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_GPIO_EXTI_Callback+0x9c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
      /* Pause playing Wave status */
      PauseResumeStatus = PAUSE_STATUS;
      PressCount = 1;
    }
  }
} 
 80008fc:	e005      	b.n	800090a <HAL_GPIO_EXTI_Callback+0x86>
      PauseResumeStatus = PAUSE_STATUS;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
      PressCount = 1;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
} 
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200005ac 	.word	0x200005ac
 8000918:	20000008 	.word	0x20000008
 800091c:	200005a4 	.word	0x200005a4
 8000920:	200005a0 	.word	0x200005a0
 8000924:	20000000 	.word	0x20000000

08000928 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800097c:	f002 f9f2 	bl	8002d64 <HAL_IncTick>

  /* Test on the command: Recording */
//  if (CmdIndex == CMD_RECORD)
//  {
    /* Increments the time recording base variable */
    TimeRecBase ++; 
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <SysTick_Handler+0x18>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	4a02      	ldr	r2, [pc, #8]	; (8000990 <SysTick_Handler+0x18>)
 8000988:	6013      	str	r3, [r2, #0]
//  }
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200005b4 	.word	0x200005b4

08000994 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000998:	2001      	movs	r0, #1
 800099a:	f003 f8e3 	bl	8003b64 <HAL_GPIO_EXTI_IRQHandler>
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <EXTI1_IRQHandler>:
  * @brief  This function handles External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80009a6:	2002      	movs	r0, #2
 80009a8:	f003 f8dc 	bl	8003b64 <HAL_GPIO_EXTI_IRQHandler>
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <DMA1_Stream7_IRQHandler+0x14>)
 80009b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 fc99 	bl	80032f0 <HAL_DMA_IRQHandler>
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20003bb4 	.word	0x20003bb4

080009c8 <DMA1_Stream3_IRQHandler>:
  * @brief  This function handles DMA Stream interrupt request.
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <DMA1_Stream3_IRQHandler+0x14>)
 80009ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fc8d 	bl	80032f0 <HAL_DMA_IRQHandler>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20003bfc 	.word	0x20003bfc

080009e0 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimLed);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <TIM4_IRQHandler+0x10>)
 80009e6:	f008 f8bb 	bl	8008b60 <HAL_TIM_IRQHandler>
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000053c 	.word	0x2000053c

080009f4 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <OTG_FS_IRQHandler+0x10>)
 80009fa:	f003 f8cb 	bl	8003b94 <HAL_HCD_IRQHandler>
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200005b8 	.word	0x200005b8

08000a08 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer (hhcd->pData);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8000a16:	4618      	mov	r0, r3
 8000a18:	f009 f80b 	bl	8009a32 <USBH_LL_IncTimer>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8000a32:	4618      	mov	r0, r3
 8000a34:	f009 f843 	bl	8009abe <USBH_LL_Connect>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f009 f84c 	bl	8009aec <USBH_LL_Disconnect>
} 
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f009 f80b 	bl	8009a86 <USBH_LL_PortEnabled>
} 
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8000a86:	4618      	mov	r0, r3
 8000a88:	f009 f80b 	bl	8009aa2 <USBH_LL_PortDisabled>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @brief  Notify URB state change callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	70fb      	strb	r3, [r7, #3]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <USBH_LL_Stop>:
  *         Stop the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Stop (USBH_HandleTypeDef *phost)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f003 f978 	bl	8003db4 <HAL_HCD_Stop>
  return USBH_OK; 
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <WavePlayerInit>:
* @brief  Initializes the Wave player.
* @param  AudioFreq: Audio sampling frequency
* @retval None
*/
int WavePlayerInit(uint32_t AudioFreq)
{ 
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  /* MEMS Accelerometer configure to manage PAUSE, RESUME operations */
//  BSP_ACCELERO_Click_ITConfig();

  /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */  
  return(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, 90, AudioFreq));
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	215a      	movs	r1, #90	; 0x5a
 8000ada:	2004      	movs	r0, #4
 8000adc:	f001 fc1e 	bl	800231c <BSP_AUDIO_OUT_Init>
 8000ae0:	4603      	mov	r3, r0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <BSP_AUDIO_OUT_Error_CallBack>:
* @brief  Manages the DMA FIFO error interrupt.
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* Stop the program with an infinite loop */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BSP_AUDIO_OUT_Error_CallBack+0x4>

08000af0 <WaveRecorderProcess>:
  * @param  None
  * @retval None
  */

void WaveRecorderProcess(void)
{     
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* Current size of the recorded buffer */
	uint32_t byteswritten = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]

	WaveCounter = 0;
 8000afa:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <WaveRecorderProcess+0xe8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
	LEDsState = LEDS_OFF;
 8000b00:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <WaveRecorderProcess+0xec>)
 8000b02:	2207      	movs	r2, #7
 8000b04:	601a      	str	r2, [r3, #0]

	BufferCtl.fptr = byteswritten;
 8000b06:	4a36      	ldr	r2, [pc, #216]	; (8000be0 <WaveRecorderProcess+0xf0>)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	6053      	str	r3, [r2, #4]
	BufferCtl.offset = BUFFER_OFFSET_NONE;
 8000b0c:	4b34      	ldr	r3, [pc, #208]	; (8000be0 <WaveRecorderProcess+0xf0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]

	BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2110      	movs	r1, #16
 8000b16:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000b1a:	f001 fdff 	bl	800271c <BSP_AUDIO_IN_Init>
	BSP_AUDIO_IN_Record((uint16_t*)&InternalBuffer[0], INTERNAL_BUFF_SIZE);
 8000b1e:	2180      	movs	r1, #128	; 0x80
 8000b20:	4830      	ldr	r0, [pc, #192]	; (8000be4 <WaveRecorderProcess+0xf4>)
 8000b22:	f001 fe25 	bl	8002770 <BSP_AUDIO_IN_Record>

	if(WavePlayerInit(DEFAULT_AUDIO_IN_FREQ) != 0)
 8000b26:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000b2a:	f7ff ffd0 	bl	8000ace <WavePlayerInit>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <WaveRecorderProcess+0x48>
		Error_Handler();
 8000b34:	f7ff fe34 	bl	80007a0 <Error_Handler>

	/* Reset the time recording base variable */
	TimeRecBase = 0;
 8000b38:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <WaveRecorderProcess+0xf8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
	ITCounter = 0;
 8000b3e:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <WaveRecorderProcess+0xfc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
	LEDsState = LED3_TOGGLE;
 8000b44:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <WaveRecorderProcess+0xec>)
 8000b46:	2203      	movs	r2, #3
 8000b48:	601a      	str	r2, [r3, #0]

	if(BSP_AUDIO_OUT_Play((uint16_t*)&WrBuffer[0], WR_BUFFER_SIZE) != AUDIO_OK){
 8000b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4e:	4828      	ldr	r0, [pc, #160]	; (8000bf0 <WaveRecorderProcess+0x100>)
 8000b50:	f001 fc32 	bl	80023b8 <BSP_AUDIO_OUT_Play>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <WaveRecorderProcess+0x70>
		LEDsState = LED6_TOGGLE;
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <WaveRecorderProcess+0xec>)
 8000b5c:	2206      	movs	r2, #6
 8000b5e:	601a      	str	r2, [r3, #0]
	}
	uint32_t missed = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
	while(AppliState != APPLICATION_IDLE)
 8000b64:	e02c      	b.n	8000bc0 <WaveRecorderProcess+0xd0>
	{
		if(AUDIODataReady == 1)
 8000b66:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <WaveRecorderProcess+0x104>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d128      	bne.n	8000bc0 <WaveRecorderProcess+0xd0>
		{
			if(buffer_offset == BUFFER_OFFSET_HALF)
 8000b6e:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <WaveRecorderProcess+0x108>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d10e      	bne.n	8000b94 <WaveRecorderProcess+0xa4>
			{
				memcpy((uint8_t*)&test_audio_output[0], (WrBuffer+AUDIOBuffOffset), WR_BUFFER_SIZE/2);
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <WaveRecorderProcess+0x10c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <WaveRecorderProcess+0x100>)
 8000b7e:	4413      	add	r3, r2
 8000b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b84:	4619      	mov	r1, r3
 8000b86:	481e      	ldr	r0, [pc, #120]	; (8000c00 <WaveRecorderProcess+0x110>)
 8000b88:	f00a ff26 	bl	800b9d8 <memcpy>
				buffer_offset = BUFFER_OFFSET_NONE;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <WaveRecorderProcess+0x108>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
				continue;
 8000b92:	e015      	b.n	8000bc0 <WaveRecorderProcess+0xd0>
			}

			if(buffer_offset == BUFFER_OFFSET_FULL)
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <WaveRecorderProcess+0x108>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d10e      	bne.n	8000bba <WaveRecorderProcess+0xca>
			{
				memcpy((uint8_t*)&test_audio_output[WR_BUFFER_SIZE/2], (WrBuffer+AUDIOBuffOffset), WR_BUFFER_SIZE/2);
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <WaveRecorderProcess+0x10c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <WaveRecorderProcess+0x100>)
 8000ba4:	4413      	add	r3, r2
 8000ba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000baa:	4619      	mov	r1, r3
 8000bac:	4815      	ldr	r0, [pc, #84]	; (8000c04 <WaveRecorderProcess+0x114>)
 8000bae:	f00a ff13 	bl	800b9d8 <memcpy>
				buffer_offset = BUFFER_OFFSET_NONE;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <WaveRecorderProcess+0x108>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
				continue;
 8000bb8:	e002      	b.n	8000bc0 <WaveRecorderProcess+0xd0>
			}

//			BSP_AUDIO_OUT_ChangeBuffer((WrBuffer+AUDIOBuffOffset), WR_BUFFER_SIZE/2);
			missed++;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
	while(AppliState != APPLICATION_IDLE)
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <WaveRecorderProcess+0x118>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1ce      	bne.n	8000b66 <WaveRecorderProcess+0x76>
		}
	}

	CmdIndex = CMD_PLAY;
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <WaveRecorderProcess+0x11c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200009a4 	.word	0x200009a4
 8000bdc:	20000998 	.word	0x20000998
 8000be0:	20002aec 	.word	0x20002aec
 8000be4:	200029e8 	.word	0x200029e8
 8000be8:	200005b4 	.word	0x200005b4
 8000bec:	20002ae8 	.word	0x20002ae8
 8000bf0:	200009a8 	.word	0x200009a8
 8000bf4:	20002af4 	.word	0x20002af4
 8000bf8:	200009a0 	.word	0x200009a0
 8000bfc:	20002af8 	.word	0x20002af8
 8000c00:	20002afc 	.word	0x20002afc
 8000c04:	200032fc 	.word	0x200032fc
 8000c08:	200005b0 	.word	0x200005b0
 8000c0c:	20000008 	.word	0x20000008

08000c10 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* PDM to PCM data convert */
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[INTERNAL_BUFF_SIZE/2], (uint16_t*)&RecBuf[0]);
 8000c14:	491b      	ldr	r1, [pc, #108]	; (8000c84 <BSP_AUDIO_IN_TransferComplete_CallBack+0x74>)
 8000c16:	481c      	ldr	r0, [pc, #112]	; (8000c88 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8000c18:	f001 fdc2 	bl	80027a0 <BSP_AUDIO_IN_PDMToPCM>
  
  /* Copy PCM data in internal buffer */
  memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	015b      	lsls	r3, r3, #5
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4a1a      	ldr	r2, [pc, #104]	; (8000c90 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>)
 8000c26:	4413      	add	r3, r2
 8000c28:	2240      	movs	r2, #64	; 0x40
 8000c2a:	4916      	ldr	r1, [pc, #88]	; (8000c84 <BSP_AUDIO_IN_TransferComplete_CallBack+0x74>)
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f00a fed3 	bl	800b9d8 <memcpy>
  
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <BSP_AUDIO_IN_TransferComplete_CallBack+0x84>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
  
  if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b3f      	cmp	r3, #63	; 0x3f
 8000c3e:	d10b      	bne.n	8000c58 <BSP_AUDIO_IN_TransferComplete_CallBack+0x48>
  {
    AUDIODataReady = 1;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <BSP_AUDIO_IN_TransferComplete_CallBack+0x88>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
    AUDIOBuffOffset = 0;
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
    ITCounter++;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	3301      	adds	r3, #1
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 8000c54:	6013      	str	r3, [r2, #0]
  }
  else
  {
    ITCounter++;
  }
}
 8000c56:	e013      	b.n	8000c80 <BSP_AUDIO_IN_TransferComplete_CallBack+0x70>
  else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c5e:	d10a      	bne.n	8000c76 <BSP_AUDIO_IN_TransferComplete_CallBack+0x66>
    AUDIODataReady = 1;
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <BSP_AUDIO_IN_TransferComplete_CallBack+0x88>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	601a      	str	r2, [r3, #0]
    AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 8000c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c6c:	601a      	str	r2, [r3, #0]
    ITCounter = 0;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
}
 8000c74:	e004      	b.n	8000c80 <BSP_AUDIO_IN_TransferComplete_CallBack+0x70>
    ITCounter++;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200029a8 	.word	0x200029a8
 8000c88:	20002a68 	.word	0x20002a68
 8000c8c:	20002ae8 	.word	0x20002ae8
 8000c90:	200009a8 	.word	0x200009a8
 8000c94:	20002aec 	.word	0x20002aec
 8000c98:	20002af4 	.word	0x20002af4
 8000c9c:	20002af8 	.word	0x20002af8

08000ca0 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* PDM to PCM data convert */
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
 8000ca4:	491b      	ldr	r1, [pc, #108]	; (8000d14 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x74>)
 8000ca6:	481c      	ldr	r0, [pc, #112]	; (8000d18 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 8000ca8:	f001 fd7a 	bl	80027a0 <BSP_AUDIO_IN_PDMToPCM>
  
  /* Copy PCM data in internal buffer */
  memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	015b      	lsls	r3, r3, #5
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4a1a      	ldr	r2, [pc, #104]	; (8000d20 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>)
 8000cb6:	4413      	add	r3, r2
 8000cb8:	2240      	movs	r2, #64	; 0x40
 8000cba:	4916      	ldr	r1, [pc, #88]	; (8000d14 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x74>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f00a fe8b 	bl	800b9d8 <memcpy>
  
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x84>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
  
  if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b3f      	cmp	r3, #63	; 0x3f
 8000cce:	d10b      	bne.n	8000ce8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x48>
  {
    AUDIODataReady = 1;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x88>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
    AUDIOBuffOffset = 0;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
    ITCounter++;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 8000ce4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    ITCounter++;
  }
}
 8000ce6:	e013      	b.n	8000d10 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x70>
  else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b7f      	cmp	r3, #127	; 0x7f
 8000cee:	d10a      	bne.n	8000d06 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x66>
    AUDIODataReady = 1;
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x88>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
    AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 8000cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cfc:	601a      	str	r2, [r3, #0]
    ITCounter = 0;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
}
 8000d04:	e004      	b.n	8000d10 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x70>
    ITCounter++;
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	4a03      	ldr	r2, [pc, #12]	; (8000d1c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200029a8 	.word	0x200029a8
 8000d18:	200029e8 	.word	0x200029e8
 8000d1c:	20002ae8 	.word	0x20002ae8
 8000d20:	200009a8 	.word	0x200009a8
 8000d24:	20002aec 	.word	0x20002aec
 8000d28:	20002af4 	.word	0x20002af4
 8000d2c:	20002af8 	.word	0x20002af8

08000d30 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  buffer_offset = BUFFER_OFFSET_HALF;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	601a      	str	r2, [r3, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	200009a0 	.word	0x200009a0

08000d48 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  buffer_offset = BUFFER_OFFSET_FULL;
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x18>)
 8000d4e:	2202      	movs	r2, #2
 8000d50:	601a      	str	r2, [r3, #0]
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&test_audio_output[0], WR_BUFFER_SIZE/8);
 8000d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d56:	4803      	ldr	r0, [pc, #12]	; (8000d64 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x1c>)
 8000d58:	f001 fb58 	bl	800240c <BSP_AUDIO_OUT_ChangeBuffer>
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200009a0 	.word	0x200009a0
 8000d64:	20002afc 	.word	0x20002afc

08000d68 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	4603      	mov	r3, r0
 8000d72:	81fb      	strh	r3, [r7, #14]
 8000d74:	460b      	mov	r3, r1
 8000d76:	81bb      	strh	r3, [r7, #12]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000d80:	f001 f9b2 	bl	80020e8 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000d84:	89fb      	ldrh	r3, [r7, #14]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fb01 	bl	8001394 <CODEC_IO_Write>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	4413      	add	r3, r2
 8000d9a:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000d9c:	89bb      	ldrh	r3, [r7, #12]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d81b      	bhi.n	8000ddc <cs43l22_Init+0x74>
 8000da4:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <cs43l22_Init+0x44>)
 8000da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000daa:	bf00      	nop
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000dc5 	.word	0x08000dc5
 8000db4:	08000dcd 	.word	0x08000dcd
 8000db8:	08000dd5 	.word	0x08000dd5
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000dbc:	4b5b      	ldr	r3, [pc, #364]	; (8000f2c <cs43l22_Init+0x1c4>)
 8000dbe:	22fa      	movs	r2, #250	; 0xfa
 8000dc0:	701a      	strb	r2, [r3, #0]
    break;
 8000dc2:	e00f      	b.n	8000de4 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000dc4:	4b59      	ldr	r3, [pc, #356]	; (8000f2c <cs43l22_Init+0x1c4>)
 8000dc6:	22af      	movs	r2, #175	; 0xaf
 8000dc8:	701a      	strb	r2, [r3, #0]
    break;
 8000dca:	e00b      	b.n	8000de4 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000dcc:	4b57      	ldr	r3, [pc, #348]	; (8000f2c <cs43l22_Init+0x1c4>)
 8000dce:	22aa      	movs	r2, #170	; 0xaa
 8000dd0:	701a      	strb	r2, [r3, #0]
    break;
 8000dd2:	e007      	b.n	8000de4 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000dd4:	4b55      	ldr	r3, [pc, #340]	; (8000f2c <cs43l22_Init+0x1c4>)
 8000dd6:	2205      	movs	r2, #5
 8000dd8:	701a      	strb	r2, [r3, #0]
    break;    
 8000dda:	e003      	b.n	8000de4 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000ddc:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <cs43l22_Init+0x1c4>)
 8000dde:	2205      	movs	r2, #5
 8000de0:	701a      	strb	r2, [r3, #0]
    break;    
 8000de2:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000de4:	89fb      	ldrh	r3, [r7, #14]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4a50      	ldr	r2, [pc, #320]	; (8000f2c <cs43l22_Init+0x1c4>)
 8000dea:	7812      	ldrb	r2, [r2, #0]
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	2104      	movs	r1, #4
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 facf 	bl	8001394 <CODEC_IO_Write>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2281      	movs	r2, #129	; 0x81
 8000e06:	2105      	movs	r1, #5
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fac3 	bl	8001394 <CODEC_IO_Write>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4413      	add	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e18:	89fb      	ldrh	r3, [r7, #14]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	2106      	movs	r1, #6
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fab7 	bl	8001394 <CODEC_IO_Write>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000e30:	7afa      	ldrb	r2, [r7, #11]
 8000e32:	89fb      	ldrh	r3, [r7, #14]
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f964 	bl	8001104 <cs43l22_SetVolume>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	4413      	add	r3, r2
 8000e42:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000e44:	89bb      	ldrh	r3, [r7, #12]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d023      	beq.n	8000e92 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000e4a:	89fb      	ldrh	r3, [r7, #14]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2206      	movs	r2, #6
 8000e50:	210f      	movs	r1, #15
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fa9e 	bl	8001394 <CODEC_IO_Write>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	4413      	add	r3, r2
 8000e60:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000e62:	89fb      	ldrh	r3, [r7, #14]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2200      	movs	r2, #0
 8000e68:	2124      	movs	r1, #36	; 0x24
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fa92 	bl	8001394 <CODEC_IO_Write>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	4413      	add	r3, r2
 8000e78:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2125      	movs	r1, #37	; 0x25
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fa86 	bl	8001394 <CODEC_IO_Write>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	4413      	add	r3, r2
 8000e90:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000e92:	89fb      	ldrh	r3, [r7, #14]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2200      	movs	r2, #0
 8000e98:	210a      	movs	r1, #10
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fa7a 	bl	8001394 <CODEC_IO_Write>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000eaa:	89fb      	ldrh	r3, [r7, #14]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2204      	movs	r2, #4
 8000eb0:	210e      	movs	r1, #14
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fa6e 	bl	8001394 <CODEC_IO_Write>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000ec2:	89fb      	ldrh	r3, [r7, #14]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2127      	movs	r1, #39	; 0x27
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fa62 	bl	8001394 <CODEC_IO_Write>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	220f      	movs	r2, #15
 8000ee0:	211f      	movs	r1, #31
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fa56 	bl	8001394 <CODEC_IO_Write>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	4413      	add	r3, r2
 8000ef0:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	220a      	movs	r2, #10
 8000ef8:	211a      	movs	r1, #26
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fa4a 	bl	8001394 <CODEC_IO_Write>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	4413      	add	r3, r2
 8000f08:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f0a:	89fb      	ldrh	r3, [r7, #14]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	220a      	movs	r2, #10
 8000f10:	211b      	movs	r1, #27
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fa3e 	bl	8001394 <CODEC_IO_Write>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	4413      	add	r3, r2
 8000f20:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000f22:	697b      	ldr	r3, [r7, #20]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20003afc 	.word	0x20003afc

08000f30 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000f34:	f001 f910 	bl	8002158 <AUDIO_IO_DeInit>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000f46:	f001 f8cf 	bl	80020e8 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 f91b 	bl	800218c <AUDIO_IO_Read>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	f023 0307 	bic.w	r3, r3, #7
 8000f60:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	80fb      	strh	r3, [r7, #6]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <cs43l22_Play+0x70>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d123      	bne.n	8000fd0 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2206      	movs	r2, #6
 8000f8e:	210e      	movs	r1, #14
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f9ff 	bl	8001394 <CODEC_IO_Write>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 f919 	bl	80011dc <cs43l22_SetMute>
 8000faa:	4602      	mov	r2, r0
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	229e      	movs	r2, #158	; 0x9e
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f9ea 	bl	8001394 <CODEC_IO_Write>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <cs43l22_Play+0x70>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8000fd0:	68fb      	ldr	r3, [r7, #12]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000003c 	.word	0x2000003c

08000fe0 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f8f2 	bl	80011dc <cs43l22_SetMute>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2201      	movs	r2, #1
 8001006:	2102      	movs	r1, #2
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f9c3 	bl	8001394 <CODEC_IO_Write>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4413      	add	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001018:	68fb      	ldr	r3, [r7, #12]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f8ce 	bl	80011dc <cs43l22_SetMute>
 8001040:	4602      	mov	r2, r0
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4413      	add	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	e002      	b.n	8001054 <cs43l22_Resume+0x30>
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	3301      	adds	r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2bfe      	cmp	r3, #254	; 0xfe
 8001058:	d9f9      	bls.n	800104e <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <cs43l22_Resume+0x74>)
 8001060:	7812      	ldrb	r2, [r2, #0]
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	2104      	movs	r1, #4
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f994 	bl	8001394 <CODEC_IO_Write>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	229e      	movs	r2, #158	; 0x9e
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f988 	bl	8001394 <CODEC_IO_Write>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20003afc 	.word	0x20003afc

0800109c <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	2101      	movs	r1, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f893 	bl	80011dc <cs43l22_SetMute>
 80010b6:	4602      	mov	r2, r0
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2204      	movs	r2, #4
 80010c4:	210e      	movs	r1, #14
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f964 	bl	8001394 <CODEC_IO_Write>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	229f      	movs	r2, #159	; 0x9f
 80010dc:	2102      	movs	r1, #2
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f958 	bl	8001394 <CODEC_IO_Write>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <cs43l22_Stop+0x64>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
  return counter;    
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000003c 	.word	0x2000003c

08001104 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	80fb      	strh	r3, [r7, #6]
 8001110:	4613      	mov	r3, r2
 8001112:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001118:	797b      	ldrb	r3, [r7, #5]
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d80b      	bhi.n	8001136 <cs43l22_SetVolume+0x32>
 800111e:	797a      	ldrb	r2, [r7, #5]
 8001120:	4613      	mov	r3, r2
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <cs43l22_SetVolume+0xb8>)
 8001128:	fb82 1203 	smull	r1, r2, r2, r3
 800112c:	1152      	asrs	r2, r2, #5
 800112e:	17db      	asrs	r3, r3, #31
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	e000      	b.n	8001138 <cs43l22_SetVolume+0x34>
 8001136:	23ff      	movs	r3, #255	; 0xff
 8001138:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	2be6      	cmp	r3, #230	; 0xe6
 800113e:	d91c      	bls.n	800117a <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	b2d8      	uxtb	r0, r3
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	3319      	adds	r3, #25
 8001148:	b2db      	uxtb	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	2120      	movs	r1, #32
 800114e:	f000 f921 	bl	8001394 <CODEC_IO_Write>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	b2d8      	uxtb	r0, r3
 8001160:	7afb      	ldrb	r3, [r7, #11]
 8001162:	3319      	adds	r3, #25
 8001164:	b2db      	uxtb	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	2121      	movs	r1, #33	; 0x21
 800116a:	f000 f913 	bl	8001394 <CODEC_IO_Write>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4413      	add	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e01b      	b.n	80011b2 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	b2d8      	uxtb	r0, r3
 800117e:	7afb      	ldrb	r3, [r7, #11]
 8001180:	3319      	adds	r3, #25
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461a      	mov	r2, r3
 8001186:	2120      	movs	r1, #32
 8001188:	f000 f904 	bl	8001394 <CODEC_IO_Write>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	b2d8      	uxtb	r0, r3
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	3319      	adds	r3, #25
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	2121      	movs	r1, #33	; 0x21
 80011a4:	f000 f8f6 	bl	8001394 <CODEC_IO_Write>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	51eb851f 	.word	0x51eb851f

080011c0 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	80fb      	strh	r3, [r7, #6]
  return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d124      	bne.n	800123c <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	22ff      	movs	r2, #255	; 0xff
 80011f8:	2104      	movs	r1, #4
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f8ca 	bl	8001394 <CODEC_IO_Write>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2201      	movs	r2, #1
 8001210:	2122      	movs	r1, #34	; 0x22
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f8be 	bl	8001394 <CODEC_IO_Write>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2201      	movs	r2, #1
 8001228:	2123      	movs	r1, #35	; 0x23
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f8b2 	bl	8001394 <CODEC_IO_Write>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	e025      	b.n	8001288 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2200      	movs	r2, #0
 8001242:	2122      	movs	r1, #34	; 0x22
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f8a5 	bl	8001394 <CODEC_IO_Write>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4413      	add	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2200      	movs	r2, #0
 800125a:	2123      	movs	r1, #35	; 0x23
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f899 	bl	8001394 <CODEC_IO_Write>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4413      	add	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4a08      	ldr	r2, [pc, #32]	; (8001294 <cs43l22_SetMute+0xb8>)
 8001272:	7812      	ldrb	r2, [r2, #0]
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	2104      	movs	r1, #4
 8001278:	4618      	mov	r0, r3
 800127a:	f000 f88b 	bl	8001394 <CODEC_IO_Write>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4413      	add	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001288:	68fb      	ldr	r3, [r7, #12]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20003afc 	.word	0x20003afc

08001298 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	80fb      	strh	r3, [r7, #6]
 80012a4:	4613      	mov	r3, r2
 80012a6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80012ac:	797b      	ldrb	r3, [r7, #5]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d84b      	bhi.n	800134c <cs43l22_SetOutputMode+0xb4>
 80012b4:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <cs43l22_SetOutputMode+0x24>)
 80012b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ba:	bf00      	nop
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	080012ed 	.word	0x080012ed
 80012c4:	0800130d 	.word	0x0800130d
 80012c8:	0800132d 	.word	0x0800132d
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	22fa      	movs	r2, #250	; 0xfa
 80012d2:	2104      	movs	r1, #4
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f85d 	bl	8001394 <CODEC_IO_Write>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <cs43l22_SetOutputMode+0xe0>)
 80012e6:	22fa      	movs	r2, #250	; 0xfa
 80012e8:	701a      	strb	r2, [r3, #0]
      break;
 80012ea:	e03f      	b.n	800136c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	22af      	movs	r2, #175	; 0xaf
 80012f2:	2104      	movs	r1, #4
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f84d 	bl	8001394 <CODEC_IO_Write>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4413      	add	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001304:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <cs43l22_SetOutputMode+0xe0>)
 8001306:	22af      	movs	r2, #175	; 0xaf
 8001308:	701a      	strb	r2, [r3, #0]
      break;
 800130a:	e02f      	b.n	800136c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	22aa      	movs	r2, #170	; 0xaa
 8001312:	2104      	movs	r1, #4
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f83d 	bl	8001394 <CODEC_IO_Write>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <cs43l22_SetOutputMode+0xe0>)
 8001326:	22aa      	movs	r2, #170	; 0xaa
 8001328:	701a      	strb	r2, [r3, #0]
      break;
 800132a:	e01f      	b.n	800136c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2205      	movs	r2, #5
 8001332:	2104      	movs	r1, #4
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f82d 	bl	8001394 <CODEC_IO_Write>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4413      	add	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <cs43l22_SetOutputMode+0xe0>)
 8001346:	2205      	movs	r2, #5
 8001348:	701a      	strb	r2, [r3, #0]
      break;    
 800134a:	e00f      	b.n	800136c <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2205      	movs	r2, #5
 8001352:	2104      	movs	r1, #4
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f81d 	bl	8001394 <CODEC_IO_Write>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4413      	add	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <cs43l22_SetOutputMode+0xe0>)
 8001366:	2205      	movs	r2, #5
 8001368:	701a      	strb	r2, [r3, #0]
      break;
 800136a:	bf00      	nop
  }  
  return counter;
 800136c:	68fb      	ldr	r3, [r7, #12]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20003afc 	.word	0x20003afc

0800137c <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
 800139e:	460b      	mov	r3, r1
 80013a0:	71bb      	strb	r3, [r7, #6]
 80013a2:	4613      	mov	r3, r2
 80013a4:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80013aa:	797a      	ldrb	r2, [r7, #5]
 80013ac:	79b9      	ldrb	r1, [r7, #6]
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fed8 	bl	8002166 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	b2db      	uxtb	r3, r3
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <LIS302DL_Init>:
  * @brief  Set LIS302DL Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS302DL_Init(uint16_t InitStruct)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80013d0:	f000 fdc0 	bl	8001f54 <ACCELERO_IO_Init>

  ctrl = (uint8_t) InitStruct;
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80013da:	f107 030f 	add.w	r3, r7, #15
 80013de:	2201      	movs	r2, #1
 80013e0:	2120      	movs	r1, #32
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fe14 	bl	8002010 <ACCELERO_IO_Write>
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <LIS302DL_DeInit>:
  * @brief  LIS302DL De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8001408:	f000 fda4 	bl	8001f54 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 800140c:	1dfb      	adds	r3, r7, #7
 800140e:	2201      	movs	r2, #1
 8001410:	210f      	movs	r1, #15
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fe2e 	bl	8002074 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 8001418:	79fb      	ldrb	r3, [r7, #7]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	71fb      	strb	r3, [r7, #7]
  uint8_t ctrl = 0x00;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001430:	f107 030f 	add.w	r3, r7, #15
 8001434:	2201      	movs	r2, #1
 8001436:	2121      	movs	r1, #33	; 0x21
 8001438:	4618      	mov	r0, r3
 800143a:	f000 fe1b 	bl	8002074 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 8001444:	b2db      	uxtb	r3, r3
 8001446:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	4313      	orrs	r3, r2
 800144e:	b2db      	uxtb	r3, r3
 8001450:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8001452:	f107 030f 	add.w	r3, r7, #15
 8001456:	2201      	movs	r2, #1
 8001458:	2121      	movs	r1, #33	; 0x21
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fdd8 	bl	8002010 <ACCELERO_IO_Write>
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8001474:	f107 030f 	add.w	r3, r7, #15
 8001478:	2201      	movs	r2, #1
 800147a:	2138      	movs	r1, #56	; 0x38
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fdf9 	bl	8002074 <ACCELERO_IO_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	785b      	ldrb	r3, [r3, #1]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800148a:	4313      	orrs	r3, r2
 800148c:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8001492:	4313      	orrs	r3, r2
 8001494:	b2db      	uxtb	r3, r3
 8001496:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK_CFG register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8001498:	f107 030f 	add.w	r3, r7, #15
 800149c:	2201      	movs	r2, #1
 800149e:	2138      	movs	r1, #56	; 0x38
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fdb5 	bl	8002010 <ACCELERO_IO_Write>
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <LIS302DL_Click_IntConfig>:
  * @brief  Set LIS302DL Interrupt configuration
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntConfig(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80014b4:	2300      	movs	r3, #0
 80014b6:	71fb      	strb	r3, [r7, #7]
  LIS302DL_InterruptConfigTypeDef   LIS302DL_InterruptStruct;
  
  ACCELERO_IO_ITConfig();
 80014b8:	f000 fd7a 	bl	8001fb0 <ACCELERO_IO_ITConfig>
  
  /* Set configuration of Internal High Pass Filter of LIS302DL */
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 80014bc:	2340      	movs	r3, #64	; 0x40
 80014be:	713b      	strb	r3, [r7, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 80014c0:	2310      	movs	r3, #16
 80014c2:	717b      	strb	r3, [r7, #5]
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 80014c4:	2320      	movs	r3, #32
 80014c6:	71bb      	strb	r3, [r7, #6]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ffcc 	bl	8001468 <LIS302DL_InterruptConfig>
  
  /* Configure Interrupt control register: enable Click interrupt on INT1 and
  INT2 on Z axis high event */
  ctrl = 0x3F;
 80014d0:	233f      	movs	r3, #63	; 0x3f
 80014d2:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	2201      	movs	r2, #1
 80014d8:	2122      	movs	r1, #34	; 0x22
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 fd98 	bl	8002010 <ACCELERO_IO_Write>
  
  /* Enable Interrupt generation on click on Z axis */
  ctrl = 0x50;
 80014e0:	2350      	movs	r3, #80	; 0x50
 80014e2:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	2201      	movs	r2, #1
 80014e8:	2138      	movs	r1, #56	; 0x38
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fd90 	bl	8002010 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on X/Y axis (10 x 0.5g) */
  ctrl = 0xAA;
 80014f0:	23aa      	movs	r3, #170	; 0xaa
 80014f2:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 80014f4:	1dfb      	adds	r3, r7, #7
 80014f6:	2201      	movs	r2, #1
 80014f8:	213b      	movs	r1, #59	; 0x3b
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fd88 	bl	8002010 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis (10 x 0.5g) */
  ctrl = 0x0A;
 8001500:	230a      	movs	r3, #10
 8001502:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 8001504:	1dfb      	adds	r3, r7, #7
 8001506:	2201      	movs	r2, #1
 8001508:	213c      	movs	r1, #60	; 0x3c
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fd80 	bl	8002010 <ACCELERO_IO_Write>
  
  /* Enable interrupt on Y axis high event */
  ctrl = 0x4C;
 8001510:	234c      	movs	r3, #76	; 0x4c
 8001512:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 8001514:	1dfb      	adds	r3, r7, #7
 8001516:	2201      	movs	r2, #1
 8001518:	2130      	movs	r1, #48	; 0x30
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fd78 	bl	8002010 <ACCELERO_IO_Write>
  
  /* Configure Time Limit */
  ctrl = 0x03;
 8001520:	2303      	movs	r3, #3
 8001522:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	2201      	movs	r2, #1
 8001528:	213d      	movs	r1, #61	; 0x3d
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fd70 	bl	8002010 <ACCELERO_IO_Write>
  
  /* Configure Latency */
  ctrl = 0x7F;
 8001530:	237f      	movs	r3, #127	; 0x7f
 8001532:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 8001534:	1dfb      	adds	r3, r7, #7
 8001536:	2201      	movs	r2, #1
 8001538:	213e      	movs	r1, #62	; 0x3e
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fd68 	bl	8002010 <ACCELERO_IO_Write>
  
  /* Configure Click Window */
  ctrl = 0x7F;
 8001540:	237f      	movs	r3, #127	; 0x7f
 8001542:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 8001544:	1dfb      	adds	r3, r7, #7
 8001546:	2201      	movs	r2, #1
 8001548:	213f      	movs	r1, #63	; 0x3f
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fd60 	bl	8002010 <ACCELERO_IO_Write>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
  uint8_t buffer[6], clickreg = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	71fb      	strb	r3, [r7, #7]

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	2201      	movs	r2, #1
 8001566:	2139      	movs	r1, #57	; 0x39
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fd83 	bl	8002074 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	2206      	movs	r2, #6
 8001574:	2127      	movs	r1, #39	; 0x27
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fd7c 	bl	8002074 <ACCELERO_IO_Read>
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	2201      	movs	r2, #1
 800158e:	2121      	movs	r1, #33	; 0x21
 8001590:	4618      	mov	r0, r3
 8001592:	f000 fd6f 	bl	8002074 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159c:	b2db      	uxtb	r3, r3
 800159e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	2201      	movs	r2, #1
 80015a4:	2121      	movs	r1, #33	; 0x21
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fd32 	bl	8002010 <ACCELERO_IO_Write>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80015bc:	2312      	movs	r3, #18
 80015be:	77fb      	strb	r3, [r7, #31]
  uint8_t crtl, i = 0x00;
 80015c0:	2300      	movs	r3, #0
 80015c2:	77bb      	strb	r3, [r7, #30]
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 80015c4:	f107 030f 	add.w	r3, r7, #15
 80015c8:	2201      	movs	r2, #1
 80015ca:	2120      	movs	r1, #32
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fd51 	bl	8002074 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 80015d2:	f107 0318 	add.w	r3, r7, #24
 80015d6:	2206      	movs	r2, #6
 80015d8:	2129      	movs	r1, #41	; 0x29
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 fd4a 	bl	8002074 <ACCELERO_IO_Read>
  
  for(i=0; i<3; i++)
 80015e0:	2300      	movs	r3, #0
 80015e2:	77bb      	strb	r3, [r7, #30]
 80015e4:	e00f      	b.n	8001606 <LIS302DL_ReadACC+0x52>
  {
    pnRawData[i] = buffer[2*i];
 80015e6:	7fbb      	ldrb	r3, [r7, #30]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	3320      	adds	r3, #32
 80015ec:	443b      	add	r3, r7
 80015ee:	f913 2c08 	ldrsb.w	r2, [r3, #-8]
 80015f2:	7fbb      	ldrb	r3, [r7, #30]
 80015f4:	b212      	sxth	r2, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	3320      	adds	r3, #32
 80015fa:	443b      	add	r3, r7
 80015fc:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001600:	7fbb      	ldrb	r3, [r7, #30]
 8001602:	3301      	adds	r3, #1
 8001604:	77bb      	strb	r3, [r7, #30]
 8001606:	7fbb      	ldrb	r3, [r7, #30]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d9ec      	bls.n	80015e6 <LIS302DL_ReadACC+0x32>
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <LIS302DL_ReadACC+0x68>
 8001616:	2b20      	cmp	r3, #32
 8001618:	d003      	beq.n	8001622 <LIS302DL_ReadACC+0x6e>
  case LIS302DL_FULLSCALE_9_2:
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
    break;
    
  default:
    break;
 800161a:	e005      	b.n	8001628 <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_2_3G;
 800161c:	2312      	movs	r3, #18
 800161e:	77fb      	strb	r3, [r7, #31]
    break;
 8001620:	e002      	b.n	8001628 <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 8001622:	2348      	movs	r3, #72	; 0x48
 8001624:	77fb      	strb	r3, [r7, #31]
    break;
 8001626:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001628:	2300      	movs	r3, #0
 800162a:	77bb      	strb	r3, [r7, #30]
 800162c:	e014      	b.n	8001658 <LIS302DL_ReadACC+0xa4>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800162e:	7fbb      	ldrb	r3, [r7, #30]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	3320      	adds	r3, #32
 8001634:	443b      	add	r3, r7
 8001636:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800163a:	b29a      	uxth	r2, r3
 800163c:	7ffb      	ldrb	r3, [r7, #31]
 800163e:	b29b      	uxth	r3, r3
 8001640:	fb12 f303 	smulbb	r3, r2, r3
 8001644:	b299      	uxth	r1, r3
 8001646:	7fbb      	ldrb	r3, [r7, #30]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	b20a      	sxth	r2, r1
 8001650:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001652:	7fbb      	ldrb	r3, [r7, #30]
 8001654:	3301      	adds	r3, #1
 8001656:	77bb      	strb	r3, [r7, #30]
 8001658:	7fbb      	ldrb	r3, [r7, #30]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d9e7      	bls.n	800162e <LIS302DL_ReadACC+0x7a>
  }
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <LIS3DSH_Init>:
  * @brief  Set LIS3DSH Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS3DSH_Init(uint16_t InitStruct)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8001676:	f000 fc6d 	bl	8001f54 <ACCELERO_IO_Init>

  /* Configure MEMS: power mode(ODR) and axes enable */
  ctrl = (uint8_t) (InitStruct);
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG4 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8001680:	f107 030f 	add.w	r3, r7, #15
 8001684:	2201      	movs	r2, #1
 8001686:	2120      	movs	r1, #32
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fcc1 	bl	8002010 <ACCELERO_IO_Write>
  
  /* Configure MEMS: full scale and self test */
  ctrl = (uint8_t) (InitStruct >> 8);
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	b29b      	uxth	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8001698:	f107 030f 	add.w	r3, r7, #15
 800169c:	2201      	movs	r2, #1
 800169e:	2124      	movs	r1, #36	; 0x24
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fcb5 	bl	8002010 <ACCELERO_IO_Write>
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <LIS3DSH_DeInit>:
  * @brief  LIS3DSH De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80016c6:	f000 fc45 	bl	8001f54 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	2201      	movs	r2, #1
 80016ce:	210f      	movs	r1, #15
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fccf 	bl	8002074 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 80016d6:	79fb      	ldrb	r3, [r7, #7]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <LIS3DSH_InterruptConfig>:
  * @param  LIS3DSH_InterruptConfig_TypeDef: pointer to a LIS3DSH_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS3DSH Interrupt.
  * @retval None
  */
void LIS3DSH_InterruptConfig(LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
  
  /* Configure Interrupt Selection , Request and Signal */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	785a      	ldrb	r2, [r3, #1]
                   LIS3DSH_IntConfigStruct->Interrupt_Request | \
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	781b      	ldrb	r3, [r3, #0]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b2da      	uxtb	r2, r3
                   LIS3DSH_IntConfigStruct->Interrupt_Signal);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 8001702:	f107 030f 	add.w	r3, r7, #15
 8001706:	2201      	movs	r2, #1
 8001708:	2123      	movs	r1, #35	; 0x23
 800170a:	4618      	mov	r0, r3
 800170c:	f000 fc80 	bl	8002010 <ACCELERO_IO_Write>
  
  /* Configure State Machine 1 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	78da      	ldrb	r2, [r3, #3]
                   LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	791b      	ldrb	r3, [r3, #4]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8001718:	4313      	orrs	r3, r2
 800171a:	b2db      	uxtb	r3, r3
 800171c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 800171e:	f107 030f 	add.w	r3, r7, #15
 8001722:	2201      	movs	r2, #1
 8001724:	2121      	movs	r1, #33	; 0x21
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fc72 	bl	8002010 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	795a      	ldrb	r2, [r3, #5]
                   LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	799b      	ldrb	r3, [r3, #6]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8001734:	4313      	orrs	r3, r2
 8001736:	b2db      	uxtb	r3, r3
 8001738:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 800173a:	f107 030f 	add.w	r3, r7, #15
 800173e:	2201      	movs	r2, #1
 8001740:	2122      	movs	r1, #34	; 0x22
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fc64 	bl	8002010 <ACCELERO_IO_Write>
}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <LIS3DSH_Click_IntConfig>:
  * @brief  Set LIS3DSH for click detection
  * @param  None
  * @retval None
  */
void LIS3DSH_Click_IntConfig(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001756:	2300      	movs	r3, #0
 8001758:	71fb      	strb	r3, [r7, #7]
  LIS3DSH_InterruptConfigTypeDef   LIS3DSH_InterruptStruct; 

  ACCELERO_IO_ITConfig();
 800175a:	f000 fc29 	bl	8001fb0 <ACCELERO_IO_ITConfig>

  /* Set LIS3DSH Interrupt configuration */
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	707b      	strb	r3, [r7, #1]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 8001762:	2300      	movs	r3, #0
 8001764:	703b      	strb	r3, [r7, #0]
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8001766:	2340      	movs	r3, #64	; 0x40
 8001768:	70bb      	strb	r3, [r7, #2]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	70fb      	strb	r3, [r7, #3]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 800176e:	2301      	movs	r3, #1
 8001770:	717b      	strb	r3, [r7, #5]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 8001772:	2300      	movs	r3, #0
 8001774:	71bb      	strb	r3, [r7, #6]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8001776:	463b      	mov	r3, r7
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ffb1 	bl	80016e0 <LIS3DSH_InterruptConfig>
    
  /* Set LIS3DSH State Machines configuration */
  ctrl=0x03; 
 800177e:	2303      	movs	r3, #3
 8001780:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	2201      	movs	r2, #1
 8001786:	2152      	movs	r1, #82	; 0x52
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fc41 	bl	8002010 <ACCELERO_IO_Write>
  ctrl=0xC8; 
 800178e:	23c8      	movs	r3, #200	; 0xc8
 8001790:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	2201      	movs	r2, #1
 8001796:	2154      	movs	r1, #84	; 0x54
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fc39 	bl	8002010 <ACCELERO_IO_Write>
  ctrl=0x45; 
 800179e:	2345      	movs	r3, #69	; 0x45
 80017a0:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	2201      	movs	r2, #1
 80017a6:	2156      	movs	r1, #86	; 0x56
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fc31 	bl	8002010 <ACCELERO_IO_Write>
  ctrl=0xFC; 
 80017ae:	23fc      	movs	r3, #252	; 0xfc
 80017b0:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	2201      	movs	r2, #1
 80017b6:	215a      	movs	r1, #90	; 0x5a
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fc29 	bl	8002010 <ACCELERO_IO_Write>
  ctrl=0xA1; 
 80017be:	23a1      	movs	r3, #161	; 0xa1
 80017c0:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	2201      	movs	r2, #1
 80017c6:	215b      	movs	r1, #91	; 0x5b
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fc21 	bl	8002010 <ACCELERO_IO_Write>
  ctrl=0x01; 
 80017ce:	2301      	movs	r3, #1
 80017d0:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	2201      	movs	r2, #1
 80017d6:	215c      	movs	r1, #92	; 0x5c
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fc19 	bl	8002010 <ACCELERO_IO_Write>

  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	2201      	movs	r2, #1
 80017e2:	217b      	movs	r1, #123	; 0x7b
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fc13 	bl	8002010 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 to detect single click */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	2201      	movs	r2, #1
 80017ee:	2160      	movs	r1, #96	; 0x60
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fc0d 	bl	8002010 <ACCELERO_IO_Write>
  ctrl=0x06; 
 80017f6:	2306      	movs	r3, #6
 80017f8:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	2201      	movs	r2, #1
 80017fe:	2161      	movs	r1, #97	; 0x61
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fc05 	bl	8002010 <ACCELERO_IO_Write>
  ctrl=0x28; 
 8001806:	2328      	movs	r3, #40	; 0x28
 8001808:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	2201      	movs	r2, #1
 800180e:	2162      	movs	r1, #98	; 0x62
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fbfd 	bl	8002010 <ACCELERO_IO_Write>
  ctrl=0x11; 
 8001816:	2311      	movs	r3, #17
 8001818:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	2201      	movs	r2, #1
 800181e:	2163      	movs	r1, #99	; 0x63
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fbf5 	bl	8002010 <ACCELERO_IO_Write>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8001834:	1dfb      	adds	r3, r7, #7
 8001836:	2201      	movs	r2, #1
 8001838:	2125      	movs	r1, #37	; 0x25
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fc1a 	bl	8002074 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001846:	b2db      	uxtb	r3, r3
 8001848:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 800184a:	1dfb      	adds	r3, r7, #7
 800184c:	2201      	movs	r2, #1
 800184e:	2125      	movs	r1, #37	; 0x25
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fbdd 	bl	8002010 <ACCELERO_IO_Write>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
 8001868:	2300      	movs	r3, #0
 800186a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 800186c:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <LIS3DSH_ReadACC+0x1a0>)
 800186e:	61bb      	str	r3, [r7, #24]
  float valueinfloat = 0;
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 8001876:	f107 030b 	add.w	r3, r7, #11
 800187a:	2201      	movs	r2, #1
 800187c:	2124      	movs	r1, #36	; 0x24
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fbf8 	bl	8002074 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	2201      	movs	r2, #1
 800188a:	2128      	movs	r1, #40	; 0x28
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fbf1 	bl	8002074 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	3301      	adds	r3, #1
 8001898:	2201      	movs	r2, #1
 800189a:	2129      	movs	r1, #41	; 0x29
 800189c:	4618      	mov	r0, r3
 800189e:	f000 fbe9 	bl	8002074 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	3302      	adds	r3, #2
 80018a8:	2201      	movs	r2, #1
 80018aa:	212a      	movs	r1, #42	; 0x2a
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 fbe1 	bl	8002074 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	3303      	adds	r3, #3
 80018b8:	2201      	movs	r2, #1
 80018ba:	212b      	movs	r1, #43	; 0x2b
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fbd9 	bl	8002074 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	3304      	adds	r3, #4
 80018c8:	2201      	movs	r2, #1
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fbd1 	bl	8002074 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	3305      	adds	r3, #5
 80018d8:	2201      	movs	r2, #1
 80018da:	212d      	movs	r1, #45	; 0x2d
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fbc9 	bl	8002074 <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 80018e2:	7afb      	ldrb	r3, [r7, #11]
 80018e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	d854      	bhi.n	8001996 <LIS3DSH_ReadACC+0x136>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <LIS3DSH_ReadACC+0x94>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001979 	.word	0x08001979
 80018f8:	08001997 	.word	0x08001997
 80018fc:	08001997 	.word	0x08001997
 8001900:	08001997 	.word	0x08001997
 8001904:	08001997 	.word	0x08001997
 8001908:	08001997 	.word	0x08001997
 800190c:	08001997 	.word	0x08001997
 8001910:	08001997 	.word	0x08001997
 8001914:	0800197f 	.word	0x0800197f
 8001918:	08001997 	.word	0x08001997
 800191c:	08001997 	.word	0x08001997
 8001920:	08001997 	.word	0x08001997
 8001924:	08001997 	.word	0x08001997
 8001928:	08001997 	.word	0x08001997
 800192c:	08001997 	.word	0x08001997
 8001930:	08001997 	.word	0x08001997
 8001934:	08001985 	.word	0x08001985
 8001938:	08001997 	.word	0x08001997
 800193c:	08001997 	.word	0x08001997
 8001940:	08001997 	.word	0x08001997
 8001944:	08001997 	.word	0x08001997
 8001948:	08001997 	.word	0x08001997
 800194c:	08001997 	.word	0x08001997
 8001950:	08001997 	.word	0x08001997
 8001954:	0800198b 	.word	0x0800198b
 8001958:	08001997 	.word	0x08001997
 800195c:	08001997 	.word	0x08001997
 8001960:	08001997 	.word	0x08001997
 8001964:	08001997 	.word	0x08001997
 8001968:	08001997 	.word	0x08001997
 800196c:	08001997 	.word	0x08001997
 8001970:	08001997 	.word	0x08001997
 8001974:	08001991 	.word	0x08001991
  {
    /* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */ 
  case LIS3DSH_FULLSCALE_2:
    sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <LIS3DSH_ReadACC+0x1a0>)
 800197a:	61bb      	str	r3, [r7, #24]
    break;
 800197c:	e00c      	b.n	8001998 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */ 
  case LIS3DSH_FULLSCALE_4:
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 800197e:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <LIS3DSH_ReadACC+0x1a4>)
 8001980:	61bb      	str	r3, [r7, #24]
    break;
 8001982:	e009      	b.n	8001998 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */ 
  case LIS3DSH_FULLSCALE_6:
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001984:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <LIS3DSH_ReadACC+0x1a8>)
 8001986:	61bb      	str	r3, [r7, #24]
    break;
 8001988:	e006      	b.n	8001998 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */ 
  case LIS3DSH_FULLSCALE_8:
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 800198a:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <LIS3DSH_ReadACC+0x1ac>)
 800198c:	61bb      	str	r3, [r7, #24]
    break;
 800198e:	e003      	b.n	8001998 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */ 
  case LIS3DSH_FULLSCALE_16:
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <LIS3DSH_ReadACC+0x1b0>)
 8001992:	61bb      	str	r3, [r7, #24]
    break;
 8001994:	e000      	b.n	8001998 <LIS3DSH_ReadACC+0x138>
    
  default:
    break;
 8001996:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001998:	2300      	movs	r3, #0
 800199a:	77fb      	strb	r3, [r7, #31]
 800199c:	e027      	b.n	80019ee <LIS3DSH_ReadACC+0x18e>
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 800199e:	7ffb      	ldrb	r3, [r7, #31]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	3301      	adds	r3, #1
 80019a4:	3320      	adds	r3, #32
 80019a6:	443b      	add	r3, r7
 80019a8:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	7ffa      	ldrb	r2, [r7, #31]
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	3220      	adds	r2, #32
 80019b4:	443a      	add	r2, r7
 80019b6:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 80019ba:	4413      	add	r3, r2
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	edc7 7a05 	vstr	s15, [r7, #20]
    pData[i] = (int16_t)valueinfloat;
 80019d0:	7ffb      	ldrb	r3, [r7, #31]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e0:	ee17 2a90 	vmov	r2, s15
 80019e4:	b212      	sxth	r2, r2
 80019e6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80019e8:	7ffb      	ldrb	r3, [r7, #31]
 80019ea:	3301      	adds	r3, #1
 80019ec:	77fb      	strb	r3, [r7, #31]
 80019ee:	7ffb      	ldrb	r3, [r7, #31]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d9d4      	bls.n	800199e <LIS3DSH_ReadACC+0x13e>
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	3d75c28f 	.word	0x3d75c28f
 8001a04:	3df5c28f 	.word	0x3df5c28f
 8001a08:	3e3851ec 	.word	0x3e3851ec
 8001a0c:	3e75c28f 	.word	0x3e75c28f
 8001a10:	3f3ae148 	.word	0x3f3ae148

08001a14 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	; 0x30
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10e      	bne.n	8001a42 <BSP_LED_Init+0x2e>
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	4b33      	ldr	r3, [pc, #204]	; (8001af8 <BSP_LED_Init+0xe4>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	4a32      	ldr	r2, [pc, #200]	; (8001af8 <BSP_LED_Init+0xe4>)
 8001a2e:	f043 0308 	orr.w	r3, r3, #8
 8001a32:	6313      	str	r3, [r2, #48]	; 0x30
 8001a34:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <BSP_LED_Init+0xe4>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	e034      	b.n	8001aac <BSP_LED_Init+0x98>
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d10e      	bne.n	8001a66 <BSP_LED_Init+0x52>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <BSP_LED_Init+0xe4>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	4a29      	ldr	r2, [pc, #164]	; (8001af8 <BSP_LED_Init+0xe4>)
 8001a52:	f043 0308 	orr.w	r3, r3, #8
 8001a56:	6313      	str	r3, [r2, #48]	; 0x30
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <BSP_LED_Init+0xe4>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	e022      	b.n	8001aac <BSP_LED_Init+0x98>
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d10e      	bne.n	8001a8a <BSP_LED_Init+0x76>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <BSP_LED_Init+0xe4>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4a20      	ldr	r2, [pc, #128]	; (8001af8 <BSP_LED_Init+0xe4>)
 8001a76:	f043 0308 	orr.w	r3, r3, #8
 8001a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <BSP_LED_Init+0xe4>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	e010      	b.n	8001aac <BSP_LED_Init+0x98>
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d10d      	bne.n	8001aac <BSP_LED_Init+0x98>
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <BSP_LED_Init+0xe4>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <BSP_LED_Init+0xe4>)
 8001a9a:	f043 0308 	orr.w	r3, r3, #8
 8001a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <BSP_LED_Init+0xe4>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4a13      	ldr	r2, [pc, #76]	; (8001afc <BSP_LED_Init+0xe8>)
 8001ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <BSP_LED_Init+0xec>)
 8001ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aca:	f107 021c 	add.w	r2, r7, #28
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 fe77 	bl	80037c4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <BSP_LED_Init+0xec>)
 8001ada:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	4a06      	ldr	r2, [pc, #24]	; (8001afc <BSP_LED_Init+0xe8>)
 8001ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f002 f807 	bl	8003afc <HAL_GPIO_WritePin>
}
 8001aee:	bf00      	nop
 8001af0:	3730      	adds	r7, #48	; 0x30
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	0800c1d8 	.word	0x0800c1d8
 8001b00:	200000a8 	.word	0x200000a8

08001b04 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <BSP_LED_On+0x2c>)
 8001b12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <BSP_LED_On+0x30>)
 8001b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4619      	mov	r1, r3
 8001b22:	f001 ffeb 	bl	8003afc <HAL_GPIO_WritePin>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200000a8 	.word	0x200000a8
 8001b34:	0800c1d8 	.word	0x0800c1d8

08001b38 <BSP_LED_Off>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <BSP_LED_Off+0x2c>)
 8001b46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <BSP_LED_Off+0x30>)
 8001b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	f001 ffd1 	bl	8003afc <HAL_GPIO_WritePin>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200000a8 	.word	0x200000a8
 8001b68:	0800c1d8 	.word	0x0800c1d8

08001b6c <BSP_LED_Toggle>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <BSP_LED_Toggle+0x2c>)
 8001b7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	4906      	ldr	r1, [pc, #24]	; (8001b9c <BSP_LED_Toggle+0x30>)
 8001b82:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4610      	mov	r0, r2
 8001b8a:	f001 ffd0 	bl	8003b2e <HAL_GPIO_TogglePin>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200000a8 	.word	0x200000a8
 8001b9c:	0800c1d8 	.word	0x0800c1d8

08001ba0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Mode)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	460a      	mov	r2, r1
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	4613      	mov	r3, r2
 8001bae:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10d      	bne.n	8001bd2 <BSP_PB_Init+0x32>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <BSP_PB_Init+0xa8>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a22      	ldr	r2, [pc, #136]	; (8001c48 <BSP_PB_Init+0xa8>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <BSP_PB_Init+0xa8>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
  
  if (Mode == BUTTON_MODE_GPIO)
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d111      	bne.n	8001bfc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001bd8:	2301      	movs	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61bb      	str	r3, [r7, #24]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	4a18      	ldr	r2, [pc, #96]	; (8001c4c <BSP_PB_Init+0xac>)
 8001bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf0:	f107 020c 	add.w	r2, r7, #12
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f001 fde4 	bl	80037c4 <HAL_GPIO_Init>
  }
  
  if (Mode == BUTTON_MODE_EXTI)
 8001bfc:	79bb      	ldrb	r3, [r7, #6]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d11e      	bne.n	8001c40 <BSP_PB_Init+0xa0>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001c02:	2301      	movs	r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001c0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c12:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <BSP_PB_Init+0xac>)
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	f107 020c 	add.w	r2, r7, #12
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f001 fdce 	bl	80037c4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 8001c28:	2306      	movs	r3, #6
 8001c2a:	b25b      	sxtb	r3, r3
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	210f      	movs	r1, #15
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 f9c2 	bl	8002fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001c36:	2306      	movs	r3, #6
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f001 f9d9 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
  }
}
 8001c40:	bf00      	nop
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	200000b8 	.word	0x200000b8

08001c50 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001c54:	4819      	ldr	r0, [pc, #100]	; (8001cbc <SPIx_Init+0x6c>)
 8001c56:	f006 fd28 	bl	80086aa <HAL_SPI_GetState>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d12a      	bne.n	8001cb6 <SPIx_Init+0x66>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <SPIx_Init+0x6c>)
 8001c62:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <SPIx_Init+0x70>)
 8001c64:	601a      	str	r2, [r3, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <SPIx_Init+0x6c>)
 8001c68:	2218      	movs	r2, #24
 8001c6a:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <SPIx_Init+0x6c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <SPIx_Init+0x6c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <SPIx_Init+0x6c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <SPIx_Init+0x6c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <SPIx_Init+0x6c>)
 8001c86:	2207      	movs	r2, #7
 8001c88:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <SPIx_Init+0x6c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <SPIx_Init+0x6c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <SPIx_Init+0x6c>)
 8001c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <SPIx_Init+0x6c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <SPIx_Init+0x6c>)
 8001ca6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001caa:	605a      	str	r2, [r3, #4]

    SPIx_MspInit();
 8001cac:	f000 f836 	bl	8001d1c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <SPIx_Init+0x6c>)
 8001cb2:	f006 f9e7 	bl	8008084 <HAL_SPI_Init>
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20003b00 	.word	0x20003b00
 8001cc0:	40013000 	.word	0x40013000

08001cc4 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <SPIx_WriteRead+0x38>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f107 020f 	add.w	r2, r7, #15
 8001cda:	1df9      	adds	r1, r7, #7
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2301      	movs	r3, #1
 8001ce0:	4807      	ldr	r0, [pc, #28]	; (8001d00 <SPIx_WriteRead+0x3c>)
 8001ce2:	f006 fa9c 	bl	800821e <HAL_SPI_TransmitReceive>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001cec:	f000 f80a 	bl	8001d04 <SPIx_Error>
  }
  
  return receivedbyte;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200000c0 	.word	0x200000c0
 8001d00:	20003b00 	.word	0x20003b00

08001d04 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication bus */
  HAL_SPI_DeInit(&SpiHandle);
 8001d08:	4803      	ldr	r0, [pc, #12]	; (8001d18 <SPIx_Error+0x14>)
 8001d0a:	f006 fa4c 	bl	80081a6 <HAL_SPI_DeInit>
  
  /* Re-Initialize the SPI communication bus */
  SPIx_Init();
 8001d0e:	f7ff ff9f 	bl	8001c50 <SPIx_Init>
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20003b00 	.word	0x20003b00

08001d1c <SPIx_MspInit>:

/**
  * @brief  SPI MSP Init.
  */
static void SPIx_MspInit(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <SPIx_MspInit+0x68>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <SPIx_MspInit+0x68>)
 8001d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <SPIx_MspInit+0x68>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <SPIx_MspInit+0x68>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a0f      	ldr	r2, [pc, #60]	; (8001d84 <SPIx_MspInit+0x68>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <SPIx_MspInit+0x68>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
 8001d5a:	23e0      	movs	r3, #224	; 0xe0
 8001d5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8001d62:	2302      	movs	r3, #2
 8001d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001d66:	2301      	movs	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001d6a:	2305      	movs	r3, #5
 8001d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4619      	mov	r1, r3
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <SPIx_MspInit+0x6c>)
 8001d76:	f001 fd25 	bl	80037c4 <HAL_GPIO_Init>
}
 8001d7a:	bf00      	nop
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000

08001d8c <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001d90:	480e      	ldr	r0, [pc, #56]	; (8001dcc <I2Cx_Init+0x40>)
 8001d92:	f004 f941 	bl	8006018 <HAL_I2C_GetState>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d114      	bne.n	8001dc6 <I2Cx_Init+0x3a>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <I2Cx_Init+0x40>)
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <I2Cx_Init+0x44>)
 8001da0:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <I2Cx_Init+0x40>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1 = 0x33;
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <I2Cx_Init+0x40>)
 8001daa:	2233      	movs	r2, #51	; 0x33
 8001dac:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <I2Cx_Init+0x40>)
 8001db0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001db4:	611a      	str	r2, [r3, #16]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <I2Cx_Init+0x40>)
 8001db8:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <I2Cx_Init+0x48>)
 8001dba:	601a      	str	r2, [r3, #0]
      
    /* Init the I2C */
    I2Cx_MspInit();
 8001dbc:	f000 f876 	bl	8001eac <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <I2Cx_Init+0x40>)
 8001dc2:	f003 fc75 	bl	80056b0 <HAL_I2C_Init>
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20003b58 	.word	0x20003b58
 8001dd0:	000186a0 	.word	0x000186a0
 8001dd4:	40005400 	.word	0x40005400

08001dd8 <I2Cx_WriteData>:
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  * @retval HAL status
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af04      	add	r7, sp, #16
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	b299      	uxth	r1, r3
 8001df2:	79bb      	ldrb	r3, [r7, #6]
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <I2Cx_WriteData+0x50>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	9302      	str	r3, [sp, #8]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	1d7b      	adds	r3, r7, #5
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2301      	movs	r3, #1
 8001e06:	4809      	ldr	r0, [pc, #36]	; (8001e2c <I2Cx_WriteData+0x54>)
 8001e08:	f003 fdda 	bl	80059c0 <HAL_I2C_Mem_Write>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <I2Cx_WriteData+0x46>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 f837 	bl	8001e8c <I2Cx_Error>
  }
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200000bc 	.word	0x200000bc
 8001e2c:	20003b58 	.word	0x20003b58

08001e30 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS  
  * @param  Reg: The target register address to read
  * @retval HAL status
  */
static uint8_t  I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af04      	add	r7, sp, #16
 8001e36:	4603      	mov	r3, r0
 8001e38:	460a      	mov	r2, r1
 8001e3a:	71fb      	strb	r3, [r7, #7]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	b299      	uxth	r1, r3
 8001e4c:	79bb      	ldrb	r3, [r7, #6]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <I2Cx_ReadData+0x54>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	9302      	str	r3, [sp, #8]
 8001e56:	2301      	movs	r3, #1
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	f107 030e 	add.w	r3, r7, #14
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2301      	movs	r3, #1
 8001e62:	4809      	ldr	r0, [pc, #36]	; (8001e88 <I2Cx_ReadData+0x58>)
 8001e64:	f003 fea6 	bl	8005bb4 <HAL_I2C_Mem_Read>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <I2Cx_ReadData+0x4a>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 f809 	bl	8001e8c <I2Cx_Error>
  }
  return value;
 8001e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200000bc 	.word	0x200000bc
 8001e88:	20003b58 	.word	0x20003b58

08001e8c <I2Cx_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address 
  */
static void I2Cx_Error(uint8_t Addr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&I2cHandle);
 8001e96:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <I2Cx_Error+0x1c>)
 8001e98:	f003 fd4e 	bl	8005938 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init();
 8001e9c:	f7ff ff76 	bl	8001d8c <I2Cx_Init>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20003b58 	.word	0x20003b58

08001eac <I2Cx_MspInit>:

/**
  * @brief I2C MSP Initialization
  */
static void I2Cx_MspInit(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <I2Cx_MspInit+0xa0>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a24      	ldr	r2, [pc, #144]	; (8001f4c <I2Cx_MspInit+0xa0>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <I2Cx_MspInit+0xa0>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 8001ece:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed4:	2312      	movs	r3, #18
 8001ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4819      	ldr	r0, [pc, #100]	; (8001f50 <I2Cx_MspInit+0xa4>)
 8001eec:	f001 fc6a 	bl	80037c4 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <I2Cx_MspInit+0xa0>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <I2Cx_MspInit+0xa0>)
 8001efa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001efe:	6413      	str	r3, [r2, #64]	; 0x40
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <I2Cx_MspInit+0xa0>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <I2Cx_MspInit+0xa0>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <I2Cx_MspInit+0xa0>)
 8001f12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f16:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <I2Cx_MspInit+0xa0>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <I2Cx_MspInit+0xa0>)
 8001f1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f22:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2100      	movs	r1, #0
 8001f28:	201f      	movs	r0, #31
 8001f2a:	f001 f846 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001f2e:	201f      	movs	r0, #31
 8001f30:	f001 f85f 	bl	8002ff2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2100      	movs	r1, #0
 8001f38:	2020      	movs	r0, #32
 8001f3a:	f001 f83e 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8001f3e:	2020      	movs	r0, #32
 8001f40:	f001 f857 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 8001f44:	bf00      	nop
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020400 	.word	0x40020400

08001f54 <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <ACCELERO_IO_Init+0x54>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a11      	ldr	r2, [pc, #68]	; (8001fa8 <ACCELERO_IO_Init+0x54>)
 8001f64:	f043 0310 	orr.w	r3, r3, #16
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <ACCELERO_IO_Init+0x54>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8001f76:	2308      	movs	r3, #8
 8001f78:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001f82:	2301      	movs	r3, #1
 8001f84:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4808      	ldr	r0, [pc, #32]	; (8001fac <ACCELERO_IO_Init+0x58>)
 8001f8c:	f001 fc1a 	bl	80037c4 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 8001f90:	2201      	movs	r2, #1
 8001f92:	2108      	movs	r1, #8
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <ACCELERO_IO_Init+0x58>)
 8001f96:	f001 fdb1 	bl	8003afc <HAL_GPIO_WritePin>
  
  SPIx_Init();
 8001f9a:	f7ff fe59 	bl	8001c50 <SPIx_Init>
}
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40021000 	.word	0x40021000

08001fb0 <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <ACCELERO_IO_ITConfig+0x58>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <ACCELERO_IO_ITConfig+0x58>)
 8001fc0:	f043 0310 	orr.w	r3, r3, #16
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <ACCELERO_IO_ITConfig+0x58>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001fd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4808      	ldr	r0, [pc, #32]	; (800200c <ACCELERO_IO_ITConfig+0x5c>)
 8001fea:	f001 fbeb 	bl	80037c4 <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	210f      	movs	r1, #15
 8001ff2:	2007      	movs	r0, #7
 8001ff4:	f000 ffe1 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 8001ff8:	2007      	movs	r0, #7
 8001ffa:	f000 fffa 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40021000 	.word	0x40021000

08002010 <ACCELERO_IO_Write>:
  * @param  pBuffer: pointer to the buffer containing the data to be written to the Accelerometer.
  * @param  WriteAddr: Accelerometer's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	70fb      	strb	r3, [r7, #3]
 800201c:	4613      	mov	r3, r2
 800201e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002020:	883b      	ldrh	r3, [r7, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d903      	bls.n	800202e <ACCELERO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800202c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 800202e:	2200      	movs	r2, #0
 8002030:	2108      	movs	r1, #8
 8002032:	480f      	ldr	r0, [pc, #60]	; (8002070 <ACCELERO_IO_Write+0x60>)
 8002034:	f001 fd62 	bl	8003afc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fe42 	bl	8001cc4 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002040:	e00a      	b.n	8002058 <ACCELERO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fe3c 	bl	8001cc4 <SPIx_WriteRead>
    NumByteToWrite--;
 800204c:	883b      	ldrh	r3, [r7, #0]
 800204e:	3b01      	subs	r3, #1
 8002050:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3301      	adds	r3, #1
 8002056:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8002058:	883b      	ldrh	r3, [r7, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f1      	bne.n	8002042 <ACCELERO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 800205e:	2201      	movs	r2, #1
 8002060:	2108      	movs	r1, #8
 8002062:	4803      	ldr	r0, [pc, #12]	; (8002070 <ACCELERO_IO_Write+0x60>)
 8002064:	f001 fd4a 	bl	8003afc <HAL_GPIO_WritePin>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000

08002074 <ACCELERO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the Accelerometer.
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002084:	883b      	ldrh	r3, [r7, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d904      	bls.n	8002094 <ACCELERO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002090:	70fb      	strb	r3, [r7, #3]
 8002092:	e003      	b.n	800209c <ACCELERO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800209a:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 800209c:	2200      	movs	r2, #0
 800209e:	2108      	movs	r1, #8
 80020a0:	4810      	ldr	r0, [pc, #64]	; (80020e4 <ACCELERO_IO_Read+0x70>)
 80020a2:	f001 fd2b 	bl	8003afc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fe0b 	bl	8001cc4 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80020ae:	e00c      	b.n	80020ca <ACCELERO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff fe07 	bl	8001cc4 <SPIx_WriteRead>
 80020b6:	4603      	mov	r3, r0
 80020b8:	461a      	mov	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80020be:	883b      	ldrh	r3, [r7, #0]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3301      	adds	r3, #1
 80020c8:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80020ca:	883b      	ldrh	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ef      	bne.n	80020b0 <ACCELERO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 80020d0:	2201      	movs	r2, #1
 80020d2:	2108      	movs	r1, #8
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <ACCELERO_IO_Read+0x70>)
 80020d6:	f001 fd11 	bl	8003afc <HAL_GPIO_WritePin>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000

080020e8 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <AUDIO_IO_Init+0x68>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a16      	ldr	r2, [pc, #88]	; (8002150 <AUDIO_IO_Init+0x68>)
 80020f8:	f043 0308 	orr.w	r3, r3, #8
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <AUDIO_IO_Init+0x68>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 800210a:	2310      	movs	r3, #16
 800210c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	2301      	movs	r3, #1
 8002110:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002112:	2302      	movs	r3, #2
 8002114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	4619      	mov	r1, r3
 800211e:	480d      	ldr	r0, [pc, #52]	; (8002154 <AUDIO_IO_Init+0x6c>)
 8002120:	f001 fb50 	bl	80037c4 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8002124:	f7ff fe32 	bl	8001d8c <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8002128:	2200      	movs	r2, #0
 800212a:	2110      	movs	r1, #16
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <AUDIO_IO_Init+0x6c>)
 800212e:	f001 fce5 	bl	8003afc <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8002132:	2005      	movs	r0, #5
 8002134:	f000 fe36 	bl	8002da4 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8002138:	2201      	movs	r2, #1
 800213a:	2110      	movs	r1, #16
 800213c:	4805      	ldr	r0, [pc, #20]	; (8002154 <AUDIO_IO_Init+0x6c>)
 800213e:	f001 fcdd 	bl	8003afc <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8002142:	2005      	movs	r0, #5
 8002144:	f000 fe2e 	bl	8002da4 <HAL_Delay>
}
 8002148:	bf00      	nop
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	40020c00 	.word	0x40020c00

08002158 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	460b      	mov	r3, r1
 8002172:	71bb      	strb	r3, [r7, #6]
 8002174:	4613      	mov	r3, r2
 8002176:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002178:	797a      	ldrb	r2, [r7, #5]
 800217a:	79b9      	ldrb	r1, [r7, #6]
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fe2a 	bl	8001dd8 <I2Cx_WriteData>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	460a      	mov	r2, r1
 8002196:	71fb      	strb	r3, [r7, #7]
 8002198:	4613      	mov	r3, r2
 800219a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800219c:	79ba      	ldrb	r2, [r7, #6]
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fe44 	bl	8001e30 <I2Cx_ReadData>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 80021be:	2300      	movs	r3, #0
 80021c0:	82bb      	strh	r3, [r7, #20]
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
 80021c2:	2300      	movs	r3, #0
 80021c4:	723b      	strb	r3, [r7, #8]
 80021c6:	2300      	movs	r3, #0
 80021c8:	727b      	strb	r3, [r7, #9]
 80021ca:	2300      	movs	r3, #0
 80021cc:	72bb      	strb	r3, [r7, #10]
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 80021ce:	4b3c      	ldr	r3, [pc, #240]	; (80022c0 <BSP_ACCELERO_Init+0x10c>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4798      	blx	r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b3b      	cmp	r3, #59	; 0x3b
 80021d8:	d138      	bne.n	800224c <BSP_ACCELERO_Init+0x98>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 80021da:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <BSP_ACCELERO_Init+0x110>)
 80021dc:	4a38      	ldr	r2, [pc, #224]	; (80022c0 <BSP_ACCELERO_Init+0x10c>)
 80021de:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS302DL MEMS Accelerometer *********************/
    lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 80021e0:	2340      	movs	r3, #64	; 0x40
 80021e2:	733b      	strb	r3, [r7, #12]
    lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 80021e4:	2300      	movs	r3, #0
 80021e6:	737b      	strb	r3, [r7, #13]
    lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 80021e8:	2307      	movs	r3, #7
 80021ea:	73bb      	strb	r3, [r7, #14]
    lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
    lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	743b      	strb	r3, [r7, #16]
    
    /* Configure MEMS: data rate, power mode, full scale, self test and axes */
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80021f4:	7b7a      	ldrb	r2, [r7, #13]
 80021f6:	7b3b      	ldrb	r3, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80021fe:	4313      	orrs	r3, r2
 8002200:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 8002202:	7c3b      	ldrb	r3, [r7, #16]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8002204:	4313      	orrs	r3, r2
 8002206:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Axes_Enable);
 8002208:	7bbb      	ldrb	r3, [r7, #14]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 800220a:	4313      	orrs	r3, r2
 800220c:	b2db      	uxtb	r3, r3
 800220e:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8002210:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <BSP_ACCELERO_Init+0x110>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	8aba      	ldrh	r2, [r7, #20]
 8002218:	4610      	mov	r0, r2
 800221a:	4798      	blx	r3
    
    /* MEMS High Pass Filter configuration */
    lis302dl_filter.HighPassFilter_Data_Selection = LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
 800221c:	2320      	movs	r3, #32
 800221e:	723b      	strb	r3, [r7, #8]
    lis302dl_filter.HighPassFilter_CutOff_Frequency = LIS302DL_HIGHPASSFILTER_LEVEL_1;
 8002220:	2301      	movs	r3, #1
 8002222:	727b      	strb	r3, [r7, #9]
    lis302dl_filter.HighPassFilter_Interrupt = LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;
 8002224:	230c      	movs	r3, #12
 8002226:	72bb      	strb	r3, [r7, #10]
    
    /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8002228:	7a3a      	ldrb	r2, [r7, #8]
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
 800222a:	7a7b      	ldrb	r3, [r7, #9]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 800222c:	4313      	orrs	r3, r2
 800222e:	b2da      	uxtb	r2, r3
                     lis302dl_filter.HighPassFilter_Interrupt);
 8002230:	7abb      	ldrb	r3, [r7, #10]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8002232:	4313      	orrs	r3, r2
 8002234:	b2db      	uxtb	r3, r3
 8002236:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 8002238:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <BSP_ACCELERO_Init+0x110>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	8aba      	ldrh	r2, [r7, #20]
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	4610      	mov	r0, r2
 8002244:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	75fb      	strb	r3, [r7, #23]
 800224a:	e034      	b.n	80022b6 <BSP_ACCELERO_Init+0x102>
  }
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <BSP_ACCELERO_Init+0x114>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4798      	blx	r3
 8002252:	4603      	mov	r3, r0
 8002254:	2b3f      	cmp	r3, #63	; 0x3f
 8002256:	d12c      	bne.n	80022b2 <BSP_ACCELERO_Init+0xfe>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis3dshDrv;
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <BSP_ACCELERO_Init+0x110>)
 800225a:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <BSP_ACCELERO_Init+0x114>)
 800225c:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS3DSH MEMS Accelerometer **********************/
    l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_100;
 800225e:	2360      	movs	r3, #96	; 0x60
 8002260:	703b      	strb	r3, [r7, #0]
    l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 8002262:	2307      	movs	r3, #7
 8002264:	707b      	strb	r3, [r7, #1]
    l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 8002266:	2300      	movs	r3, #0
 8002268:	70bb      	strb	r3, [r7, #2]
    l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 800226a:	2300      	movs	r3, #0
 800226c:	70fb      	strb	r3, [r7, #3]
    l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 800226e:	2300      	movs	r3, #0
 8002270:	713b      	strb	r3, [r7, #4]
    l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 8002272:	2300      	movs	r3, #0
 8002274:	717b      	strb	r3, [r7, #5]
    
    /* Configure MEMS: power mode(ODR) and axes enable */
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 8002276:	783a      	ldrb	r2, [r7, #0]
                       l1s3dsh_InitStruct.Axes_Enable);
 8002278:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 800227a:	4313      	orrs	r3, r2
 800227c:	b2db      	uxtb	r3, r3
 800227e:	82bb      	strh	r3, [r7, #20]
    
    /* Configure MEMS: full scale and self test */
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8002280:	78ba      	ldrb	r2, [r7, #2]
                         l1s3dsh_InitStruct.Self_Test   | \
 8002282:	78fb      	ldrb	r3, [r7, #3]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8002284:	4313      	orrs	r3, r2
 8002286:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Full_Scale  | \
 8002288:	793b      	ldrb	r3, [r7, #4]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 800228a:	4313      	orrs	r3, r2
 800228c:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);
 800228e:	797b      	ldrb	r3, [r7, #5]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8002290:	4313      	orrs	r3, r2
 8002292:	b2db      	uxtb	r3, r3
 8002294:	b29b      	uxth	r3, r3
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	b29a      	uxth	r2, r3
 800229a:	8abb      	ldrh	r3, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <BSP_ACCELERO_Init+0x110>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	8aba      	ldrh	r2, [r7, #20]
 80022a8:	4610      	mov	r0, r2
 80022aa:	4798      	blx	r3
    
    ret = ACCELERO_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	75fb      	strb	r3, [r7, #23]
 80022b0:	e001      	b.n	80022b6 <BSP_ACCELERO_Init+0x102>
  }

  else
  {
    ret = ACCELERO_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000040 	.word	0x20000040
 80022c4:	20003bac 	.word	0x20003bac
 80022c8:	20000074 	.word	0x20000074

080022cc <BSP_ACCELERO_ReadID>:
/**
  * @brief  Read ID of Accelerometer component.
  * @retval ID
  */
uint8_t BSP_ACCELERO_ReadID(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
  uint8_t id = 0x00;
 80022d2:	2300      	movs	r3, #0
 80022d4:	71fb      	strb	r3, [r7, #7]

  if(AcceleroDrv->ReadID != NULL)
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <BSP_ACCELERO_ReadID+0x2c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <BSP_ACCELERO_ReadID+0x20>
  {
    id = AcceleroDrv->ReadID();
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <BSP_ACCELERO_ReadID+0x2c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4798      	blx	r3
 80022e8:	4603      	mov	r3, r0
 80022ea:	71fb      	strb	r3, [r7, #7]
  }  
  return id;
 80022ec:	79fb      	ldrb	r3, [r7, #7]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20003bac 	.word	0x20003bac

080022fc <BSP_ACCELERO_Click_ITClear>:

/**
  * @brief  Clear Accelerometer click IT.
  */
void BSP_ACCELERO_Click_ITClear(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  if(AcceleroDrv->ClearIT != NULL)
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <BSP_ACCELERO_Click_ITClear+0x1c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <BSP_ACCELERO_Click_ITClear+0x16>
  {
    AcceleroDrv->ClearIT();
 800230a:	4b03      	ldr	r3, [pc, #12]	; (8002318 <BSP_ACCELERO_Click_ITClear+0x1c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	4798      	blx	r3
  }
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20003bac 	.word	0x20003bac

0800231c <BSP_AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	603a      	str	r2, [r7, #0]
 8002326:	80fb      	strh	r3, [r7, #6]
 8002328:	460b      	mov	r3, r1
 800232a:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8002330:	2200      	movs	r2, #0
 8002332:	6839      	ldr	r1, [r7, #0]
 8002334:	481c      	ldr	r0, [pc, #112]	; (80023a8 <BSP_AUDIO_OUT_Init+0x8c>)
 8002336:	f000 f89f 	bl	8002478 <BSP_AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <BSP_AUDIO_OUT_Init+0x8c>)
 800233c:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <BSP_AUDIO_OUT_Init+0x90>)
 800233e:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 8002340:	4819      	ldr	r0, [pc, #100]	; (80023a8 <BSP_AUDIO_OUT_Init+0x8c>)
 8002342:	f004 fcd9 	bl	8006cf8 <HAL_I2S_GetState>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d103      	bne.n	8002354 <BSP_AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 800234c:	2100      	movs	r1, #0
 800234e:	4816      	ldr	r0, [pc, #88]	; (80023a8 <BSP_AUDIO_OUT_Init+0x8c>)
 8002350:	f000 f8ec 	bl	800252c <BSP_AUDIO_OUT_MspInit>
  }
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8002354:	6838      	ldr	r0, [r7, #0]
 8002356:	f000 f9a9 	bl	80026ac <I2S3_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <BSP_AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
  }
  
  if(ret == AUDIO_OK)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10e      	bne.n	8002388 <BSP_AUDIO_OUT_Init+0x6c>
  {
    /* Retrieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <BSP_AUDIO_OUT_Init+0x94>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2094      	movs	r0, #148	; 0x94
 8002370:	4798      	blx	r3
 8002372:	4603      	mov	r3, r0
 8002374:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8002378:	2be0      	cmp	r3, #224	; 0xe0
 800237a:	d103      	bne.n	8002384 <BSP_AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <BSP_AUDIO_OUT_Init+0x98>)
 800237e:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <BSP_AUDIO_OUT_Init+0x94>)
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e001      	b.n	8002388 <BSP_AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d107      	bne.n	800239e <BSP_AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <BSP_AUDIO_OUT_Init+0x98>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681c      	ldr	r4, [r3, #0]
 8002394:	797a      	ldrb	r2, [r7, #5]
 8002396:	88f9      	ldrh	r1, [r7, #6]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	2094      	movs	r0, #148	; 0x94
 800239c:	47a0      	blx	r4
  }
  
  return ret;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd90      	pop	{r4, r7, pc}
 80023a8:	20003bb4 	.word	0x20003bb4
 80023ac:	40003c00 	.word	0x40003c00
 80023b0:	2000000c 	.word	0x2000000c
 80023b4:	20003bb0 	.word	0x20003bb0

080023b8 <BSP_AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <BSP_AUDIO_OUT_Play+0x4c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	b292      	uxth	r2, r2
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	2094      	movs	r0, #148	; 0x94
 80023d0:	4798      	blx	r3
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <BSP_AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e00f      	b.n	80023fc <BSP_AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023e2:	d203      	bcs.n	80023ec <BSP_AUDIO_OUT_Play+0x34>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	e001      	b.n	80023f0 <BSP_AUDIO_OUT_Play+0x38>
 80023ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f0:	461a      	mov	r2, r3
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4804      	ldr	r0, [pc, #16]	; (8002408 <BSP_AUDIO_OUT_Play+0x50>)
 80023f6:	f004 fb1b 	bl	8006a30 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80023fa:	2300      	movs	r3, #0
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20003bb0 	.word	0x20003bb0
 8002408:	20003bb4 	.word	0x20003bb4

0800240c <BSP_AUDIO_OUT_ChangeBuffer>:
  * @brief  Sends n-Bytes on the I2S interface.
  * @param  pData: Pointer to data address 
  * @param  Size: Number of data to be written
  */
void BSP_AUDIO_OUT_ChangeBuffer(uint16_t *pData, uint16_t Size)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 8002418:	887b      	ldrh	r3, [r7, #2]
 800241a:	461a      	mov	r2, r3
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4803      	ldr	r0, [pc, #12]	; (800242c <BSP_AUDIO_OUT_ChangeBuffer+0x20>)
 8002420:	f004 fb06 	bl	8006a30 <HAL_I2S_Transmit_DMA>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20003bb4 	.word	0x20003bb4

08002430 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_I2S_TxCpltCallback+0x20>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8002442:	f7fe fc81 	bl	8000d48 <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40003c00 	.word	0x40003c00

08002454 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d101      	bne.n	800246a <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8002466:	f7fe fc63 	bl	8000d30 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40003c00 	.word	0x40003c00

08002478 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	; 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8002484:	2300      	movs	r3, #0
 8002486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800248a:	23ff      	movs	r3, #255	; 0xff
 800248c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 8002490:	2300      	movs	r3, #0
 8002492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002496:	e010      	b.n	80024ba <BSP_AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8002498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800249c:	4a20      	ldr	r2, [pc, #128]	; (8002520 <BSP_AUDIO_OUT_ClockConfig+0xa8>)
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d103      	bne.n	80024b0 <BSP_AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 80024a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 80024b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024b4:	3301      	adds	r3, #1
 80024b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80024ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024be:	2b07      	cmp	r3, #7
 80024c0:	d9ea      	bls.n	8002498 <BSP_AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	4618      	mov	r0, r3
 80024c8:	f005 fd50 	bl	8007f6c <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 80024cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d113      	bne.n	8002500 <BSP_AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80024d8:	2301      	movs	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80024dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024e0:	4a10      	ldr	r2, [pc, #64]	; (8002524 <BSP_AUDIO_OUT_ClockConfig+0xac>)
 80024e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80024e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024ec:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <BSP_AUDIO_OUT_ClockConfig+0xb0>)
 80024ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f2:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4618      	mov	r0, r3
 80024fa:	f005 fc55 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80024fe:	e00b      	b.n	8002518 <BSP_AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002500:	2301      	movs	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8002504:	f44f 7381 	mov.w	r3, #258	; 0x102
 8002508:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800250a:	2303      	movs	r3, #3
 800250c:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800250e:	f107 0314 	add.w	r3, r7, #20
 8002512:	4618      	mov	r0, r3
 8002514:	f005 fc48 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
}
 8002518:	bf00      	nop
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	0800c1e0 	.word	0x0800c1e0
 8002524:	0800c200 	.word	0x0800c200
 8002528:	0800c220 	.word	0x0800c220

0800252c <BSP_AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	; 0x30
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	4b56      	ldr	r3, [pc, #344]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a55      	ldr	r2, [pc, #340]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 8002540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b53      	ldr	r3, [pc, #332]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	69bb      	ldr	r3, [r7, #24]
  
  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	4b4f      	ldr	r3, [pc, #316]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a4e      	ldr	r2, [pc, #312]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b4c      	ldr	r3, [pc, #304]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	4b48      	ldr	r3, [pc, #288]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a47      	ldr	r2, [pc, #284]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b45      	ldr	r3, [pc, #276]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]
  
  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 800258a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800258e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8002598:	2302      	movs	r3, #2
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 800259c:	2306      	movs	r3, #6
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	4619      	mov	r1, r3
 80025a6:	483c      	ldr	r0, [pc, #240]	; (8002698 <BSP_AUDIO_OUT_MspInit+0x16c>)
 80025a8:	f001 f90c 	bl	80037c4 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80025ac:	2310      	movs	r3, #16
 80025ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80025b0:	f107 031c 	add.w	r3, r7, #28
 80025b4:	4619      	mov	r1, r3
 80025b6:	4839      	ldr	r0, [pc, #228]	; (800269c <BSP_AUDIO_OUT_MspInit+0x170>)
 80025b8:	f001 f904 	bl	80037c4 <HAL_GPIO_Init>
  
  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	4b34      	ldr	r3, [pc, #208]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	4a33      	ldr	r2, [pc, #204]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6313      	str	r3, [r2, #48]	; 0x30
 80025cc:	4b31      	ldr	r3, [pc, #196]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	4619      	mov	r1, r3
 80025e2:	482d      	ldr	r0, [pc, #180]	; (8002698 <BSP_AUDIO_OUT_MspInit+0x16c>)
 80025e4:	f001 f8ee 	bl	80037c4 <HAL_GPIO_Init>
  
  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	4b29      	ldr	r3, [pc, #164]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a28      	ldr	r2, [pc, #160]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 80025f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025f6:	6313      	str	r3, [r2, #48]	; 0x30
 80025f8:	4b26      	ldr	r3, [pc, #152]	; (8002694 <BSP_AUDIO_OUT_MspInit+0x168>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a25      	ldr	r2, [pc, #148]	; (80026a0 <BSP_AUDIO_OUT_MspInit+0x174>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d136      	bne.n	800267c <BSP_AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 800260e:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8002610:	2200      	movs	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002614:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8002616:	2240      	movs	r2, #64	; 0x40
 8002618:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 800261c:	2200      	movs	r2, #0
 800261e:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8002620:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8002622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002626:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 800262a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800262e:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8002630:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8002632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002636:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 800263e:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8002640:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002644:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8002648:	2204      	movs	r2, #4
 800264a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 800264e:	2203      	movs	r2, #3
 8002650:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8002654:	2200      	movs	r2, #0
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002658:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 800265a:	2200      	movs	r2, #0
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <BSP_AUDIO_OUT_MspInit+0x17c>)
 8002662:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a0f      	ldr	r2, [pc, #60]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8002668:	639a      	str	r2, [r3, #56]	; 0x38
 800266a:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 8002670:	480c      	ldr	r0, [pc, #48]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8002672:	f000 fd87 	bl	8003184 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 8002676:	480b      	ldr	r0, [pc, #44]	; (80026a4 <BSP_AUDIO_OUT_MspInit+0x178>)
 8002678:	f000 fcd6 	bl	8003028 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800267c:	2200      	movs	r2, #0
 800267e:	210e      	movs	r1, #14
 8002680:	202f      	movs	r0, #47	; 0x2f
 8002682:	f000 fc9a 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ); 
 8002686:	202f      	movs	r0, #47	; 0x2f
 8002688:	f000 fcb3 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 800268c:	bf00      	nop
 800268e:	3730      	adds	r7, #48	; 0x30
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	40020800 	.word	0x40020800
 800269c:	40020000 	.word	0x40020000
 80026a0:	40003c00 	.word	0x40003c00
 80026a4:	20003ce8 	.word	0x20003ce8
 80026a8:	400260b8 	.word	0x400260b8

080026ac <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <I2S3_Init+0x68>)
 80026b6:	4a18      	ldr	r2, [pc, #96]	; (8002718 <I2S3_Init+0x6c>)
 80026b8:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <I2S3_Init+0x68>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	4b14      	ldr	r3, [pc, #80]	; (8002714 <I2S3_Init+0x68>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c8:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80026ca:	4a12      	ldr	r2, [pc, #72]	; (8002714 <I2S3_Init+0x68>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <I2S3_Init+0x68>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <I2S3_Init+0x68>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <I2S3_Init+0x68>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <I2S3_Init+0x68>)
 80026e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026e8:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <I2S3_Init+0x68>)
 80026ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f0:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <I2S3_Init+0x68>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80026f8:	4806      	ldr	r0, [pc, #24]	; (8002714 <I2S3_Init+0x68>)
 80026fa:	f004 f84f 	bl	800679c <HAL_I2S_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8002708:	2300      	movs	r3, #0
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20003bb4 	.word	0x20003bb4
 8002718:	40003c00 	.word	0x40003c00

0800271c <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured for the I2S peripheral.
  * @param  ChnlNbr: Audio frequency to be configured for the I2S peripheral.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  
  /* Configure PLL clock */ 
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8002728:	2200      	movs	r2, #0
 800272a:	68f9      	ldr	r1, [r7, #12]
 800272c:	480e      	ldr	r0, [pc, #56]	; (8002768 <BSP_AUDIO_IN_Init+0x4c>)
 800272e:	f000 f8bf 	bl	80028b0 <BSP_AUDIO_IN_ClockConfig>
  
  /* Configure the PDM library */
  /* On STM32F4-Discovery a single microphone is mounted, samples are duplicated
     to make stereo audio streams */
  PDMDecoder_Init(AudioFreq, ChnlNbr, 2);
 8002732:	2202      	movs	r2, #2
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f99c 	bl	8002a74 <PDMDecoder_Init>

  /* Configure the I2S peripheral */
  hAudioInI2s.Instance = I2S2;
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <BSP_AUDIO_IN_Init+0x4c>)
 800273e:	4a0b      	ldr	r2, [pc, #44]	; (800276c <BSP_AUDIO_IN_Init+0x50>)
 8002740:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET)
 8002742:	4809      	ldr	r0, [pc, #36]	; (8002768 <BSP_AUDIO_IN_Init+0x4c>)
 8002744:	f004 fad8 	bl	8006cf8 <HAL_I2S_GetState>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d103      	bne.n	8002756 <BSP_AUDIO_IN_Init+0x3a>
  { 
    /* Initialize the I2S Msp: this __weak function can be rewritten by the application */
    BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 800274e:	2100      	movs	r1, #0
 8002750:	4805      	ldr	r0, [pc, #20]	; (8002768 <BSP_AUDIO_IN_Init+0x4c>)
 8002752:	f000 f8d9 	bl	8002908 <BSP_AUDIO_IN_MspInit>
  }
  
  /* Configure the I2S2 */
  I2S2_Init(AudioFreq);
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fa28 	bl	8002bac <I2S2_Init>
  
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20003bfc 	.word	0x20003bfc
 800276c:	40003800 	.word	0x40003800

08002770 <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4805      	ldr	r0, [pc, #20]	; (800279c <BSP_AUDIO_IN_Record+0x2c>)
 8002788:	f004 f9fa 	bl	8006b80 <HAL_I2S_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	b2db      	uxtb	r3, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20003bfc 	.word	0x20003bfc

080027a0 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf: Pointer to data PDM buffer
  * @param  PCMBuf: Pointer to data PCM buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b0a4      	sub	sp, #144	; 0x90
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint16_t AppPDM[INTERNAL_BUFF_SIZE/2];
  uint32_t index = 0; 
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  
  /* PDM Demux */
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80027b6:	e01f      	b.n	80027f8 <BSP_AUDIO_IN_PDMToPCM+0x58>
  {
    AppPDM[index] = HTONS(PDMBuf[index]);
 80027b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b21a      	sxth	r2, r3
 80027ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	440b      	add	r3, r1
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	b21b      	sxth	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	b21b      	sxth	r3, r3
 80027de:	b29a      	uxth	r2, r3
 80027e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	3390      	adds	r3, #144	; 0x90
 80027e8:	443b      	add	r3, r7
 80027ea:	f823 2c84 	strh.w	r2, [r3, #-132]
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 80027ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027f2:	3301      	adds	r3, #1
 80027f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80027f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027fc:	2b3f      	cmp	r3, #63	; 0x3f
 80027fe:	d9db      	bls.n	80027b8 <BSP_AUDIO_IN_PDMToPCM+0x18>
  }
  
  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002806:	e019      	b.n	800283c <BSP_AUDIO_IN_PDMToPCM+0x9c>
  {
    /* PDM to PCM filter */
	PDM_Filter((uint8_t*)&AppPDM[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 8002808:	f107 020c 	add.w	r2, r7, #12
 800280c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	18d0      	adds	r0, r2, r3
 8002814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	18d1      	adds	r1, r2, r3
 800281e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002822:	224c      	movs	r2, #76	; 0x4c
 8002824:	fb02 f303 	mul.w	r3, r2, r3
 8002828:	4a16      	ldr	r2, [pc, #88]	; (8002884 <BSP_AUDIO_IN_PDMToPCM+0xe4>)
 800282a:	4413      	add	r3, r2
 800282c:	461a      	mov	r2, r3
 800282e:	f009 f887 	bl	800b940 <PDM_Filter>
  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
 8002832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002836:	3301      	adds	r3, #1
 8002838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800283c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0e1      	beq.n	8002808 <BSP_AUDIO_IN_PDMToPCM+0x68>
  }
  /* Duplicate samples since a single microphone in mounted on STM32F4-Discovery */
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800284a:	e011      	b.n	8002870 <BSP_AUDIO_IN_PDMToPCM+0xd0>
  {
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 800284c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	441a      	add	r2, r3
 8002856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	3302      	adds	r3, #2
 800285e:	6839      	ldr	r1, [r7, #0]
 8002860:	440b      	add	r3, r1
 8002862:	8812      	ldrh	r2, [r2, #0]
 8002864:	801a      	strh	r2, [r3, #0]
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8002866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800286a:	3301      	adds	r3, #1
 800286c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002874:	2b0f      	cmp	r3, #15
 8002876:	d9e9      	bls.n	800284c <BSP_AUDIO_IN_PDMToPCM+0xac>
  }
  
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK; 
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3790      	adds	r7, #144	; 0x90
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20003c44 	.word	0x20003c44

08002888 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002890:	f7fe f9be 	bl	8000c10 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_I2S_RxHalfCpltCallback>:
/**
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80028a4:	f7fe f9fc 	bl	8000ca0 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <BSP_AUDIO_IN_ClockConfig>:
  * @param  Params : pointer on additional configuration parameters, can be NULL.   
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;

  /*Enable PLLI2S clock*/
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	4618      	mov	r0, r3
 80028c2:	f005 fb53 	bl	8007f6c <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((AudioFreq & 0x7) == 0)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10b      	bne.n	80028e8 <BSP_AUDIO_IN_ClockConfig+0x38>
  {
    /* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80028d0:	2301      	movs	r3, #1
 80028d2:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SN = 192;
 80028d4:	23c0      	movs	r3, #192	; 0xc0
 80028d6:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = 6;
 80028d8:	2306      	movs	r3, #6
 80028da:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80028dc:	f107 0310 	add.w	r3, r7, #16
 80028e0:	4618      	mov	r0, r3
 80028e2:	f005 fa61 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 290;
    rccclkinit.PLLI2S.PLLI2SR = 2;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80028e6:	e00b      	b.n	8002900 <BSP_AUDIO_IN_ClockConfig+0x50>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80028e8:	2301      	movs	r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SN = 290;
 80028ec:	f44f 7391 	mov.w	r3, #290	; 0x122
 80028f0:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = 2;
 80028f2:	2302      	movs	r3, #2
 80028f4:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80028f6:	f107 0310 	add.w	r3, r7, #16
 80028fa:	4618      	mov	r0, r3
 80028fc:	f005 fa54 	bl	8007da8 <HAL_RCCEx_PeriphCLKConfig>
}
 8002900:	bf00      	nop
 8002902:	3720      	adds	r7, #32
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <BSP_AUDIO_IN_MspInit>:
  * @brief  BSP AUDIO IN MSP Init.
  * @param  hi2s: I2S handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sRx;
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the I2S2 peripheral clock */
  I2S2_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	4b4d      	ldr	r3, [pc, #308]	; (8002a4c <BSP_AUDIO_IN_MspInit+0x144>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a4c      	ldr	r2, [pc, #304]	; (8002a4c <BSP_AUDIO_IN_MspInit+0x144>)
 800291c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <BSP_AUDIO_IN_MspInit+0x144>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	69bb      	ldr	r3, [r7, #24]

  /* Enable I2S GPIO clocks */
  I2S2_SCK_GPIO_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	4b46      	ldr	r3, [pc, #280]	; (8002a4c <BSP_AUDIO_IN_MspInit+0x144>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a45      	ldr	r2, [pc, #276]	; (8002a4c <BSP_AUDIO_IN_MspInit+0x144>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <BSP_AUDIO_IN_MspInit+0x144>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697b      	ldr	r3, [r7, #20]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	4b3f      	ldr	r3, [pc, #252]	; (8002a4c <BSP_AUDIO_IN_MspInit+0x144>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a3e      	ldr	r2, [pc, #248]	; (8002a4c <BSP_AUDIO_IN_MspInit+0x144>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <BSP_AUDIO_IN_MspInit+0x144>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]
  
  /* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800296e:	2302      	movs	r3, #2
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28

  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 8002972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8002978:	2305      	movs	r3, #5
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	4619      	mov	r1, r3
 8002982:	4833      	ldr	r0, [pc, #204]	; (8002a50 <BSP_AUDIO_IN_MspInit+0x148>)
 8002984:	f000 ff1e 	bl	80037c4 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 8002988:	2308      	movs	r3, #8
 800298a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
 800298c:	2305      	movs	r3, #5
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8002990:	f107 031c 	add.w	r3, r7, #28
 8002994:	4619      	mov	r1, r3
 8002996:	482f      	ldr	r0, [pc, #188]	; (8002a54 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002998:	f000 ff14 	bl	80037c4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  I2S2_DMAx_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <BSP_AUDIO_IN_MspInit+0x144>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <BSP_AUDIO_IN_MspInit+0x144>)
 80029a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029aa:	6313      	str	r3, [r2, #48]	; 0x30
 80029ac:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <BSP_AUDIO_IN_MspInit+0x144>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
    
  if(hi2s->Instance == I2S2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <BSP_AUDIO_IN_MspInit+0x150>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d137      	bne.n	8002a32 <BSP_AUDIO_IN_MspInit+0x12a>
  {
    /* Configure the hdma_i2sRx handle parameters */   
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 80029c2:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	605a      	str	r2, [r3, #4]
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80029c8:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80029ce:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	60da      	str	r2, [r3, #12]
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 80029d4:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 80029d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029da:	611a      	str	r2, [r3, #16]
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
 80029dc:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 80029de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029e2:	615a      	str	r2, [r3, #20]
    hdma_i2sRx.Init.MemDataAlignment    = I2S2_DMAx_MEM_DATA_SIZE;
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 80029e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029ea:	619a      	str	r2, [r3, #24]
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 80029ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f2:	61da      	str	r2, [r3, #28]
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 80029f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029fa:	621a      	str	r2, [r3, #32]
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002a02:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 8002a04:	2203      	movs	r2, #3
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
 8002a0e:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <BSP_AUDIO_IN_MspInit+0x158>)
 8002a18:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a0f      	ldr	r2, [pc, #60]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 8002a1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a20:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sRx);
 8002a26:	480d      	ldr	r0, [pc, #52]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 8002a28:	f000 fbac 	bl	8003184 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sRx);      
 8002a2c:	480b      	ldr	r0, [pc, #44]	; (8002a5c <BSP_AUDIO_IN_MspInit+0x154>)
 8002a2e:	f000 fafb 	bl	8003028 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	210f      	movs	r1, #15
 8002a36:	200e      	movs	r0, #14
 8002a38:	f000 fabf 	bl	8002fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ); 
 8002a3c:	200e      	movs	r0, #14
 8002a3e:	f000 fad8 	bl	8002ff2 <HAL_NVIC_EnableIRQ>
}
 8002a42:	bf00      	nop
 8002a44:	3730      	adds	r7, #48	; 0x30
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020400 	.word	0x40020400
 8002a54:	40020800 	.word	0x40020800
 8002a58:	40003800 	.word	0x40003800
 8002a5c:	20003d48 	.word	0x20003d48
 8002a60:	40026058 	.word	0x40026058

08002a64 <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <PDMDecoder_Init>:
  * @param  ChnlNbrIn: Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut: Number of desired output audio channels in the  resulting PCM buffer
  *         Number of audio channels (1: mono; 2: stereo)
  */
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  /* Enable CRC peripheral to unlock the PDM library */
  __HAL_RCC_CRC_CLK_ENABLE();
 8002a84:	2300      	movs	r3, #0
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <PDMDecoder_Init+0x124>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	4a42      	ldr	r2, [pc, #264]	; (8002b98 <PDMDecoder_Init+0x124>)
 8002a8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a92:	6313      	str	r3, [r2, #48]	; 0x30
 8002a94:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <PDMDecoder_Init+0x124>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	693b      	ldr	r3, [r7, #16]

  for(index = 0; index < ChnlNbrIn; index++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e06e      	b.n	8002b84 <PDMDecoder_Init+0x110>
  {
    /* Init PDM filters */
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8002aa6:	4a3d      	ldr	r2, [pc, #244]	; (8002b9c <PDMDecoder_Init+0x128>)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	214c      	movs	r1, #76	; 0x4c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8002ab6:	4a39      	ldr	r2, [pc, #228]	; (8002b9c <PDMDecoder_Init+0x128>)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	214c      	movs	r1, #76	; 0x4c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8002ac8:	4a34      	ldr	r2, [pc, #208]	; (8002b9c <PDMDecoder_Init+0x128>)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	214c      	movs	r1, #76	; 0x4c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	4a32      	ldr	r2, [pc, #200]	; (8002ba0 <PDMDecoder_Init+0x12c>)
 8002ad8:	601a      	str	r2, [r3, #0]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	b298      	uxth	r0, r3
 8002ade:	4a2f      	ldr	r2, [pc, #188]	; (8002b9c <PDMDecoder_Init+0x128>)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	214c      	movs	r1, #76	; 0x4c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	330a      	adds	r3, #10
 8002aec:	4602      	mov	r2, r0
 8002aee:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	b298      	uxth	r0, r3
 8002af4:	4a29      	ldr	r2, [pc, #164]	; (8002b9c <PDMDecoder_Init+0x128>)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	214c      	movs	r1, #76	; 0x4c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3308      	adds	r3, #8
 8002b02:	4602      	mov	r2, r0
 8002b04:	801a      	strh	r2, [r3, #0]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	224c      	movs	r2, #76	; 0x4c
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	4a23      	ldr	r2, [pc, #140]	; (8002b9c <PDMDecoder_Init+0x128>)
 8002b10:	4413      	add	r3, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f008 fd3e 	bl	800b594 <PDM_Filter_Init>

    /* PDM lib config phase */
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <PDMDecoder_Init+0x130>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	b298      	uxth	r0, r3
 8002b24:	4920      	ldr	r1, [pc, #128]	; (8002ba8 <PDMDecoder_Init+0x134>)
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	440b      	add	r3, r1
 8002b32:	3302      	adds	r3, #2
 8002b34:	4602      	mov	r2, r0
 8002b36:	801a      	strh	r2, [r3, #0]
    PDM_FilterConfig[index].mic_gain = 24;
 8002b38:	491b      	ldr	r1, [pc, #108]	; (8002ba8 <PDMDecoder_Init+0x134>)
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	440b      	add	r3, r1
 8002b46:	3304      	adds	r3, #4
 8002b48:	2218      	movs	r2, #24
 8002b4a:	801a      	strh	r2, [r3, #0]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8002b4c:	4916      	ldr	r1, [pc, #88]	; (8002ba8 <PDMDecoder_Init+0x134>)
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	440b      	add	r3, r1
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	801a      	strh	r2, [r3, #0]
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	224c      	movs	r2, #76	; 0x4c
 8002b62:	fb02 f303 	mul.w	r3, r2, r3
 8002b66:	4a0d      	ldr	r2, [pc, #52]	; (8002b9c <PDMDecoder_Init+0x128>)
 8002b68:	1898      	adds	r0, r3, r2
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4a0c      	ldr	r2, [pc, #48]	; (8002ba8 <PDMDecoder_Init+0x134>)
 8002b76:	4413      	add	r3, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f008 fddb 	bl	800b734 <PDM_Filter_setConfig>
  for(index = 0; index < ChnlNbrIn; index++)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3301      	adds	r3, #1
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d38c      	bcc.n	8002aa6 <PDMDecoder_Init+0x32>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	20003c44 	.word	0x20003c44
 8002ba0:	7e809d48 	.word	0x7e809d48
 8002ba4:	10624dd3 	.word	0x10624dd3
 8002ba8:	20003cdc 	.word	0x20003cdc

08002bac <I2S2_Init>:
  *         Devices RevA/Z and through dedicated PLLI2S_R in Devices RevB/Y)
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S2_Init(uint32_t AudioFreq)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioInI2s Instance parameter */
  hAudioInI2s.Instance          = I2S2;
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <I2S2_Init+0x68>)
 8002bb6:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <I2S2_Init+0x6c>)
 8002bb8:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioInI2s);
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <I2S2_Init+0x68>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <I2S2_Init+0x68>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc8:	61da      	str	r2, [r3, #28]
  
  /* I2S2 peripheral configuration */
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <I2S2_Init+0x68>)
 8002bd0:	6153      	str	r3, [r2, #20]
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <I2S2_Init+0x68>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	61da      	str	r2, [r3, #28]
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <I2S2_Init+0x68>)
 8002bda:	2208      	movs	r2, #8
 8002bdc:	619a      	str	r2, [r3, #24]
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <I2S2_Init+0x68>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	60da      	str	r2, [r3, #12]
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <I2S2_Init+0x68>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <I2S2_Init+0x68>)
 8002bec:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002bf0:	605a      	str	r2, [r3, #4]
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <I2S2_Init+0x68>)
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8002bf8:	4806      	ldr	r0, [pc, #24]	; (8002c14 <I2S2_Init+0x68>)
 8002bfa:	f003 fdcf 	bl	800679c <HAL_I2S_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <I2S2_Init+0x5c>
  {
    return AUDIO_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <I2S2_Init+0x5e>
  }
  else
  {
    return AUDIO_OK; 
 8002c08:	2300      	movs	r3, #0
  }
}  
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20003bfc 	.word	0x20003bfc
 8002c18:	40003800 	.word	0x40003800

08002c1c <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <HAL_I2S_ErrorCallback+0x2c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8002c2e:	f7fd ff5c 	bl	8000aea <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <HAL_I2S_ErrorCallback+0x30>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d101      	bne.n	8002c40 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8002c3c:	f7ff ff12 	bl	8002a64 <BSP_AUDIO_IN_Error_Callback>
  }
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40003c00 	.word	0x40003c00
 8002c4c:	40003800 	.word	0x40003800

08002c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <SystemInit+0x60>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	4a15      	ldr	r2, [pc, #84]	; (8002cb0 <SystemInit+0x60>)
 8002c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002c64:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <SystemInit+0x64>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <SystemInit+0x64>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <SystemInit+0x64>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c76:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <SystemInit+0x64>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <SystemInit+0x64>)
 8002c7c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <SystemInit+0x64>)
 8002c88:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <SystemInit+0x68>)
 8002c8a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <SystemInit+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <SystemInit+0x64>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <SystemInit+0x64>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c9e:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <SystemInit+0x60>)
 8002ca0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ca4:	609a      	str	r2, [r3, #8]
#endif
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	24003010 	.word	0x24003010

08002cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_Init+0x34>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <HAL_Init+0x34>)
 8002cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_Init+0x34>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <HAL_Init+0x34>)
 8002cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cd6:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd8:	2003      	movs	r0, #3
 8002cda:	f000 f963 	bl	8002fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cde:	200f      	movs	r0, #15
 8002ce0:	f000 f810 	bl	8002d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce4:	f000 f806 	bl	8002cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023c00 	.word	0x40023c00

08002cf4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_InitTick+0x54>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_InitTick+0x58>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	4619      	mov	r1, r3
 8002d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f973 	bl	800300e <HAL_SYSTICK_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00e      	b.n	8002d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b0f      	cmp	r3, #15
 8002d36:	d80a      	bhi.n	8002d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	f000 f93b 	bl	8002fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d44:	4a06      	ldr	r2, [pc, #24]	; (8002d60 <HAL_InitTick+0x5c>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e000      	b.n	8002d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	200000c4 	.word	0x200000c4
 8002d5c:	200000cc 	.word	0x200000cc
 8002d60:	200000c8 	.word	0x200000c8

08002d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_IncTick+0x20>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_IncTick+0x24>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4413      	add	r3, r2
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <HAL_IncTick+0x24>)
 8002d76:	6013      	str	r3, [r2, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	200000cc 	.word	0x200000cc
 8002d88:	20003da8 	.word	0x20003da8

08002d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_GetTick+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20003da8 	.word	0x20003da8

08002da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dac:	f7ff ffee 	bl	8002d8c <HAL_GetTick>
 8002db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d005      	beq.n	8002dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_Delay+0x44>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dca:	bf00      	nop
 8002dcc:	f7ff ffde 	bl	8002d8c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d8f7      	bhi.n	8002dcc <HAL_Delay+0x28>
  {
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200000cc 	.word	0x200000cc

08002dec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_GetREVID+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	0c1b      	lsrs	r3, r3, #16
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e0042000 	.word	0xe0042000

08002e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <__NVIC_SetPriorityGrouping+0x44>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e20:	4013      	ands	r3, r2
 8002e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e36:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <__NVIC_SetPriorityGrouping+0x44>)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	60d3      	str	r3, [r2, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e50:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <__NVIC_GetPriorityGrouping+0x18>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	f003 0307 	and.w	r3, r3, #7
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	db0b      	blt.n	8002e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	f003 021f 	and.w	r2, r3, #31
 8002e80:	4907      	ldr	r1, [pc, #28]	; (8002ea0 <__NVIC_EnableIRQ+0x38>)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	2001      	movs	r0, #1
 8002e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000e100 	.word	0xe000e100

08002ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	6039      	str	r1, [r7, #0]
 8002eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	db0a      	blt.n	8002ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	490c      	ldr	r1, [pc, #48]	; (8002ef0 <__NVIC_SetPriority+0x4c>)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ecc:	e00a      	b.n	8002ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4908      	ldr	r1, [pc, #32]	; (8002ef4 <__NVIC_SetPriority+0x50>)
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	3b04      	subs	r3, #4
 8002edc:	0112      	lsls	r2, r2, #4
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	761a      	strb	r2, [r3, #24]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000e100 	.word	0xe000e100
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b089      	sub	sp, #36	; 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f1c3 0307 	rsb	r3, r3, #7
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	bf28      	it	cs
 8002f16:	2304      	movcs	r3, #4
 8002f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d902      	bls.n	8002f28 <NVIC_EncodePriority+0x30>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3b03      	subs	r3, #3
 8002f26:	e000      	b.n	8002f2a <NVIC_EncodePriority+0x32>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f40:	f04f 31ff 	mov.w	r1, #4294967295
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	43d9      	mvns	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	4313      	orrs	r3, r2
         );
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3724      	adds	r7, #36	; 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f70:	d301      	bcc.n	8002f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00f      	b.n	8002f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <SysTick_Config+0x40>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f7e:	210f      	movs	r1, #15
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	f7ff ff8e 	bl	8002ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <SysTick_Config+0x40>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8e:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <SysTick_Config+0x40>)
 8002f90:	2207      	movs	r2, #7
 8002f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	e000e010 	.word	0xe000e010

08002fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff29 	bl	8002e04 <__NVIC_SetPriorityGrouping>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fcc:	f7ff ff3e 	bl	8002e4c <__NVIC_GetPriorityGrouping>
 8002fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	6978      	ldr	r0, [r7, #20]
 8002fd8:	f7ff ff8e 	bl	8002ef8 <NVIC_EncodePriority>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff5d 	bl	8002ea4 <__NVIC_SetPriority>
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff31 	bl	8002e68 <__NVIC_EnableIRQ>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ffa2 	bl	8002f60 <SysTick_Config>
 800301c:	4603      	mov	r3, r0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003034:	f7ff feaa 	bl	8002d8c <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e099      	b.n	8003178 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003064:	e00f      	b.n	8003086 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003066:	f7ff fe91 	bl	8002d8c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b05      	cmp	r3, #5
 8003072:	d908      	bls.n	8003086 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2203      	movs	r2, #3
 800307e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e078      	b.n	8003178 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e8      	bne.n	8003066 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4b38      	ldr	r3, [pc, #224]	; (8003180 <HAL_DMA_Init+0x158>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d107      	bne.n	80030f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	4313      	orrs	r3, r2
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0307 	bic.w	r3, r3, #7
 8003106:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2b04      	cmp	r3, #4
 8003118:	d117      	bne.n	800314a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00e      	beq.n	800314a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 facd 	bl	80036cc <DMA_CheckFifoParam>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2240      	movs	r2, #64	; 0x40
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003146:	2301      	movs	r3, #1
 8003148:	e016      	b.n	8003178 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fa84 	bl	8003660 <DMA_CalcBaseAndBitshift>
 8003158:	4603      	mov	r3, r0
 800315a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	223f      	movs	r2, #63	; 0x3f
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	f010803f 	.word	0xf010803f

08003184 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e050      	b.n	8003238 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d101      	bne.n	80031a6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80031a2:	2302      	movs	r3, #2
 80031a4:	e048      	b.n	8003238 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0201 	bic.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2221      	movs	r2, #33	; 0x21
 80031e4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa3a 	bl	8003660 <DMA_CalcBaseAndBitshift>
 80031ec:	4603      	mov	r3, r0
 80031ee:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003218:	223f      	movs	r2, #63	; 0x3f
 800321a:	409a      	lsls	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_DMA_Start_IT+0x26>
 8003262:	2302      	movs	r3, #2
 8003264:	e040      	b.n	80032e8 <HAL_DMA_Start_IT+0xa8>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d12f      	bne.n	80032da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2202      	movs	r2, #2
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f9b8 	bl	8003604 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	223f      	movs	r2, #63	; 0x3f
 800329a:	409a      	lsls	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0216 	orr.w	r2, r2, #22
 80032ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0208 	orr.w	r2, r2, #8
 80032c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	e005      	b.n	80032e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
 80032e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032fc:	4b8e      	ldr	r3, [pc, #568]	; (8003538 <HAL_DMA_IRQHandler+0x248>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a8e      	ldr	r2, [pc, #568]	; (800353c <HAL_DMA_IRQHandler+0x24c>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0a9b      	lsrs	r3, r3, #10
 8003308:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331a:	2208      	movs	r2, #8
 800331c:	409a      	lsls	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d01a      	beq.n	800335c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d013      	beq.n	800335c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0204 	bic.w	r2, r2, #4
 8003342:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003348:	2208      	movs	r2, #8
 800334a:	409a      	lsls	r2, r3
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	2201      	movs	r2, #1
 8003362:	409a      	lsls	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d012      	beq.n	8003392 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337e:	2201      	movs	r2, #1
 8003380:	409a      	lsls	r2, r3
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	f043 0202 	orr.w	r2, r3, #2
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	2204      	movs	r2, #4
 8003398:	409a      	lsls	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d012      	beq.n	80033c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00b      	beq.n	80033c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	2204      	movs	r2, #4
 80033b6:	409a      	lsls	r2, r3
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c0:	f043 0204 	orr.w	r2, r3, #4
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	2210      	movs	r2, #16
 80033ce:	409a      	lsls	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d043      	beq.n	8003460 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d03c      	beq.n	8003460 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	2210      	movs	r2, #16
 80033ec:	409a      	lsls	r2, r3
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d018      	beq.n	8003432 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d108      	bne.n	8003420 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d024      	beq.n	8003460 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4798      	blx	r3
 800341e:	e01f      	b.n	8003460 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01b      	beq.n	8003460 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
 8003430:	e016      	b.n	8003460 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0208 	bic.w	r2, r2, #8
 800344e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	2220      	movs	r2, #32
 8003466:	409a      	lsls	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 808f 	beq.w	8003590 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8087 	beq.w	8003590 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	2220      	movs	r2, #32
 8003488:	409a      	lsls	r2, r3
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b05      	cmp	r3, #5
 8003498:	d136      	bne.n	8003508 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0216 	bic.w	r2, r2, #22
 80034a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <HAL_DMA_IRQHandler+0x1da>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0208 	bic.w	r2, r2, #8
 80034d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	223f      	movs	r2, #63	; 0x3f
 80034e0:	409a      	lsls	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d07e      	beq.n	80035fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
        }
        return;
 8003506:	e079      	b.n	80035fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d01d      	beq.n	8003552 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10d      	bne.n	8003540 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	2b00      	cmp	r3, #0
 800352a:	d031      	beq.n	8003590 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
 8003534:	e02c      	b.n	8003590 <HAL_DMA_IRQHandler+0x2a0>
 8003536:	bf00      	nop
 8003538:	200000c4 	.word	0x200000c4
 800353c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d023      	beq.n	8003590 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
 8003550:	e01e      	b.n	8003590 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10f      	bne.n	8003580 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0210 	bic.w	r2, r2, #16
 800356e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	2b00      	cmp	r3, #0
 8003596:	d032      	beq.n	80035fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d022      	beq.n	80035ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2205      	movs	r2, #5
 80035a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	3301      	adds	r3, #1
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d307      	bcc.n	80035d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f2      	bne.n	80035bc <HAL_DMA_IRQHandler+0x2cc>
 80035d6:	e000      	b.n	80035da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	4798      	blx	r3
 80035fa:	e000      	b.n	80035fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80035fc:	bf00      	nop
    }
  }
}
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003620:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d108      	bne.n	8003644 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003642:	e007      	b.n	8003654 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	3b10      	subs	r3, #16
 8003670:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800367a:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <DMA_CalcBaseAndBitshift+0x68>)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4413      	add	r3, r2
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d909      	bls.n	80036a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003696:	f023 0303 	bic.w	r3, r3, #3
 800369a:	1d1a      	adds	r2, r3, #4
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	659a      	str	r2, [r3, #88]	; 0x58
 80036a0:	e007      	b.n	80036b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	aaaaaaab 	.word	0xaaaaaaab
 80036c8:	0800c258 	.word	0x0800c258

080036cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d11f      	bne.n	8003726 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d856      	bhi.n	800379a <DMA_CheckFifoParam+0xce>
 80036ec:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <DMA_CheckFifoParam+0x28>)
 80036ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f2:	bf00      	nop
 80036f4:	08003705 	.word	0x08003705
 80036f8:	08003717 	.word	0x08003717
 80036fc:	08003705 	.word	0x08003705
 8003700:	0800379b 	.word	0x0800379b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d046      	beq.n	800379e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003714:	e043      	b.n	800379e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800371e:	d140      	bne.n	80037a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003724:	e03d      	b.n	80037a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372e:	d121      	bne.n	8003774 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b03      	cmp	r3, #3
 8003734:	d837      	bhi.n	80037a6 <DMA_CheckFifoParam+0xda>
 8003736:	a201      	add	r2, pc, #4	; (adr r2, 800373c <DMA_CheckFifoParam+0x70>)
 8003738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373c:	0800374d 	.word	0x0800374d
 8003740:	08003753 	.word	0x08003753
 8003744:	0800374d 	.word	0x0800374d
 8003748:	08003765 	.word	0x08003765
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      break;
 8003750:	e030      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d025      	beq.n	80037aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003762:	e022      	b.n	80037aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800376c:	d11f      	bne.n	80037ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003772:	e01c      	b.n	80037ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d903      	bls.n	8003782 <DMA_CheckFifoParam+0xb6>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d003      	beq.n	8003788 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003780:	e018      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
      break;
 8003786:	e015      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00e      	beq.n	80037b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
      break;
 8003798:	e00b      	b.n	80037b2 <DMA_CheckFifoParam+0xe6>
      break;
 800379a:	bf00      	nop
 800379c:	e00a      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 800379e:	bf00      	nop
 80037a0:	e008      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 80037a2:	bf00      	nop
 80037a4:	e006      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 80037a6:	bf00      	nop
 80037a8:	e004      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 80037aa:	bf00      	nop
 80037ac:	e002      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 80037b2:	bf00      	nop
    }
  } 
  
  return status; 
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop

080037c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	; 0x24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	e16b      	b.n	8003ab8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037e0:	2201      	movs	r2, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	f040 815a 	bne.w	8003ab2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d005      	beq.n	8003816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003812:	2b02      	cmp	r3, #2
 8003814:	d130      	bne.n	8003878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	2203      	movs	r2, #3
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800384c:	2201      	movs	r2, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 0201 	and.w	r2, r3, #1
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b03      	cmp	r3, #3
 8003882:	d017      	beq.n	80038b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d123      	bne.n	8003908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	08da      	lsrs	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3208      	adds	r2, #8
 80038c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	220f      	movs	r2, #15
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	08da      	lsrs	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3208      	adds	r2, #8
 8003902:	69b9      	ldr	r1, [r7, #24]
 8003904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	2203      	movs	r2, #3
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0203 	and.w	r2, r3, #3
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80b4 	beq.w	8003ab2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b60      	ldr	r3, [pc, #384]	; (8003ad0 <HAL_GPIO_Init+0x30c>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	4a5f      	ldr	r2, [pc, #380]	; (8003ad0 <HAL_GPIO_Init+0x30c>)
 8003954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003958:	6453      	str	r3, [r2, #68]	; 0x44
 800395a:	4b5d      	ldr	r3, [pc, #372]	; (8003ad0 <HAL_GPIO_Init+0x30c>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003966:	4a5b      	ldr	r2, [pc, #364]	; (8003ad4 <HAL_GPIO_Init+0x310>)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	3302      	adds	r3, #2
 800396e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	220f      	movs	r2, #15
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a52      	ldr	r2, [pc, #328]	; (8003ad8 <HAL_GPIO_Init+0x314>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d02b      	beq.n	80039ea <HAL_GPIO_Init+0x226>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a51      	ldr	r2, [pc, #324]	; (8003adc <HAL_GPIO_Init+0x318>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d025      	beq.n	80039e6 <HAL_GPIO_Init+0x222>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a50      	ldr	r2, [pc, #320]	; (8003ae0 <HAL_GPIO_Init+0x31c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01f      	beq.n	80039e2 <HAL_GPIO_Init+0x21e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a4f      	ldr	r2, [pc, #316]	; (8003ae4 <HAL_GPIO_Init+0x320>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d019      	beq.n	80039de <HAL_GPIO_Init+0x21a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a4e      	ldr	r2, [pc, #312]	; (8003ae8 <HAL_GPIO_Init+0x324>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <HAL_GPIO_Init+0x216>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a4d      	ldr	r2, [pc, #308]	; (8003aec <HAL_GPIO_Init+0x328>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00d      	beq.n	80039d6 <HAL_GPIO_Init+0x212>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a4c      	ldr	r2, [pc, #304]	; (8003af0 <HAL_GPIO_Init+0x32c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <HAL_GPIO_Init+0x20e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a4b      	ldr	r2, [pc, #300]	; (8003af4 <HAL_GPIO_Init+0x330>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_GPIO_Init+0x20a>
 80039ca:	2307      	movs	r3, #7
 80039cc:	e00e      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039ce:	2308      	movs	r3, #8
 80039d0:	e00c      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039d2:	2306      	movs	r3, #6
 80039d4:	e00a      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039d6:	2305      	movs	r3, #5
 80039d8:	e008      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039da:	2304      	movs	r3, #4
 80039dc:	e006      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039de:	2303      	movs	r3, #3
 80039e0:	e004      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e002      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039ea:	2300      	movs	r3, #0
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f002 0203 	and.w	r2, r2, #3
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	4093      	lsls	r3, r2
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039fc:	4935      	ldr	r1, [pc, #212]	; (8003ad4 <HAL_GPIO_Init+0x310>)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	3302      	adds	r3, #2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0a:	4b3b      	ldr	r3, [pc, #236]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a2e:	4a32      	ldr	r2, [pc, #200]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a34:	4b30      	ldr	r3, [pc, #192]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a58:	4a27      	ldr	r2, [pc, #156]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a5e:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a82:	4a1d      	ldr	r2, [pc, #116]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a88:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aac:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	f67f ae90 	bls.w	80037e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3724      	adds	r7, #36	; 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40013800 	.word	0x40013800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	40020800 	.word	0x40020800
 8003ae4:	40020c00 	.word	0x40020c00
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40021400 	.word	0x40021400
 8003af0:	40021800 	.word	0x40021800
 8003af4:	40021c00 	.word	0x40021c00
 8003af8:	40013c00 	.word	0x40013c00

08003afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	807b      	strh	r3, [r7, #2]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b0c:	787b      	ldrb	r3, [r7, #1]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b12:	887a      	ldrh	r2, [r7, #2]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b18:	e003      	b.n	8003b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b1a:	887b      	ldrh	r3, [r7, #2]
 8003b1c:	041a      	lsls	r2, r3, #16
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	619a      	str	r2, [r3, #24]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b085      	sub	sp, #20
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b40:	887a      	ldrh	r2, [r7, #2]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4013      	ands	r3, r2
 8003b46:	041a      	lsls	r2, r3, #16
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	43d9      	mvns	r1, r3
 8003b4c:	887b      	ldrh	r3, [r7, #2]
 8003b4e:	400b      	ands	r3, r1
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	619a      	str	r2, [r3, #24]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d006      	beq.n	8003b88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b7a:	4a05      	ldr	r2, [pc, #20]	; (8003b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc fe7e 	bl	8000884 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40013c00 	.word	0x40013c00

08003b94 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f005 fd33 	bl	8009616 <USB_GetMode>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	f040 80fb 	bne.w	8003dae <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f005 fcf6 	bl	80095ae <USB_ReadInterrupts>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80f1 	beq.w	8003dac <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f005 fced 	bl	80095ae <USB_ReadInterrupts>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bde:	d104      	bne.n	8003bea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003be8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f005 fcdd 	bl	80095ae <USB_ReadInterrupts>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bfe:	d104      	bne.n	8003c0a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f005 fccd 	bl	80095ae <USB_ReadInterrupts>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c1e:	d104      	bne.n	8003c2a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f005 fcbd 	bl	80095ae <USB_ReadInterrupts>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d103      	bne.n	8003c46 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2202      	movs	r2, #2
 8003c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f005 fcaf 	bl	80095ae <USB_ReadInterrupts>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c5a:	d120      	bne.n	8003c9e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003c64:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d113      	bne.n	8003c9e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003c76:	2110      	movs	r1, #16
 8003c78:	6938      	ldr	r0, [r7, #16]
 8003c7a:	f005 fbe0 	bl	800943e <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003c7e:	6938      	ldr	r0, [r7, #16]
 8003c80:	f005 fc0f 	bl	80094a2 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	7a5b      	ldrb	r3, [r3, #9]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d105      	bne.n	8003c98 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2101      	movs	r1, #1
 8003c92:	4618      	mov	r0, r3
 8003c94:	f005 fccd 	bl	8009632 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7fc fed1 	bl	8000a40 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f005 fc83 	bl	80095ae <USB_ReadInterrupts>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cb2:	d102      	bne.n	8003cba <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f001 fc87 	bl	80055c8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f005 fc75 	bl	80095ae <USB_ReadInterrupts>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d106      	bne.n	8003cdc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fc fe9a 	bl	8000a08 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2208      	movs	r2, #8
 8003cda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f005 fc64 	bl	80095ae <USB_ReadInterrupts>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cf0:	d139      	bne.n	8003d66 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f005 fcd8 	bl	80096ac <USB_HC_ReadInterrupt>
 8003cfc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	e025      	b.n	8003d50 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d018      	beq.n	8003d4a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2e:	d106      	bne.n	8003d3e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f859 	bl	8003dee <HCD_HC_IN_IRQHandler>
 8003d3c:	e005      	b.n	8003d4a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	4619      	mov	r1, r3
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 febb 	bl	8004ac0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	795b      	ldrb	r3, [r3, #5]
 8003d54:	461a      	mov	r2, r3
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d3d3      	bcc.n	8003d04 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f005 fc1f 	bl	80095ae <USB_ReadInterrupts>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b10      	cmp	r3, #16
 8003d78:	d101      	bne.n	8003d7e <HAL_HCD_IRQHandler+0x1ea>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_HCD_IRQHandler+0x1ec>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d014      	beq.n	8003dae <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0210 	bic.w	r2, r2, #16
 8003d92:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f001 fb38 	bl	800540a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699a      	ldr	r2, [r3, #24]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0210 	orr.w	r2, r2, #16
 8003da8:	619a      	str	r2, [r3, #24]
 8003daa:	e000      	b.n	8003dae <HAL_HCD_IRQHandler+0x21a>
      return;
 8003dac:	bf00      	nop
    }
  }
}
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_HCD_Stop+0x16>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e00d      	b.n	8003de6 <HAL_HCD_Stop+0x32>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f005 fd99 	bl	800990e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	460b      	mov	r3, r1
 8003df8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f005 fbe1 	bl	80095d4 <USB_ReadChInterrupts>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d11a      	bne.n	8003e52 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	334d      	adds	r3, #77	; 0x4d
 8003e3e:	2207      	movs	r2, #7
 8003e40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f005 fc3f 	bl	80096ce <USB_HC_Halt>
 8003e50:	e09e      	b.n	8003f90 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f005 fbba 	bl	80095d4 <USB_ReadChInterrupts>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6a:	d11b      	bne.n	8003ea4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	334d      	adds	r3, #77	; 0x4d
 8003e90:	2208      	movs	r2, #8
 8003e92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f005 fc16 	bl	80096ce <USB_HC_Halt>
 8003ea2:	e075      	b.n	8003f90 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f005 fb91 	bl	80095d4 <USB_ReadChInterrupts>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d11a      	bne.n	8003ef2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2308      	movs	r3, #8
 8003ecc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	334d      	adds	r3, #77	; 0x4d
 8003ede:	2206      	movs	r2, #6
 8003ee0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f005 fbef 	bl	80096ce <USB_HC_Halt>
 8003ef0:	e04e      	b.n	8003f90 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	78fa      	ldrb	r2, [r7, #3]
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f005 fb6a 	bl	80095d4 <USB_ReadChInterrupts>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0a:	d11b      	bne.n	8003f44 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	334d      	adds	r3, #77	; 0x4d
 8003f30:	2209      	movs	r2, #9
 8003f32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f005 fbc6 	bl	80096ce <USB_HC_Halt>
 8003f42:	e025      	b.n	8003f90 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f005 fb41 	bl	80095d4 <USB_ReadChInterrupts>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f58:	2b80      	cmp	r3, #128	; 0x80
 8003f5a:	d119      	bne.n	8003f90 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	334d      	adds	r3, #77	; 0x4d
 8003f7e:	2207      	movs	r2, #7
 8003f80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	4611      	mov	r1, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f005 fb9f 	bl	80096ce <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f005 fb1b 	bl	80095d4 <USB_ReadChInterrupts>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa8:	d112      	bne.n	8003fd0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f005 fb8b 	bl	80096ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fca:	6093      	str	r3, [r2, #8]
 8003fcc:	f000 bd75 	b.w	8004aba <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f005 fafb 	bl	80095d4 <USB_ReadChInterrupts>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	f040 8128 	bne.w	800423a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	331b      	adds	r3, #27
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d119      	bne.n	8004046 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	331b      	adds	r3, #27
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4413      	add	r3, r2
 800402e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	0151      	lsls	r1, r2, #5
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	440a      	add	r2, r1
 800403c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004044:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	799b      	ldrb	r3, [r3, #6]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01b      	beq.n	8004086 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	3330      	adds	r3, #48	; 0x30
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4413      	add	r3, r2
 8004068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	1ac9      	subs	r1, r1, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4403      	add	r3, r0
 8004082:	3338      	adds	r3, #56	; 0x38
 8004084:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	334d      	adds	r3, #77	; 0x4d
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800409a:	78fa      	ldrb	r2, [r7, #3]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	3344      	adds	r3, #68	; 0x44
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ba:	461a      	mov	r2, r3
 80040bc:	2301      	movs	r3, #1
 80040be:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	3326      	adds	r3, #38	; 0x26
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	3326      	adds	r3, #38	; 0x26
 80040e6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d110      	bne.n	800410e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f005 faea 	bl	80096ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4413      	add	r3, r2
 8004102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004106:	461a      	mov	r2, r3
 8004108:	2310      	movs	r3, #16
 800410a:	6093      	str	r3, [r2, #8]
 800410c:	e03d      	b.n	800418a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800410e:	78fa      	ldrb	r2, [r7, #3]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	3326      	adds	r3, #38	; 0x26
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b03      	cmp	r3, #3
 8004122:	d00a      	beq.n	800413a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004124:	78fa      	ldrb	r2, [r7, #3]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	3326      	adds	r3, #38	; 0x26
 8004134:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004136:	2b01      	cmp	r3, #1
 8004138:	d127      	bne.n	800418a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4413      	add	r3, r2
 8004142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	0151      	lsls	r1, r2, #5
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	440a      	add	r2, r1
 8004150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004154:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004158:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	334c      	adds	r3, #76	; 0x4c
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	334c      	adds	r3, #76	; 0x4c
 800417e:	781a      	ldrb	r2, [r3, #0]
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	4619      	mov	r1, r3
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fc fc85 	bl	8000a94 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	799b      	ldrb	r3, [r3, #6]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d13b      	bne.n	800420a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	3338      	adds	r3, #56	; 0x38
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4403      	add	r3, r0
 80041b2:	3328      	adds	r3, #40	; 0x28
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	440b      	add	r3, r1
 80041b8:	1e59      	subs	r1, r3, #1
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4403      	add	r3, r0
 80041c8:	3328      	adds	r3, #40	; 0x28
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8470 	beq.w	8004aba <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	333c      	adds	r3, #60	; 0x3c
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	f083 0301 	eor.w	r3, r3, #1
 80041f2:	b2d8      	uxtb	r0, r3
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	333c      	adds	r3, #60	; 0x3c
 8004202:	4602      	mov	r2, r0
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	f000 bc58 	b.w	8004aba <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	440b      	add	r3, r1
 8004218:	333c      	adds	r3, #60	; 0x3c
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	f083 0301 	eor.w	r3, r3, #1
 8004222:	b2d8      	uxtb	r0, r3
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	333c      	adds	r3, #60	; 0x3c
 8004232:	4602      	mov	r2, r0
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	f000 bc40 	b.w	8004aba <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	78fa      	ldrb	r2, [r7, #3]
 8004240:	4611      	mov	r1, r2
 8004242:	4618      	mov	r0, r3
 8004244:	f005 f9c6 	bl	80095d4 <USB_ReadChInterrupts>
 8004248:	4603      	mov	r3, r0
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b20      	cmp	r3, #32
 8004250:	d131      	bne.n	80042b6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4413      	add	r3, r2
 800425a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425e:	461a      	mov	r2, r3
 8004260:	2320      	movs	r3, #32
 8004262:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	331a      	adds	r3, #26
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b01      	cmp	r3, #1
 8004278:	f040 841f 	bne.w	8004aba <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800427c:	78fa      	ldrb	r2, [r7, #3]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	331b      	adds	r3, #27
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	334d      	adds	r3, #77	; 0x4d
 80042a0:	2203      	movs	r2, #3
 80042a2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f005 fa0e 	bl	80096ce <USB_HC_Halt>
 80042b2:	f000 bc02 	b.w	8004aba <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	78fa      	ldrb	r2, [r7, #3]
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f005 f988 	bl	80095d4 <USB_ReadChInterrupts>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	f040 8305 	bne.w	80048da <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042dc:	461a      	mov	r2, r3
 80042de:	2302      	movs	r3, #2
 80042e0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	334d      	adds	r3, #77	; 0x4d
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d114      	bne.n	8004322 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042f8:	78fa      	ldrb	r2, [r7, #3]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	334d      	adds	r3, #77	; 0x4d
 8004308:	2202      	movs	r2, #2
 800430a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	334c      	adds	r3, #76	; 0x4c
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e2cc      	b.n	80048bc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	334d      	adds	r3, #77	; 0x4d
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b06      	cmp	r3, #6
 8004336:	d114      	bne.n	8004362 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	334d      	adds	r3, #77	; 0x4d
 8004348:	2202      	movs	r2, #2
 800434a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	334c      	adds	r3, #76	; 0x4c
 800435c:	2205      	movs	r2, #5
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e2ac      	b.n	80048bc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	334d      	adds	r3, #77	; 0x4d
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b07      	cmp	r3, #7
 8004376:	d00b      	beq.n	8004390 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	334d      	adds	r3, #77	; 0x4d
 8004388:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800438a:	2b09      	cmp	r3, #9
 800438c:	f040 80a6 	bne.w	80044dc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	334d      	adds	r3, #77	; 0x4d
 80043a0:	2202      	movs	r2, #2
 80043a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	3344      	adds	r3, #68	; 0x44
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4403      	add	r3, r0
 80043c4:	3344      	adds	r3, #68	; 0x44
 80043c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	3344      	adds	r3, #68	; 0x44
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d943      	bls.n	8004466 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	3344      	adds	r3, #68	; 0x44
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	331a      	adds	r3, #26
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d123      	bne.n	8004450 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	331b      	adds	r3, #27
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800441c:	78fa      	ldrb	r2, [r7, #3]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	331c      	adds	r3, #28
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4413      	add	r3, r2
 8004438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	440a      	add	r2, r1
 8004446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800444a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	334c      	adds	r3, #76	; 0x4c
 8004460:	2204      	movs	r2, #4
 8004462:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004464:	e229      	b.n	80048ba <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	334c      	adds	r3, #76	; 0x4c
 8004476:	2202      	movs	r2, #2
 8004478:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	3326      	adds	r3, #38	; 0x26
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00b      	beq.n	80044a8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	3326      	adds	r3, #38	; 0x26
 80044a0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	f040 8209 	bne.w	80048ba <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044be:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044c6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d4:	461a      	mov	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044da:	e1ee      	b.n	80048ba <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	334d      	adds	r3, #77	; 0x4d
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	f040 80c8 	bne.w	8004684 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	334d      	adds	r3, #77	; 0x4d
 8004504:	2202      	movs	r2, #2
 8004506:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	331b      	adds	r3, #27
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b01      	cmp	r3, #1
 800451c:	f040 81ce 	bne.w	80048bc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	3326      	adds	r3, #38	; 0x26
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d16b      	bne.n	800460e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	3348      	adds	r3, #72	; 0x48
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	1c59      	adds	r1, r3, #1
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4403      	add	r3, r0
 8004556:	3348      	adds	r3, #72	; 0x48
 8004558:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	3348      	adds	r3, #72	; 0x48
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d943      	bls.n	80045f8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	3348      	adds	r3, #72	; 0x48
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	331b      	adds	r3, #27
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	3344      	adds	r3, #68	; 0x44
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d809      	bhi.n	80045c2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	331c      	adds	r3, #28
 80045be:	2201      	movs	r2, #1
 80045c0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	0151      	lsls	r1, r2, #5
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	440a      	add	r2, r1
 80045d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	334c      	adds	r3, #76	; 0x4c
 80045f2:	2204      	movs	r2, #4
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	e014      	b.n	8004622 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	334c      	adds	r3, #76	; 0x4c
 8004608:	2202      	movs	r2, #2
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e009      	b.n	8004622 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	334c      	adds	r3, #76	; 0x4c
 800461e:	2202      	movs	r2, #2
 8004620:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004622:	78fa      	ldrb	r2, [r7, #3]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	3326      	adds	r3, #38	; 0x26
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00b      	beq.n	8004650 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	3326      	adds	r3, #38	; 0x26
 8004648:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800464a:	2b02      	cmp	r3, #2
 800464c:	f040 8136 	bne.w	80048bc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4413      	add	r3, r2
 8004658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004666:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800466e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467c:	461a      	mov	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e11b      	b.n	80048bc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	334d      	adds	r3, #77	; 0x4d
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b03      	cmp	r3, #3
 8004698:	f040 8081 	bne.w	800479e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334d      	adds	r3, #77	; 0x4d
 80046ac:	2202      	movs	r2, #2
 80046ae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	331b      	adds	r3, #27
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	f040 80fa 	bne.w	80048bc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	334c      	adds	r3, #76	; 0x4c
 80046d8:	2202      	movs	r2, #2
 80046da:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	0151      	lsls	r1, r2, #5
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	440a      	add	r2, r1
 80046f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046fa:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4413      	add	r3, r2
 8004704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	78fa      	ldrb	r2, [r7, #3]
 800470c:	0151      	lsls	r1, r2, #5
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	440a      	add	r2, r1
 8004712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800471a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	78fa      	ldrb	r2, [r7, #3]
 800472c:	0151      	lsls	r1, r2, #5
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	440a      	add	r2, r1
 8004732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004736:	f023 0320 	bic.w	r3, r3, #32
 800473a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	3326      	adds	r3, #38	; 0x26
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00b      	beq.n	800476a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	3326      	adds	r3, #38	; 0x26
 8004762:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004764:	2b02      	cmp	r3, #2
 8004766:	f040 80a9 	bne.w	80048bc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4413      	add	r3, r2
 8004772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004780:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004788:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800478a:	78fb      	ldrb	r3, [r7, #3]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4413      	add	r3, r2
 8004792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004796:	461a      	mov	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	e08e      	b.n	80048bc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800479e:	78fa      	ldrb	r2, [r7, #3]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	334d      	adds	r3, #77	; 0x4d
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d143      	bne.n	800483c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	334d      	adds	r3, #77	; 0x4d
 80047c4:	2202      	movs	r2, #2
 80047c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047c8:	78fa      	ldrb	r2, [r7, #3]
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	334c      	adds	r3, #76	; 0x4c
 80047d8:	2202      	movs	r2, #2
 80047da:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	3326      	adds	r3, #38	; 0x26
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	3326      	adds	r3, #38	; 0x26
 8004802:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004804:	2b02      	cmp	r3, #2
 8004806:	d159      	bne.n	80048bc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800481e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004826:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004834:	461a      	mov	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e03f      	b.n	80048bc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	334d      	adds	r3, #77	; 0x4d
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b08      	cmp	r3, #8
 8004850:	d126      	bne.n	80048a0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	1a9b      	subs	r3, r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	334d      	adds	r3, #77	; 0x4d
 8004862:	2202      	movs	r2, #2
 8004864:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	3344      	adds	r3, #68	; 0x44
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	1c59      	adds	r1, r3, #1
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4403      	add	r3, r0
 8004886:	3344      	adds	r3, #68	; 0x44
 8004888:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	334c      	adds	r3, #76	; 0x4c
 800489a:	2204      	movs	r2, #4
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	e00d      	b.n	80048bc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	334d      	adds	r3, #77	; 0x4d
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	f000 8100 	beq.w	8004ab8 <HCD_HC_IN_IRQHandler+0xcca>
 80048b8:	e000      	b.n	80048bc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048ba:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	334c      	adds	r3, #76	; 0x4c
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fc f8de 	bl	8000a94 <HAL_HCD_HC_NotifyURBChange_Callback>
 80048d8:	e0ef      	b.n	8004aba <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	78fa      	ldrb	r2, [r7, #3]
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f004 fe76 	bl	80095d4 <USB_ReadChInterrupts>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d12f      	bne.n	8004952 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fe:	461a      	mov	r2, r3
 8004900:	2340      	movs	r3, #64	; 0x40
 8004902:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	334d      	adds	r3, #77	; 0x4d
 8004914:	2205      	movs	r2, #5
 8004916:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	331a      	adds	r3, #26
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	3344      	adds	r3, #68	; 0x44
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	78fa      	ldrb	r2, [r7, #3]
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f004 febf 	bl	80096ce <USB_HC_Halt>
 8004950:	e0b3      	b.n	8004aba <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f004 fe3a 	bl	80095d4 <USB_ReadChInterrupts>
 8004960:	4603      	mov	r3, r0
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b10      	cmp	r3, #16
 8004968:	f040 80a7 	bne.w	8004aba <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	1a9b      	subs	r3, r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	3326      	adds	r3, #38	; 0x26
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b03      	cmp	r3, #3
 8004980:	d11b      	bne.n	80049ba <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	3344      	adds	r3, #68	; 0x44
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	334d      	adds	r3, #77	; 0x4d
 80049a6:	2204      	movs	r2, #4
 80049a8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f004 fe8b 	bl	80096ce <USB_HC_Halt>
 80049b8:	e03f      	b.n	8004a3a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	3326      	adds	r3, #38	; 0x26
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049d0:	78fa      	ldrb	r2, [r7, #3]
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	3326      	adds	r3, #38	; 0x26
 80049e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d129      	bne.n	8004a3a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	3344      	adds	r3, #68	; 0x44
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	799b      	ldrb	r3, [r3, #6]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HCD_HC_IN_IRQHandler+0xc2a>
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	331b      	adds	r3, #27
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d110      	bne.n	8004a3a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	334d      	adds	r3, #77	; 0x4d
 8004a28:	2204      	movs	r2, #4
 8004a2a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	78fa      	ldrb	r2, [r7, #3]
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f004 fe4a 	bl	80096ce <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	331b      	adds	r3, #27
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d129      	bne.n	8004aa4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004a50:	78fa      	ldrb	r2, [r7, #3]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	331b      	adds	r3, #27
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a82:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	0151      	lsls	r1, r2, #5
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	440a      	add	r2, r1
 8004a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a9e:	f043 0320 	orr.w	r3, r3, #32
 8004aa2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	2310      	movs	r3, #16
 8004ab4:	6093      	str	r3, [r2, #8]
 8004ab6:	e000      	b.n	8004aba <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004ab8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	4611      	mov	r1, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f004 fd78 	bl	80095d4 <USB_ReadChInterrupts>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d11b      	bne.n	8004b26 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afa:	461a      	mov	r2, r3
 8004afc:	2304      	movs	r3, #4
 8004afe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	334d      	adds	r3, #77	; 0x4d
 8004b10:	2207      	movs	r2, #7
 8004b12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f004 fdd6 	bl	80096ce <USB_HC_Halt>
 8004b22:	f000 bc6f 	b.w	8005404 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f004 fd50 	bl	80095d4 <USB_ReadChInterrupts>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	f040 8082 	bne.w	8004c44 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	2320      	movs	r3, #32
 8004b50:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	3319      	adds	r3, #25
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d124      	bne.n	8004bb2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	3319      	adds	r3, #25
 8004b78:	2200      	movs	r2, #0
 8004b7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b7c:	78fa      	ldrb	r2, [r7, #3]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	334c      	adds	r3, #76	; 0x4c
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004b90:	78fa      	ldrb	r2, [r7, #3]
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	334d      	adds	r3, #77	; 0x4d
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	4611      	mov	r1, r2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f004 fd8e 	bl	80096ce <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	331a      	adds	r3, #26
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	f040 841d 	bne.w	8005404 <HCD_HC_OUT_IRQHandler+0x944>
 8004bca:	78fa      	ldrb	r2, [r7, #3]
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	331b      	adds	r3, #27
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f040 8411 	bne.w	8005404 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004be2:	78fa      	ldrb	r2, [r7, #3]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	3326      	adds	r3, #38	; 0x26
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d009      	beq.n	8004c0c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004bf8:	78fa      	ldrb	r2, [r7, #3]
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	331b      	adds	r3, #27
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	334d      	adds	r3, #77	; 0x4d
 8004c1c:	2203      	movs	r2, #3
 8004c1e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	78fa      	ldrb	r2, [r7, #3]
 8004c26:	4611      	mov	r1, r2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f004 fd50 	bl	80096ce <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	3344      	adds	r3, #68	; 0x44
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e3df      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f004 fcc1 	bl	80095d4 <USB_ReadChInterrupts>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5c:	d111      	bne.n	8004c82 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c70:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	78fa      	ldrb	r2, [r7, #3]
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f004 fd27 	bl	80096ce <USB_HC_Halt>
 8004c80:	e3c0      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	78fa      	ldrb	r2, [r7, #3]
 8004c88:	4611      	mov	r1, r2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f004 fca2 	bl	80095d4 <USB_ReadChInterrupts>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d168      	bne.n	8004d6c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004c9a:	78fa      	ldrb	r2, [r7, #3]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3344      	adds	r3, #68	; 0x44
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	78fa      	ldrb	r2, [r7, #3]
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f004 fc8c 	bl	80095d4 <USB_ReadChInterrupts>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc2:	2b40      	cmp	r3, #64	; 0x40
 8004cc4:	d112      	bne.n	8004cec <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004cc6:	78fa      	ldrb	r2, [r7, #3]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3319      	adds	r3, #25
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004cda:	78fb      	ldrb	r3, [r7, #3]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	2340      	movs	r3, #64	; 0x40
 8004cea:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	331b      	adds	r3, #27
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d019      	beq.n	8004d36 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004d02:	78fa      	ldrb	r2, [r7, #3]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	331b      	adds	r3, #27
 8004d12:	2200      	movs	r2, #0
 8004d14:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d34:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d42:	461a      	mov	r2, r3
 8004d44:	2301      	movs	r3, #1
 8004d46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	334d      	adds	r3, #77	; 0x4d
 8004d58:	2201      	movs	r2, #1
 8004d5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	78fa      	ldrb	r2, [r7, #3]
 8004d62:	4611      	mov	r1, r2
 8004d64:	4618      	mov	r0, r3
 8004d66:	f004 fcb2 	bl	80096ce <USB_HC_Halt>
 8004d6a:	e34b      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f004 fc2d 	bl	80095d4 <USB_ReadChInterrupts>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b40      	cmp	r3, #64	; 0x40
 8004d82:	d139      	bne.n	8004df8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004d84:	78fa      	ldrb	r2, [r7, #3]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	334d      	adds	r3, #77	; 0x4d
 8004d94:	2205      	movs	r2, #5
 8004d96:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004d98:	78fa      	ldrb	r2, [r7, #3]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	331a      	adds	r3, #26
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	3319      	adds	r3, #25
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	1a9b      	subs	r3, r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	3344      	adds	r3, #68	; 0x44
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f004 fc75 	bl	80096ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df0:	461a      	mov	r2, r3
 8004df2:	2340      	movs	r3, #64	; 0x40
 8004df4:	6093      	str	r3, [r2, #8]
 8004df6:	e305      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	78fa      	ldrb	r2, [r7, #3]
 8004dfe:	4611      	mov	r1, r2
 8004e00:	4618      	mov	r0, r3
 8004e02:	f004 fbe7 	bl	80095d4 <USB_ReadChInterrupts>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d11a      	bne.n	8004e46 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	2308      	movs	r3, #8
 8004e20:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	334d      	adds	r3, #77	; 0x4d
 8004e32:	2206      	movs	r2, #6
 8004e34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	78fa      	ldrb	r2, [r7, #3]
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f004 fc45 	bl	80096ce <USB_HC_Halt>
 8004e44:	e2de      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f004 fbc0 	bl	80095d4 <USB_ReadChInterrupts>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d144      	bne.n	8004ee8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	3344      	adds	r3, #68	; 0x44
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004e72:	78fa      	ldrb	r2, [r7, #3]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	334d      	adds	r3, #77	; 0x4d
 8004e82:	2204      	movs	r2, #4
 8004e84:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	3319      	adds	r3, #25
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d114      	bne.n	8004ec6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004e9c:	78fa      	ldrb	r2, [r7, #3]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3318      	adds	r3, #24
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	3319      	adds	r3, #25
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	4611      	mov	r1, r2
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f004 fbfd 	bl	80096ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004ed4:	78fb      	ldrb	r3, [r7, #3]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	2310      	movs	r3, #16
 8004ee4:	6093      	str	r3, [r2, #8]
 8004ee6:	e28d      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f004 fb6f 	bl	80095d4 <USB_ReadChInterrupts>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d169      	bne.n	8004fd4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	799b      	ldrb	r3, [r3, #6]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d111      	bne.n	8004f2c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	334d      	adds	r3, #77	; 0x4d
 8004f18:	2207      	movs	r2, #7
 8004f1a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	4611      	mov	r1, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f004 fbd2 	bl	80096ce <USB_HC_Halt>
 8004f2a:	e049      	b.n	8004fc0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004f2c:	78fa      	ldrb	r2, [r7, #3]
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	4613      	mov	r3, r2
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	3344      	adds	r3, #68	; 0x44
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	1c59      	adds	r1, r3, #1
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4403      	add	r3, r0
 8004f4c:	3344      	adds	r3, #68	; 0x44
 8004f4e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f50:	78fa      	ldrb	r2, [r7, #3]
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	4613      	mov	r3, r2
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	3344      	adds	r3, #68	; 0x44
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d922      	bls.n	8004fac <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3344      	adds	r3, #68	; 0x44
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	334c      	adds	r3, #76	; 0x4c
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f8e:	78fa      	ldrb	r2, [r7, #3]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	334c      	adds	r3, #76	; 0x4c
 8004f9e:	781a      	ldrb	r2, [r3, #0]
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fb fd75 	bl	8000a94 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004faa:	e009      	b.n	8004fc0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	334c      	adds	r3, #76	; 0x4c
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fcc:	461a      	mov	r2, r3
 8004fce:	2380      	movs	r3, #128	; 0x80
 8004fd0:	6093      	str	r3, [r2, #8]
 8004fd2:	e217      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	78fa      	ldrb	r2, [r7, #3]
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f004 faf9 	bl	80095d4 <USB_ReadChInterrupts>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fec:	d11b      	bne.n	8005026 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004fee:	78fa      	ldrb	r2, [r7, #3]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	334d      	adds	r3, #77	; 0x4d
 8004ffe:	2209      	movs	r2, #9
 8005000:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f004 fb5f 	bl	80096ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501c:	461a      	mov	r2, r3
 800501e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005022:	6093      	str	r3, [r2, #8]
 8005024:	e1ee      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	78fa      	ldrb	r2, [r7, #3]
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f004 fad0 	bl	80095d4 <USB_ReadChInterrupts>
 8005034:	4603      	mov	r3, r0
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b02      	cmp	r3, #2
 800503c:	f040 81df 	bne.w	80053fe <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	4413      	add	r3, r2
 8005048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504c:	461a      	mov	r2, r3
 800504e:	2302      	movs	r3, #2
 8005050:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	334d      	adds	r3, #77	; 0x4d
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b01      	cmp	r3, #1
 8005066:	f040 8093 	bne.w	8005190 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800506a:	78fa      	ldrb	r2, [r7, #3]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	334d      	adds	r3, #77	; 0x4d
 800507a:	2202      	movs	r2, #2
 800507c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800507e:	78fa      	ldrb	r2, [r7, #3]
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	334c      	adds	r3, #76	; 0x4c
 800508e:	2201      	movs	r2, #1
 8005090:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005092:	78fa      	ldrb	r2, [r7, #3]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	3326      	adds	r3, #38	; 0x26
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d00b      	beq.n	80050c0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80050a8:	78fa      	ldrb	r2, [r7, #3]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	3326      	adds	r3, #38	; 0x26
 80050b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	f040 8190 	bne.w	80053e0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	799b      	ldrb	r3, [r3, #6]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d115      	bne.n	80050f4 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80050c8:	78fa      	ldrb	r2, [r7, #3]
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	333d      	adds	r3, #61	; 0x3d
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	78fa      	ldrb	r2, [r7, #3]
 80050dc:	f083 0301 	eor.w	r3, r3, #1
 80050e0:	b2d8      	uxtb	r0, r3
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	1a9b      	subs	r3, r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	333d      	adds	r3, #61	; 0x3d
 80050f0:	4602      	mov	r2, r0
 80050f2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	799b      	ldrb	r3, [r3, #6]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	f040 8171 	bne.w	80053e0 <HCD_HC_OUT_IRQHandler+0x920>
 80050fe:	78fa      	ldrb	r2, [r7, #3]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	3334      	adds	r3, #52	; 0x34
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 8165 	beq.w	80053e0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	3334      	adds	r3, #52	; 0x34
 8005126:	6819      	ldr	r1, [r3, #0]
 8005128:	78fa      	ldrb	r2, [r7, #3]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4403      	add	r3, r0
 8005136:	3328      	adds	r3, #40	; 0x28
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	440b      	add	r3, r1
 800513c:	1e59      	subs	r1, r3, #1
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4403      	add	r3, r0
 800514c:	3328      	adds	r3, #40	; 0x28
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	fbb1 f3f3 	udiv	r3, r1, r3
 8005154:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 813f 	beq.w	80053e0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005162:	78fa      	ldrb	r2, [r7, #3]
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	4613      	mov	r3, r2
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	440b      	add	r3, r1
 8005170:	333d      	adds	r3, #61	; 0x3d
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	f083 0301 	eor.w	r3, r3, #1
 800517a:	b2d8      	uxtb	r0, r3
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	1a9b      	subs	r3, r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	333d      	adds	r3, #61	; 0x3d
 800518a:	4602      	mov	r2, r0
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e127      	b.n	80053e0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	334d      	adds	r3, #77	; 0x4d
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d120      	bne.n	80051e8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	334d      	adds	r3, #77	; 0x4d
 80051b6:	2202      	movs	r2, #2
 80051b8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	331b      	adds	r3, #27
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	f040 8107 	bne.w	80053e0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	334c      	adds	r3, #76	; 0x4c
 80051e2:	2202      	movs	r2, #2
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e0fb      	b.n	80053e0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	1a9b      	subs	r3, r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	334d      	adds	r3, #77	; 0x4d
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d13a      	bne.n	8005274 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	1a9b      	subs	r3, r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	334d      	adds	r3, #77	; 0x4d
 800520e:	2202      	movs	r2, #2
 8005210:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	334c      	adds	r3, #76	; 0x4c
 8005222:	2202      	movs	r2, #2
 8005224:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005226:	78fa      	ldrb	r2, [r7, #3]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	331b      	adds	r3, #27
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b01      	cmp	r3, #1
 800523a:	f040 80d1 	bne.w	80053e0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800523e:	78fa      	ldrb	r2, [r7, #3]
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	1a9b      	subs	r3, r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	331b      	adds	r3, #27
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4413      	add	r3, r2
 800525a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	440a      	add	r2, r1
 8005268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800526c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005270:	6053      	str	r3, [r2, #4]
 8005272:	e0b5      	b.n	80053e0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005274:	78fa      	ldrb	r2, [r7, #3]
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	334d      	adds	r3, #77	; 0x4d
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b05      	cmp	r3, #5
 8005288:	d114      	bne.n	80052b4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800528a:	78fa      	ldrb	r2, [r7, #3]
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	334d      	adds	r3, #77	; 0x4d
 800529a:	2202      	movs	r2, #2
 800529c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	334c      	adds	r3, #76	; 0x4c
 80052ae:	2202      	movs	r2, #2
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	e095      	b.n	80053e0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	334d      	adds	r3, #77	; 0x4d
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	d114      	bne.n	80052f4 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052ca:	78fa      	ldrb	r2, [r7, #3]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	334d      	adds	r3, #77	; 0x4d
 80052da:	2202      	movs	r2, #2
 80052dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	334c      	adds	r3, #76	; 0x4c
 80052ee:	2205      	movs	r2, #5
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e075      	b.n	80053e0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80052f4:	78fa      	ldrb	r2, [r7, #3]
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	1a9b      	subs	r3, r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	334d      	adds	r3, #77	; 0x4d
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b07      	cmp	r3, #7
 8005308:	d00a      	beq.n	8005320 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800530a:	78fa      	ldrb	r2, [r7, #3]
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	1a9b      	subs	r3, r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	440b      	add	r3, r1
 8005318:	334d      	adds	r3, #77	; 0x4d
 800531a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800531c:	2b09      	cmp	r3, #9
 800531e:	d170      	bne.n	8005402 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	334d      	adds	r3, #77	; 0x4d
 8005330:	2202      	movs	r2, #2
 8005332:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005334:	78fa      	ldrb	r2, [r7, #3]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	3344      	adds	r3, #68	; 0x44
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	1c59      	adds	r1, r3, #1
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	4613      	mov	r3, r2
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4403      	add	r3, r0
 8005354:	3344      	adds	r3, #68	; 0x44
 8005356:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005358:	78fa      	ldrb	r2, [r7, #3]
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	3344      	adds	r3, #68	; 0x44
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d914      	bls.n	8005398 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800536e:	78fa      	ldrb	r2, [r7, #3]
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	1a9b      	subs	r3, r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	3344      	adds	r3, #68	; 0x44
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005382:	78fa      	ldrb	r2, [r7, #3]
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	334c      	adds	r3, #76	; 0x4c
 8005392:	2204      	movs	r2, #4
 8005394:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005396:	e022      	b.n	80053de <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005398:	78fa      	ldrb	r2, [r7, #3]
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	334c      	adds	r3, #76	; 0x4c
 80053a8:	2202      	movs	r2, #2
 80053aa:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053c2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053ca:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d8:	461a      	mov	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80053de:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	4613      	mov	r3, r2
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	334c      	adds	r3, #76	; 0x4c
 80053f0:	781a      	ldrb	r2, [r3, #0]
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	4619      	mov	r1, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fb fb4c 	bl	8000a94 <HAL_HCD_HC_NotifyURBChange_Callback>
 80053fc:	e002      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8005402:	bf00      	nop
  }
}
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b08a      	sub	sp, #40	; 0x28
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	0c5b      	lsrs	r3, r3, #17
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	091b      	lsrs	r3, r3, #4
 800543a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800543e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d004      	beq.n	8005450 <HCD_RXQLVL_IRQHandler+0x46>
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b05      	cmp	r3, #5
 800544a:	f000 80b6 	beq.w	80055ba <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800544e:	e0b7      	b.n	80055c0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80b3 	beq.w	80055be <HCD_RXQLVL_IRQHandler+0x1b4>
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	4613      	mov	r3, r2
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	1a9b      	subs	r3, r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	332c      	adds	r3, #44	; 0x2c
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80a7 	beq.w	80055be <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	4613      	mov	r3, r2
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	3338      	adds	r3, #56	; 0x38
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	18d1      	adds	r1, r2, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	4613      	mov	r3, r2
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4403      	add	r3, r0
 8005494:	3334      	adds	r3, #52	; 0x34
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4299      	cmp	r1, r3
 800549a:	f200 8083 	bhi.w	80055a4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	4613      	mov	r3, r2
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	332c      	adds	r3, #44	; 0x2c
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	b292      	uxth	r2, r2
 80054b8:	4619      	mov	r1, r3
 80054ba:	f004 f820 	bl	80094fe <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4613      	mov	r3, r2
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	332c      	adds	r3, #44	; 0x2c
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	18d1      	adds	r1, r2, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4403      	add	r3, r0
 80054e2:	332c      	adds	r3, #44	; 0x2c
 80054e4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	3338      	adds	r3, #56	; 0x38
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	18d1      	adds	r1, r2, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	4613      	mov	r3, r2
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4403      	add	r3, r0
 800550a:	3338      	adds	r3, #56	; 0x38
 800550c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	4413      	add	r3, r2
 8005516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	0cdb      	lsrs	r3, r3, #19
 800551e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005522:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4613      	mov	r3, r2
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	3328      	adds	r3, #40	; 0x28
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4293      	cmp	r3, r2
 800553c:	d13f      	bne.n	80055be <HCD_RXQLVL_IRQHandler+0x1b4>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d03c      	beq.n	80055be <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	4413      	add	r3, r2
 800554c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800555a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005562:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	4413      	add	r3, r2
 800556c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005570:	461a      	mov	r2, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4613      	mov	r3, r2
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	333c      	adds	r3, #60	; 0x3c
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f083 0301 	eor.w	r3, r3, #1
 800558c:	b2d8      	uxtb	r0, r3
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4613      	mov	r3, r2
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	333c      	adds	r3, #60	; 0x3c
 800559e:	4602      	mov	r2, r0
 80055a0:	701a      	strb	r2, [r3, #0]
      break;
 80055a2:	e00c      	b.n	80055be <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4613      	mov	r3, r2
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	1a9b      	subs	r3, r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	334c      	adds	r3, #76	; 0x4c
 80055b4:	2204      	movs	r2, #4
 80055b6:	701a      	strb	r2, [r3, #0]
      break;
 80055b8:	e001      	b.n	80055be <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80055ba:	bf00      	nop
 80055bc:	e000      	b.n	80055c0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80055be:	bf00      	nop
  }
}
 80055c0:	bf00      	nop
 80055c2:	3728      	adds	r7, #40	; 0x28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80055f4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d10b      	bne.n	8005618 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d102      	bne.n	8005610 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fb fa0a 	bl	8000a24 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f043 0302 	orr.w	r3, r3, #2
 8005616:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b08      	cmp	r3, #8
 8005620:	d132      	bne.n	8005688 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f043 0308 	orr.w	r3, r3, #8
 8005628:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b04      	cmp	r3, #4
 8005632:	d126      	bne.n	8005682 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	7a5b      	ldrb	r3, [r3, #9]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d113      	bne.n	8005664 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005642:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005646:	d106      	bne.n	8005656 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2102      	movs	r1, #2
 800564e:	4618      	mov	r0, r3
 8005650:	f003 ffef 	bl	8009632 <USB_InitFSLSPClkSel>
 8005654:	e011      	b.n	800567a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2101      	movs	r1, #1
 800565c:	4618      	mov	r0, r3
 800565e:	f003 ffe8 	bl	8009632 <USB_InitFSLSPClkSel>
 8005662:	e00a      	b.n	800567a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	79db      	ldrb	r3, [r3, #7]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d106      	bne.n	800567a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005672:	461a      	mov	r2, r3
 8005674:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005678:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fb f9ee 	bl	8000a5c <HAL_HCD_PortEnabled_Callback>
 8005680:	e002      	b.n	8005688 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fb f9f8 	bl	8000a78 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b20      	cmp	r3, #32
 8005690:	d103      	bne.n	800569a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f043 0320 	orr.w	r3, r3, #32
 8005698:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056a0:	461a      	mov	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6013      	str	r3, [r2, #0]
}
 80056a6:	bf00      	nop
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e12b      	b.n	800591a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f95d 	bl	8005996 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2224      	movs	r2, #36	; 0x24
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005714:	f002 fb34 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 8005718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4a81      	ldr	r2, [pc, #516]	; (8005924 <HAL_I2C_Init+0x274>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d807      	bhi.n	8005734 <HAL_I2C_Init+0x84>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a80      	ldr	r2, [pc, #512]	; (8005928 <HAL_I2C_Init+0x278>)
 8005728:	4293      	cmp	r3, r2
 800572a:	bf94      	ite	ls
 800572c:	2301      	movls	r3, #1
 800572e:	2300      	movhi	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	e006      	b.n	8005742 <HAL_I2C_Init+0x92>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4a7d      	ldr	r2, [pc, #500]	; (800592c <HAL_I2C_Init+0x27c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	bf94      	ite	ls
 800573c:	2301      	movls	r3, #1
 800573e:	2300      	movhi	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e0e7      	b.n	800591a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4a78      	ldr	r2, [pc, #480]	; (8005930 <HAL_I2C_Init+0x280>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	0c9b      	lsrs	r3, r3, #18
 8005754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	4a6a      	ldr	r2, [pc, #424]	; (8005924 <HAL_I2C_Init+0x274>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d802      	bhi.n	8005784 <HAL_I2C_Init+0xd4>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	3301      	adds	r3, #1
 8005782:	e009      	b.n	8005798 <HAL_I2C_Init+0xe8>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	4a69      	ldr	r2, [pc, #420]	; (8005934 <HAL_I2C_Init+0x284>)
 8005790:	fba2 2303 	umull	r2, r3, r2, r3
 8005794:	099b      	lsrs	r3, r3, #6
 8005796:	3301      	adds	r3, #1
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	430b      	orrs	r3, r1
 800579e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	495c      	ldr	r1, [pc, #368]	; (8005924 <HAL_I2C_Init+0x274>)
 80057b4:	428b      	cmp	r3, r1
 80057b6:	d819      	bhi.n	80057ec <HAL_I2C_Init+0x13c>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1e59      	subs	r1, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80057c6:	1c59      	adds	r1, r3, #1
 80057c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057cc:	400b      	ands	r3, r1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_I2C_Init+0x138>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1e59      	subs	r1, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80057e0:	3301      	adds	r3, #1
 80057e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e6:	e051      	b.n	800588c <HAL_I2C_Init+0x1dc>
 80057e8:	2304      	movs	r3, #4
 80057ea:	e04f      	b.n	800588c <HAL_I2C_Init+0x1dc>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d111      	bne.n	8005818 <HAL_I2C_Init+0x168>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	1e58      	subs	r0, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6859      	ldr	r1, [r3, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	440b      	add	r3, r1
 8005802:	fbb0 f3f3 	udiv	r3, r0, r3
 8005806:	3301      	adds	r3, #1
 8005808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800580c:	2b00      	cmp	r3, #0
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	e012      	b.n	800583e <HAL_I2C_Init+0x18e>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	1e58      	subs	r0, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6859      	ldr	r1, [r3, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	0099      	lsls	r1, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	fbb0 f3f3 	udiv	r3, r0, r3
 800582e:	3301      	adds	r3, #1
 8005830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_I2C_Init+0x196>
 8005842:	2301      	movs	r3, #1
 8005844:	e022      	b.n	800588c <HAL_I2C_Init+0x1dc>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10e      	bne.n	800586c <HAL_I2C_Init+0x1bc>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1e58      	subs	r0, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6859      	ldr	r1, [r3, #4]
 8005856:	460b      	mov	r3, r1
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	440b      	add	r3, r1
 800585c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005860:	3301      	adds	r3, #1
 8005862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800586a:	e00f      	b.n	800588c <HAL_I2C_Init+0x1dc>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	1e58      	subs	r0, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6859      	ldr	r1, [r3, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	0099      	lsls	r1, r3, #2
 800587c:	440b      	add	r3, r1
 800587e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005882:	3301      	adds	r3, #1
 8005884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	6809      	ldr	r1, [r1, #0]
 8005890:	4313      	orrs	r3, r2
 8005892:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69da      	ldr	r2, [r3, #28]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80058ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6911      	ldr	r1, [r2, #16]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	68d2      	ldr	r2, [r2, #12]
 80058c6:	4311      	orrs	r1, r2
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	000186a0 	.word	0x000186a0
 8005928:	001e847f 	.word	0x001e847f
 800592c:	003d08ff 	.word	0x003d08ff
 8005930:	431bde83 	.word	0x431bde83
 8005934:	10624dd3 	.word	0x10624dd3

08005938 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e021      	b.n	800598e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2224      	movs	r2, #36	; 0x24
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0201 	bic.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f821 	bl	80059aa <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
	...

080059c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	4608      	mov	r0, r1
 80059ca:	4611      	mov	r1, r2
 80059cc:	461a      	mov	r2, r3
 80059ce:	4603      	mov	r3, r0
 80059d0:	817b      	strh	r3, [r7, #10]
 80059d2:	460b      	mov	r3, r1
 80059d4:	813b      	strh	r3, [r7, #8]
 80059d6:	4613      	mov	r3, r2
 80059d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059da:	f7fd f9d7 	bl	8002d8c <HAL_GetTick>
 80059de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	f040 80d9 	bne.w	8005ba0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	2319      	movs	r3, #25
 80059f4:	2201      	movs	r2, #1
 80059f6:	496d      	ldr	r1, [pc, #436]	; (8005bac <HAL_I2C_Mem_Write+0x1ec>)
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 fc99 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005a04:	2302      	movs	r3, #2
 8005a06:	e0cc      	b.n	8005ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_I2C_Mem_Write+0x56>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e0c5      	b.n	8005ba2 <HAL_I2C_Mem_Write+0x1e2>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d007      	beq.n	8005a3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2221      	movs	r2, #33	; 0x21
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2240      	movs	r2, #64	; 0x40
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a3a      	ldr	r2, [r7, #32]
 8005a66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4a4d      	ldr	r2, [pc, #308]	; (8005bb0 <HAL_I2C_Mem_Write+0x1f0>)
 8005a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a7e:	88f8      	ldrh	r0, [r7, #6]
 8005a80:	893a      	ldrh	r2, [r7, #8]
 8005a82:	8979      	ldrh	r1, [r7, #10]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	9301      	str	r3, [sp, #4]
 8005a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fad0 	bl	8006034 <I2C_RequestMemoryWrite>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d052      	beq.n	8005b40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e081      	b.n	8005ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fd5e 	bl	8006564 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d107      	bne.n	8005ac6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e06b      	b.n	8005ba2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	781a      	ldrb	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d11b      	bne.n	8005b40 <HAL_I2C_Mem_Write+0x180>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d017      	beq.n	8005b40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	781a      	ldrb	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1aa      	bne.n	8005a9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fd51 	bl	80065f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00d      	beq.n	8005b74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d107      	bne.n	8005b70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e016      	b.n	8005ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e000      	b.n	8005ba2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ba0:	2302      	movs	r3, #2
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	00100002 	.word	0x00100002
 8005bb0:	ffff0000 	.word	0xffff0000

08005bb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08c      	sub	sp, #48	; 0x30
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	817b      	strh	r3, [r7, #10]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	813b      	strh	r3, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bce:	f7fd f8dd 	bl	8002d8c <HAL_GetTick>
 8005bd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	f040 8214 	bne.w	800600a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	2319      	movs	r3, #25
 8005be8:	2201      	movs	r2, #1
 8005bea:	497b      	ldr	r1, [pc, #492]	; (8005dd8 <HAL_I2C_Mem_Read+0x224>)
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fb9f 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e207      	b.n	800600c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_I2C_Mem_Read+0x56>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e200      	b.n	800600c <HAL_I2C_Mem_Read+0x458>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d007      	beq.n	8005c30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2222      	movs	r2, #34	; 0x22
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2240      	movs	r2, #64	; 0x40
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005c60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4a5b      	ldr	r2, [pc, #364]	; (8005ddc <HAL_I2C_Mem_Read+0x228>)
 8005c70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c72:	88f8      	ldrh	r0, [r7, #6]
 8005c74:	893a      	ldrh	r2, [r7, #8]
 8005c76:	8979      	ldrh	r1, [r7, #10]
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	4603      	mov	r3, r0
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 fa6c 	bl	8006160 <I2C_RequestMemoryRead>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e1bc      	b.n	800600c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d113      	bne.n	8005cc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	623b      	str	r3, [r7, #32]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	623b      	str	r3, [r7, #32]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	623b      	str	r3, [r7, #32]
 8005cae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	e190      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d11b      	bne.n	8005d02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	61fb      	str	r3, [r7, #28]
 8005cee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	e170      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d11b      	bne.n	8005d42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	e150      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d58:	e144      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	f200 80f1 	bhi.w	8005f46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d123      	bne.n	8005db4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fc87 	bl	8006684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e145      	b.n	800600c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005db2:	e117      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d14e      	bne.n	8005e5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	4906      	ldr	r1, [pc, #24]	; (8005de0 <HAL_I2C_Mem_Read+0x22c>)
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 fab2 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d008      	beq.n	8005de4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e11a      	b.n	800600c <HAL_I2C_Mem_Read+0x458>
 8005dd6:	bf00      	nop
 8005dd8:	00100002 	.word	0x00100002
 8005ddc:	ffff0000 	.word	0xffff0000
 8005de0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e58:	e0c4      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	2200      	movs	r2, #0
 8005e62:	496c      	ldr	r1, [pc, #432]	; (8006014 <HAL_I2C_Mem_Read+0x460>)
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 fa63 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e0cb      	b.n	800600c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691a      	ldr	r2, [r3, #16]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4955      	ldr	r1, [pc, #340]	; (8006014 <HAL_I2C_Mem_Read+0x460>)
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 fa35 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e09d      	b.n	800600c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f44:	e04e      	b.n	8005fe4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 fb9a 	bl	8006684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e058      	b.n	800600c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d124      	bne.n	8005fe4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d107      	bne.n	8005fb2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f47f aeb6 	bne.w	8005d5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	e000      	b.n	800600c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800600a:	2302      	movs	r3, #2
  }
}
 800600c:	4618      	mov	r0, r3
 800600e:	3728      	adds	r7, #40	; 0x28
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	00010004 	.word	0x00010004

08006018 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006026:	b2db      	uxtb	r3, r3
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af02      	add	r7, sp, #8
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	4608      	mov	r0, r1
 800603e:	4611      	mov	r1, r2
 8006040:	461a      	mov	r2, r3
 8006042:	4603      	mov	r3, r0
 8006044:	817b      	strh	r3, [r7, #10]
 8006046:	460b      	mov	r3, r1
 8006048:	813b      	strh	r3, [r7, #8]
 800604a:	4613      	mov	r3, r2
 800604c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800605c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	2200      	movs	r2, #0
 8006066:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f960 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00d      	beq.n	8006092 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006084:	d103      	bne.n	800608e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e05f      	b.n	8006152 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006092:	897b      	ldrh	r3, [r7, #10]
 8006094:	b2db      	uxtb	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	6a3a      	ldr	r2, [r7, #32]
 80060a6:	492d      	ldr	r1, [pc, #180]	; (800615c <I2C_RequestMemoryWrite+0x128>)
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f9bb 	bl	8006424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e04c      	b.n	8006152 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d0:	6a39      	ldr	r1, [r7, #32]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fa46 	bl	8006564 <I2C_WaitOnTXEFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00d      	beq.n	80060fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d107      	bne.n	80060f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e02b      	b.n	8006152 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d105      	bne.n	800610c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006100:	893b      	ldrh	r3, [r7, #8]
 8006102:	b2da      	uxtb	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	611a      	str	r2, [r3, #16]
 800610a:	e021      	b.n	8006150 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800610c:	893b      	ldrh	r3, [r7, #8]
 800610e:	0a1b      	lsrs	r3, r3, #8
 8006110:	b29b      	uxth	r3, r3
 8006112:	b2da      	uxtb	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800611a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800611c:	6a39      	ldr	r1, [r7, #32]
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 fa20 	bl	8006564 <I2C_WaitOnTXEFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00d      	beq.n	8006146 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	2b04      	cmp	r3, #4
 8006130:	d107      	bne.n	8006142 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006140:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e005      	b.n	8006152 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006146:	893b      	ldrh	r3, [r7, #8]
 8006148:	b2da      	uxtb	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	00010002 	.word	0x00010002

08006160 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b088      	sub	sp, #32
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	4608      	mov	r0, r1
 800616a:	4611      	mov	r1, r2
 800616c:	461a      	mov	r2, r3
 800616e:	4603      	mov	r3, r0
 8006170:	817b      	strh	r3, [r7, #10]
 8006172:	460b      	mov	r3, r1
 8006174:	813b      	strh	r3, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006188:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006198:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f8c2 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00d      	beq.n	80061ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c0:	d103      	bne.n	80061ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e0aa      	b.n	8006324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061ce:	897b      	ldrh	r3, [r7, #10]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	6a3a      	ldr	r2, [r7, #32]
 80061e2:	4952      	ldr	r1, [pc, #328]	; (800632c <I2C_RequestMemoryRead+0x1cc>)
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f91d 	bl	8006424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e097      	b.n	8006324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800620a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620c:	6a39      	ldr	r1, [r7, #32]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f9a8 	bl	8006564 <I2C_WaitOnTXEFlagUntilTimeout>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00d      	beq.n	8006236 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	2b04      	cmp	r3, #4
 8006220:	d107      	bne.n	8006232 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006230:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e076      	b.n	8006324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d105      	bne.n	8006248 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800623c:	893b      	ldrh	r3, [r7, #8]
 800623e:	b2da      	uxtb	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	611a      	str	r2, [r3, #16]
 8006246:	e021      	b.n	800628c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006248:	893b      	ldrh	r3, [r7, #8]
 800624a:	0a1b      	lsrs	r3, r3, #8
 800624c:	b29b      	uxth	r3, r3
 800624e:	b2da      	uxtb	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006258:	6a39      	ldr	r1, [r7, #32]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 f982 	bl	8006564 <I2C_WaitOnTXEFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00d      	beq.n	8006282 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	2b04      	cmp	r3, #4
 800626c:	d107      	bne.n	800627e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800627c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e050      	b.n	8006324 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006282:	893b      	ldrh	r3, [r7, #8]
 8006284:	b2da      	uxtb	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800628c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628e:	6a39      	ldr	r1, [r7, #32]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f967 	bl	8006564 <I2C_WaitOnTXEFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00d      	beq.n	80062b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d107      	bne.n	80062b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e035      	b.n	8006324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f82b 	bl	8006330 <I2C_WaitOnFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00d      	beq.n	80062fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ee:	d103      	bne.n	80062f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e013      	b.n	8006324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80062fc:	897b      	ldrh	r3, [r7, #10]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	f043 0301 	orr.w	r3, r3, #1
 8006304:	b2da      	uxtb	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	6a3a      	ldr	r2, [r7, #32]
 8006310:	4906      	ldr	r1, [pc, #24]	; (800632c <I2C_RequestMemoryRead+0x1cc>)
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f886 	bl	8006424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	00010002 	.word	0x00010002

08006330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006340:	e048      	b.n	80063d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d044      	beq.n	80063d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634a:	f7fc fd1f 	bl	8002d8c <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d302      	bcc.n	8006360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d139      	bne.n	80063d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	0c1b      	lsrs	r3, r3, #16
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b01      	cmp	r3, #1
 8006368:	d10d      	bne.n	8006386 <I2C_WaitOnFlagUntilTimeout+0x56>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	43da      	mvns	r2, r3
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	4013      	ands	r3, r2
 8006376:	b29b      	uxth	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	bf0c      	ite	eq
 800637c:	2301      	moveq	r3, #1
 800637e:	2300      	movne	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	461a      	mov	r2, r3
 8006384:	e00c      	b.n	80063a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	43da      	mvns	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4013      	ands	r3, r2
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	bf0c      	ite	eq
 8006398:	2301      	moveq	r3, #1
 800639a:	2300      	movne	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	461a      	mov	r2, r3
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d116      	bne.n	80063d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	f043 0220 	orr.w	r2, r3, #32
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e023      	b.n	800641c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	0c1b      	lsrs	r3, r3, #16
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d10d      	bne.n	80063fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	43da      	mvns	r2, r3
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	4013      	ands	r3, r2
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bf0c      	ite	eq
 80063f0:	2301      	moveq	r3, #1
 80063f2:	2300      	movne	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	461a      	mov	r2, r3
 80063f8:	e00c      	b.n	8006414 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	43da      	mvns	r2, r3
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	4013      	ands	r3, r2
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	bf0c      	ite	eq
 800640c:	2301      	moveq	r3, #1
 800640e:	2300      	movne	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	429a      	cmp	r2, r3
 8006418:	d093      	beq.n	8006342 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006432:	e071      	b.n	8006518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800643e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006442:	d123      	bne.n	800648c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006452:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800645c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	f043 0204 	orr.w	r2, r3, #4
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e067      	b.n	800655c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d041      	beq.n	8006518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006494:	f7fc fc7a 	bl	8002d8c <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d302      	bcc.n	80064aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d136      	bne.n	8006518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	0c1b      	lsrs	r3, r3, #16
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d10c      	bne.n	80064ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	43da      	mvns	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4013      	ands	r3, r2
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bf14      	ite	ne
 80064c6:	2301      	movne	r3, #1
 80064c8:	2300      	moveq	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	e00b      	b.n	80064e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	43da      	mvns	r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	4013      	ands	r3, r2
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bf14      	ite	ne
 80064e0:	2301      	movne	r3, #1
 80064e2:	2300      	moveq	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d016      	beq.n	8006518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006504:	f043 0220 	orr.w	r2, r3, #32
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e021      	b.n	800655c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	0c1b      	lsrs	r3, r3, #16
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b01      	cmp	r3, #1
 8006520:	d10c      	bne.n	800653c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	43da      	mvns	r2, r3
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4013      	ands	r3, r2
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	bf14      	ite	ne
 8006534:	2301      	movne	r3, #1
 8006536:	2300      	moveq	r3, #0
 8006538:	b2db      	uxtb	r3, r3
 800653a:	e00b      	b.n	8006554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	43da      	mvns	r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4013      	ands	r3, r2
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	bf14      	ite	ne
 800654e:	2301      	movne	r3, #1
 8006550:	2300      	moveq	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	f47f af6d 	bne.w	8006434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006570:	e034      	b.n	80065dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 f8e3 	bl	800673e <I2C_IsAcknowledgeFailed>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e034      	b.n	80065ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006588:	d028      	beq.n	80065dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800658a:	f7fc fbff 	bl	8002d8c <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	429a      	cmp	r2, r3
 8006598:	d302      	bcc.n	80065a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d11d      	bne.n	80065dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065aa:	2b80      	cmp	r3, #128	; 0x80
 80065ac:	d016      	beq.n	80065dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	f043 0220 	orr.w	r2, r3, #32
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e007      	b.n	80065ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e6:	2b80      	cmp	r3, #128	; 0x80
 80065e8:	d1c3      	bne.n	8006572 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006600:	e034      	b.n	800666c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f89b 	bl	800673e <I2C_IsAcknowledgeFailed>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e034      	b.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006618:	d028      	beq.n	800666c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661a:	f7fc fbb7 	bl	8002d8c <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	429a      	cmp	r2, r3
 8006628:	d302      	bcc.n	8006630 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d11d      	bne.n	800666c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	f003 0304 	and.w	r3, r3, #4
 800663a:	2b04      	cmp	r3, #4
 800663c:	d016      	beq.n	800666c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006658:	f043 0220 	orr.w	r2, r3, #32
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e007      	b.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b04      	cmp	r3, #4
 8006678:	d1c3      	bne.n	8006602 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006690:	e049      	b.n	8006726 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	f003 0310 	and.w	r3, r3, #16
 800669c:	2b10      	cmp	r3, #16
 800669e:	d119      	bne.n	80066d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f06f 0210 	mvn.w	r2, #16
 80066a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e030      	b.n	8006736 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d4:	f7fc fb5a 	bl	8002d8c <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d302      	bcc.n	80066ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d11d      	bne.n	8006726 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d016      	beq.n	8006726 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	f043 0220 	orr.w	r2, r3, #32
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e007      	b.n	8006736 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006730:	2b40      	cmp	r3, #64	; 0x40
 8006732:	d1ae      	bne.n	8006692 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006754:	d11b      	bne.n	800678e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800675e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f043 0204 	orr.w	r2, r3, #4
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e128      	b.n	8006a00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a90      	ldr	r2, [pc, #576]	; (8006a08 <HAL_I2S_Init+0x26c>)
 80067c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f927 	bl	8006a1c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80067e4:	f023 030f 	bic.w	r3, r3, #15
 80067e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2202      	movs	r2, #2
 80067f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d060      	beq.n	80068bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d102      	bne.n	8006808 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006802:	2310      	movs	r3, #16
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	e001      	b.n	800680c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006808:	2320      	movs	r3, #32
 800680a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	2b20      	cmp	r3, #32
 8006812:	d802      	bhi.n	800681a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800681a:	2001      	movs	r0, #1
 800681c:	f001 fbd2 	bl	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006820:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800682a:	d125      	bne.n	8006878 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d010      	beq.n	8006856 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	fbb2 f2f3 	udiv	r2, r2, r3
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	461a      	mov	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006850:	3305      	adds	r3, #5
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	e01f      	b.n	8006896 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	461a      	mov	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006872:	3305      	adds	r3, #5
 8006874:	613b      	str	r3, [r7, #16]
 8006876:	e00e      	b.n	8006896 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	461a      	mov	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006892:	3305      	adds	r3, #5
 8006894:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	4a5c      	ldr	r2, [pc, #368]	; (8006a0c <HAL_I2S_Init+0x270>)
 800689a:	fba2 2303 	umull	r2, r3, r2, r3
 800689e:	08db      	lsrs	r3, r3, #3
 80068a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	e003      	b.n	80068c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80068bc:	2302      	movs	r3, #2
 80068be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d902      	bls.n	80068d0 <HAL_I2S_Init+0x134>
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	2bff      	cmp	r3, #255	; 0xff
 80068ce:	d907      	bls.n	80068e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d4:	f043 0210 	orr.w	r2, r3, #16
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e08f      	b.n	8006a00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	ea42 0103 	orr.w	r1, r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80068fe:	f023 030f 	bic.w	r3, r3, #15
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6851      	ldr	r1, [r2, #4]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6892      	ldr	r2, [r2, #8]
 800690a:	4311      	orrs	r1, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	68d2      	ldr	r2, [r2, #12]
 8006910:	4311      	orrs	r1, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6992      	ldr	r2, [r2, #24]
 8006916:	430a      	orrs	r2, r1
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006922:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d161      	bne.n	80069f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a38      	ldr	r2, [pc, #224]	; (8006a10 <HAL_I2S_Init+0x274>)
 8006930:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a37      	ldr	r2, [pc, #220]	; (8006a14 <HAL_I2S_Init+0x278>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d101      	bne.n	8006940 <HAL_I2S_Init+0x1a4>
 800693c:	4b36      	ldr	r3, [pc, #216]	; (8006a18 <HAL_I2S_Init+0x27c>)
 800693e:	e001      	b.n	8006944 <HAL_I2S_Init+0x1a8>
 8006940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6812      	ldr	r2, [r2, #0]
 800694a:	4932      	ldr	r1, [pc, #200]	; (8006a14 <HAL_I2S_Init+0x278>)
 800694c:	428a      	cmp	r2, r1
 800694e:	d101      	bne.n	8006954 <HAL_I2S_Init+0x1b8>
 8006950:	4a31      	ldr	r2, [pc, #196]	; (8006a18 <HAL_I2S_Init+0x27c>)
 8006952:	e001      	b.n	8006958 <HAL_I2S_Init+0x1bc>
 8006954:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006958:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800695c:	f023 030f 	bic.w	r3, r3, #15
 8006960:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a2b      	ldr	r2, [pc, #172]	; (8006a14 <HAL_I2S_Init+0x278>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d101      	bne.n	8006970 <HAL_I2S_Init+0x1d4>
 800696c:	4b2a      	ldr	r3, [pc, #168]	; (8006a18 <HAL_I2S_Init+0x27c>)
 800696e:	e001      	b.n	8006974 <HAL_I2S_Init+0x1d8>
 8006970:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006974:	2202      	movs	r2, #2
 8006976:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a25      	ldr	r2, [pc, #148]	; (8006a14 <HAL_I2S_Init+0x278>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d101      	bne.n	8006986 <HAL_I2S_Init+0x1ea>
 8006982:	4b25      	ldr	r3, [pc, #148]	; (8006a18 <HAL_I2S_Init+0x27c>)
 8006984:	e001      	b.n	800698a <HAL_I2S_Init+0x1ee>
 8006986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006996:	d003      	beq.n	80069a0 <HAL_I2S_Init+0x204>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d103      	bne.n	80069a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80069a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	e001      	b.n	80069ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80069a8:	2300      	movs	r3, #0
 80069aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80069b6:	4313      	orrs	r3, r2
 80069b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80069c0:	4313      	orrs	r3, r2
 80069c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80069ca:	4313      	orrs	r3, r2
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	897b      	ldrh	r3, [r7, #10]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a0d      	ldr	r2, [pc, #52]	; (8006a14 <HAL_I2S_Init+0x278>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d101      	bne.n	80069e8 <HAL_I2S_Init+0x24c>
 80069e4:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <HAL_I2S_Init+0x27c>)
 80069e6:	e001      	b.n	80069ec <HAL_I2S_Init+0x250>
 80069e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069ec:	897a      	ldrh	r2, [r7, #10]
 80069ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3720      	adds	r7, #32
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	08006ed7 	.word	0x08006ed7
 8006a0c:	cccccccd 	.word	0xcccccccd
 8006a10:	08006fed 	.word	0x08006fed
 8006a14:	40003800 	.word	0x40003800
 8006a18:	40003400 	.word	0x40003400

08006a1c <HAL_I2S_MspInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_MspInit(I2S_HandleTypeDef *hi2s)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspInit could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d002      	beq.n	8006a4a <HAL_I2S_Transmit_DMA+0x1a>
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e08e      	b.n	8006b6c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_I2S_Transmit_DMA+0x2e>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e086      	b.n	8006b6c <HAL_I2S_Transmit_DMA+0x13c>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d005      	beq.n	8006a7e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	e076      	b.n	8006b6c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2203      	movs	r2, #3
 8006a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d002      	beq.n	8006aaa <HAL_I2S_Transmit_DMA+0x7a>
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b05      	cmp	r3, #5
 8006aa8:	d10a      	bne.n	8006ac0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006ab4:	88fb      	ldrh	r3, [r7, #6]
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006abe:	e005      	b.n	8006acc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	88fa      	ldrh	r2, [r7, #6]
 8006ac4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	88fa      	ldrh	r2, [r7, #6]
 8006aca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad0:	4a28      	ldr	r2, [pc, #160]	; (8006b74 <HAL_I2S_Transmit_DMA+0x144>)
 8006ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	4a27      	ldr	r2, [pc, #156]	; (8006b78 <HAL_I2S_Transmit_DMA+0x148>)
 8006ada:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	4a26      	ldr	r2, [pc, #152]	; (8006b7c <HAL_I2S_Transmit_DMA+0x14c>)
 8006ae2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006aec:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006af4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006afc:	f7fc fba0 	bl	8003240 <HAL_DMA_Start_IT>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00f      	beq.n	8006b26 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0a:	f043 0208 	orr.w	r2, r3, #8
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e022      	b.n	8006b6c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d107      	bne.n	8006b44 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	69da      	ldr	r2, [r3, #28]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b42:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d107      	bne.n	8006b62 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f042 0202 	orr.w	r2, r2, #2
 8006b60:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	08006d57 	.word	0x08006d57
 8006b78:	08006d15 	.word	0x08006d15
 8006b7c:	08006dd1 	.word	0x08006dd1

08006b80 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <HAL_I2S_Receive_DMA+0x1a>
 8006b94:	88fb      	ldrh	r3, [r7, #6]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e0a1      	b.n	8006ce2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d101      	bne.n	8006bae <HAL_I2S_Receive_DMA+0x2e>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e099      	b.n	8006ce2 <HAL_I2S_Receive_DMA+0x162>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d005      	beq.n	8006bce <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e089      	b.n	8006ce2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2204      	movs	r2, #4
 8006bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d002      	beq.n	8006bfa <HAL_I2S_Receive_DMA+0x7a>
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2b05      	cmp	r3, #5
 8006bf8:	d10a      	bne.n	8006c10 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8006bfa:	88fb      	ldrh	r3, [r7, #6]
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8006c04:	88fb      	ldrh	r3, [r7, #6]
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	865a      	strh	r2, [r3, #50]	; 0x32
 8006c0e:	e005      	b.n	8006c1c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	88fa      	ldrh	r2, [r7, #6]
 8006c14:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	88fa      	ldrh	r2, [r7, #6]
 8006c1a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c20:	4a32      	ldr	r2, [pc, #200]	; (8006cec <HAL_I2S_Receive_DMA+0x16c>)
 8006c22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c28:	4a31      	ldr	r2, [pc, #196]	; (8006cf0 <HAL_I2S_Receive_DMA+0x170>)
 8006c2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c30:	4a30      	ldr	r2, [pc, #192]	; (8006cf4 <HAL_I2S_Receive_DMA+0x174>)
 8006c32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c42:	d10a      	bne.n	8006c5a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006c44:	2300      	movs	r3, #0
 8006c46:	613b      	str	r3, [r7, #16]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	4619      	mov	r1, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006c70:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006c72:	f7fc fae5 	bl	8003240 <HAL_DMA_Start_IT>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00f      	beq.n	8006c9c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c80:	f043 0208 	orr.w	r2, r3, #8
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e022      	b.n	8006ce2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d107      	bne.n	8006cba <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cb8:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d107      	bne.n	8006cd8 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	08006db5 	.word	0x08006db5
 8006cf0:	08006d73 	.word	0x08006d73
 8006cf4:	08006dd1 	.word	0x08006dd1

08006cf8 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d06:	b2db      	uxtb	r3, r3
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10e      	bne.n	8006d48 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0202 	bic.w	r2, r2, #2
 8006d38:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7fb fb71 	bl	8002430 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006d4e:	bf00      	nop
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7fb fb75 	bl	8002454 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10e      	bne.n	8006da6 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0201 	bic.w	r2, r2, #1
 8006d96:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7fb fd6e 	bl	8002888 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006dac:	bf00      	nop
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7fb fd6a 	bl	800289c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0203 	bic.w	r2, r2, #3
 8006dec:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e06:	f043 0208 	orr.w	r2, r3, #8
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7fb ff04 	bl	8002c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	881a      	ldrh	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	1c9a      	adds	r2, r3, #2
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10e      	bne.n	8006e70 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e60:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fb fae0 	bl	8002430 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006e70:	bf00      	nop
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	b292      	uxth	r2, r2
 8006e8c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	1c9a      	adds	r2, r3, #2
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10e      	bne.n	8006ece <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ebe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7fb fcdd 	bl	8002888 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006ece:	bf00      	nop
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b086      	sub	sp, #24
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d13a      	bne.n	8006f68 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d109      	bne.n	8006f10 <I2S_IRQHandler+0x3a>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f06:	2b40      	cmp	r3, #64	; 0x40
 8006f08:	d102      	bne.n	8006f10 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff ffb4 	bl	8006e78 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f16:	2b40      	cmp	r3, #64	; 0x40
 8006f18:	d126      	bne.n	8006f68 <I2S_IRQHandler+0x92>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f003 0320 	and.w	r3, r3, #32
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d11f      	bne.n	8006f68 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f36:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006f38:	2300      	movs	r3, #0
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	613b      	str	r3, [r7, #16]
 8006f4c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5a:	f043 0202 	orr.w	r2, r3, #2
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fb fe5a 	bl	8002c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d136      	bne.n	8006fe2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d109      	bne.n	8006f92 <I2S_IRQHandler+0xbc>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f88:	2b80      	cmp	r3, #128	; 0x80
 8006f8a:	d102      	bne.n	8006f92 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff ff45 	bl	8006e1c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f003 0308 	and.w	r3, r3, #8
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d122      	bne.n	8006fe2 <I2S_IRQHandler+0x10c>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d11b      	bne.n	8006fe2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006fb8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd4:	f043 0204 	orr.w	r2, r3, #4
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7fb fe1d 	bl	8002c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fe2:	bf00      	nop
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a92      	ldr	r2, [pc, #584]	; (800724c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d101      	bne.n	800700a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007006:	4b92      	ldr	r3, [pc, #584]	; (8007250 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007008:	e001      	b.n	800700e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800700a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a8b      	ldr	r2, [pc, #556]	; (800724c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d101      	bne.n	8007028 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007024:	4b8a      	ldr	r3, [pc, #552]	; (8007250 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007026:	e001      	b.n	800702c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007028:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007038:	d004      	beq.n	8007044 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f040 8099 	bne.w	8007176 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b02      	cmp	r3, #2
 800704c:	d107      	bne.n	800705e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f925 	bl	80072a8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b01      	cmp	r3, #1
 8007066:	d107      	bne.n	8007078 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f9c8 	bl	8007408 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d13a      	bne.n	80070f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f003 0320 	and.w	r3, r3, #32
 8007088:	2b00      	cmp	r3, #0
 800708a:	d035      	beq.n	80070f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a6e      	ldr	r2, [pc, #440]	; (800724c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d101      	bne.n	800709a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007096:	4b6e      	ldr	r3, [pc, #440]	; (8007250 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007098:	e001      	b.n	800709e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800709a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4969      	ldr	r1, [pc, #420]	; (800724c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80070a6:	428b      	cmp	r3, r1
 80070a8:	d101      	bne.n	80070ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80070aa:	4b69      	ldr	r3, [pc, #420]	; (8007250 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80070ac:	e001      	b.n	80070b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80070ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80070b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ea:	f043 0202 	orr.w	r2, r3, #2
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fb fd92 	bl	8002c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b08      	cmp	r3, #8
 8007100:	f040 80c3 	bne.w	800728a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 80bd 	beq.w	800728a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800711e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a49      	ldr	r2, [pc, #292]	; (800724c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d101      	bne.n	800712e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800712a:	4b49      	ldr	r3, [pc, #292]	; (8007250 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800712c:	e001      	b.n	8007132 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800712e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4944      	ldr	r1, [pc, #272]	; (800724c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800713a:	428b      	cmp	r3, r1
 800713c:	d101      	bne.n	8007142 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800713e:	4b44      	ldr	r3, [pc, #272]	; (8007250 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007140:	e001      	b.n	8007146 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007142:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007146:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800714a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800714c:	2300      	movs	r3, #0
 800714e:	60bb      	str	r3, [r7, #8]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	60bb      	str	r3, [r7, #8]
 8007158:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007166:	f043 0204 	orr.w	r2, r3, #4
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fb fd54 	bl	8002c1c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007174:	e089      	b.n	800728a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b02      	cmp	r3, #2
 800717e:	d107      	bne.n	8007190 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f8be 	bl	800730c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b01      	cmp	r3, #1
 8007198:	d107      	bne.n	80071aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f8fd 	bl	80073a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b0:	2b40      	cmp	r3, #64	; 0x40
 80071b2:	d12f      	bne.n	8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f003 0320 	and.w	r3, r3, #32
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d02a      	beq.n	8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a1e      	ldr	r2, [pc, #120]	; (800724c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d101      	bne.n	80071dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80071d8:	4b1d      	ldr	r3, [pc, #116]	; (8007250 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80071da:	e001      	b.n	80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80071dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4919      	ldr	r1, [pc, #100]	; (800724c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071e8:	428b      	cmp	r3, r1
 80071ea:	d101      	bne.n	80071f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80071ec:	4b18      	ldr	r3, [pc, #96]	; (8007250 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80071ee:	e001      	b.n	80071f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80071f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007206:	f043 0202 	orr.w	r2, r3, #2
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7fb fd04 	bl	8002c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b08      	cmp	r3, #8
 800721c:	d136      	bne.n	800728c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d031      	beq.n	800728c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a07      	ldr	r2, [pc, #28]	; (800724c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d101      	bne.n	8007236 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007232:	4b07      	ldr	r3, [pc, #28]	; (8007250 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007234:	e001      	b.n	800723a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007236:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4902      	ldr	r1, [pc, #8]	; (800724c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007242:	428b      	cmp	r3, r1
 8007244:	d106      	bne.n	8007254 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007246:	4b02      	ldr	r3, [pc, #8]	; (8007250 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007248:	e006      	b.n	8007258 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800724a:	bf00      	nop
 800724c:	40003800 	.word	0x40003800
 8007250:	40003400 	.word	0x40003400
 8007254:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007258:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800725c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800726c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727a:	f043 0204 	orr.w	r2, r3, #4
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7fb fcca 	bl	8002c1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007288:	e000      	b.n	800728c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800728a:	bf00      	nop
}
 800728c:	bf00      	nop
 800728e:	3720      	adds	r7, #32
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	1c99      	adds	r1, r3, #2
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6251      	str	r1, [r2, #36]	; 0x24
 80072ba:	881a      	ldrh	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d113      	bne.n	8007302 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d106      	bne.n	8007302 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff ffc9 	bl	8007294 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	1c99      	adds	r1, r3, #2
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	6251      	str	r1, [r2, #36]	; 0x24
 800731e:	8819      	ldrh	r1, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a1d      	ldr	r2, [pc, #116]	; (800739c <I2SEx_TxISR_I2SExt+0x90>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d101      	bne.n	800732e <I2SEx_TxISR_I2SExt+0x22>
 800732a:	4b1d      	ldr	r3, [pc, #116]	; (80073a0 <I2SEx_TxISR_I2SExt+0x94>)
 800732c:	e001      	b.n	8007332 <I2SEx_TxISR_I2SExt+0x26>
 800732e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007332:	460a      	mov	r2, r1
 8007334:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007348:	b29b      	uxth	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d121      	bne.n	8007392 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a12      	ldr	r2, [pc, #72]	; (800739c <I2SEx_TxISR_I2SExt+0x90>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d101      	bne.n	800735c <I2SEx_TxISR_I2SExt+0x50>
 8007358:	4b11      	ldr	r3, [pc, #68]	; (80073a0 <I2SEx_TxISR_I2SExt+0x94>)
 800735a:	e001      	b.n	8007360 <I2SEx_TxISR_I2SExt+0x54>
 800735c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	490d      	ldr	r1, [pc, #52]	; (800739c <I2SEx_TxISR_I2SExt+0x90>)
 8007368:	428b      	cmp	r3, r1
 800736a:	d101      	bne.n	8007370 <I2SEx_TxISR_I2SExt+0x64>
 800736c:	4b0c      	ldr	r3, [pc, #48]	; (80073a0 <I2SEx_TxISR_I2SExt+0x94>)
 800736e:	e001      	b.n	8007374 <I2SEx_TxISR_I2SExt+0x68>
 8007370:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007374:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007378:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff ff81 	bl	8007294 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007392:	bf00      	nop
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	40003800 	.word	0x40003800
 80073a0:	40003400 	.word	0x40003400

080073a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68d8      	ldr	r0, [r3, #12]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b6:	1c99      	adds	r1, r3, #2
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	62d1      	str	r1, [r2, #44]	; 0x2c
 80073bc:	b282      	uxth	r2, r0
 80073be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d113      	bne.n	8007400 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80073e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff ff4a 	bl	8007294 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007400:	bf00      	nop
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a20      	ldr	r2, [pc, #128]	; (8007498 <I2SEx_RxISR_I2SExt+0x90>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d101      	bne.n	800741e <I2SEx_RxISR_I2SExt+0x16>
 800741a:	4b20      	ldr	r3, [pc, #128]	; (800749c <I2SEx_RxISR_I2SExt+0x94>)
 800741c:	e001      	b.n	8007422 <I2SEx_RxISR_I2SExt+0x1a>
 800741e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007422:	68d8      	ldr	r0, [r3, #12]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	1c99      	adds	r1, r3, #2
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800742e:	b282      	uxth	r2, r0
 8007430:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007436:	b29b      	uxth	r3, r3
 8007438:	3b01      	subs	r3, #1
 800743a:	b29a      	uxth	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d121      	bne.n	800748e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a12      	ldr	r2, [pc, #72]	; (8007498 <I2SEx_RxISR_I2SExt+0x90>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d101      	bne.n	8007458 <I2SEx_RxISR_I2SExt+0x50>
 8007454:	4b11      	ldr	r3, [pc, #68]	; (800749c <I2SEx_RxISR_I2SExt+0x94>)
 8007456:	e001      	b.n	800745c <I2SEx_RxISR_I2SExt+0x54>
 8007458:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	490d      	ldr	r1, [pc, #52]	; (8007498 <I2SEx_RxISR_I2SExt+0x90>)
 8007464:	428b      	cmp	r3, r1
 8007466:	d101      	bne.n	800746c <I2SEx_RxISR_I2SExt+0x64>
 8007468:	4b0c      	ldr	r3, [pc, #48]	; (800749c <I2SEx_RxISR_I2SExt+0x94>)
 800746a:	e001      	b.n	8007470 <I2SEx_RxISR_I2SExt+0x68>
 800746c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007470:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007474:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800747a:	b29b      	uxth	r3, r3
 800747c:	2b00      	cmp	r3, #0
 800747e:	d106      	bne.n	800748e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff ff03 	bl	8007294 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800748e:	bf00      	nop
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	40003800 	.word	0x40003800
 800749c:	40003400 	.word	0x40003400

080074a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e267      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d075      	beq.n	80075aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074be:	4b88      	ldr	r3, [pc, #544]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f003 030c 	and.w	r3, r3, #12
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d00c      	beq.n	80074e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074ca:	4b85      	ldr	r3, [pc, #532]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074d2:	2b08      	cmp	r3, #8
 80074d4:	d112      	bne.n	80074fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074d6:	4b82      	ldr	r3, [pc, #520]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074e2:	d10b      	bne.n	80074fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074e4:	4b7e      	ldr	r3, [pc, #504]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d05b      	beq.n	80075a8 <HAL_RCC_OscConfig+0x108>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d157      	bne.n	80075a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e242      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007504:	d106      	bne.n	8007514 <HAL_RCC_OscConfig+0x74>
 8007506:	4b76      	ldr	r3, [pc, #472]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a75      	ldr	r2, [pc, #468]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800750c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	e01d      	b.n	8007550 <HAL_RCC_OscConfig+0xb0>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800751c:	d10c      	bne.n	8007538 <HAL_RCC_OscConfig+0x98>
 800751e:	4b70      	ldr	r3, [pc, #448]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a6f      	ldr	r2, [pc, #444]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	4b6d      	ldr	r3, [pc, #436]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a6c      	ldr	r2, [pc, #432]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	e00b      	b.n	8007550 <HAL_RCC_OscConfig+0xb0>
 8007538:	4b69      	ldr	r3, [pc, #420]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a68      	ldr	r2, [pc, #416]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800753e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	4b66      	ldr	r3, [pc, #408]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a65      	ldr	r2, [pc, #404]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800754a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800754e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d013      	beq.n	8007580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007558:	f7fb fc18 	bl	8002d8c <HAL_GetTick>
 800755c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800755e:	e008      	b.n	8007572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007560:	f7fb fc14 	bl	8002d8c <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b64      	cmp	r3, #100	; 0x64
 800756c:	d901      	bls.n	8007572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e207      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007572:	4b5b      	ldr	r3, [pc, #364]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0f0      	beq.n	8007560 <HAL_RCC_OscConfig+0xc0>
 800757e:	e014      	b.n	80075aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007580:	f7fb fc04 	bl	8002d8c <HAL_GetTick>
 8007584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007586:	e008      	b.n	800759a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007588:	f7fb fc00 	bl	8002d8c <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b64      	cmp	r3, #100	; 0x64
 8007594:	d901      	bls.n	800759a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e1f3      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800759a:	4b51      	ldr	r3, [pc, #324]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1f0      	bne.n	8007588 <HAL_RCC_OscConfig+0xe8>
 80075a6:	e000      	b.n	80075aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d063      	beq.n	800767e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075b6:	4b4a      	ldr	r3, [pc, #296]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 030c 	and.w	r3, r3, #12
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00b      	beq.n	80075da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075c2:	4b47      	ldr	r3, [pc, #284]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075ca:	2b08      	cmp	r3, #8
 80075cc:	d11c      	bne.n	8007608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075ce:	4b44      	ldr	r3, [pc, #272]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d116      	bne.n	8007608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075da:	4b41      	ldr	r3, [pc, #260]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d005      	beq.n	80075f2 <HAL_RCC_OscConfig+0x152>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d001      	beq.n	80075f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e1c7      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075f2:	4b3b      	ldr	r3, [pc, #236]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	4937      	ldr	r1, [pc, #220]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007602:	4313      	orrs	r3, r2
 8007604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007606:	e03a      	b.n	800767e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d020      	beq.n	8007652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007610:	4b34      	ldr	r3, [pc, #208]	; (80076e4 <HAL_RCC_OscConfig+0x244>)
 8007612:	2201      	movs	r2, #1
 8007614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007616:	f7fb fbb9 	bl	8002d8c <HAL_GetTick>
 800761a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800761c:	e008      	b.n	8007630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800761e:	f7fb fbb5 	bl	8002d8c <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	2b02      	cmp	r3, #2
 800762a:	d901      	bls.n	8007630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e1a8      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007630:	4b2b      	ldr	r3, [pc, #172]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d0f0      	beq.n	800761e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800763c:	4b28      	ldr	r3, [pc, #160]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	4925      	ldr	r1, [pc, #148]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 800764c:	4313      	orrs	r3, r2
 800764e:	600b      	str	r3, [r1, #0]
 8007650:	e015      	b.n	800767e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007652:	4b24      	ldr	r3, [pc, #144]	; (80076e4 <HAL_RCC_OscConfig+0x244>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007658:	f7fb fb98 	bl	8002d8c <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800765e:	e008      	b.n	8007672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007660:	f7fb fb94 	bl	8002d8c <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d901      	bls.n	8007672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e187      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007672:	4b1b      	ldr	r3, [pc, #108]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f0      	bne.n	8007660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0308 	and.w	r3, r3, #8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d036      	beq.n	80076f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d016      	beq.n	80076c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007692:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <HAL_RCC_OscConfig+0x248>)
 8007694:	2201      	movs	r2, #1
 8007696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007698:	f7fb fb78 	bl	8002d8c <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076a0:	f7fb fb74 	bl	8002d8c <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e167      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076b2:	4b0b      	ldr	r3, [pc, #44]	; (80076e0 <HAL_RCC_OscConfig+0x240>)
 80076b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0f0      	beq.n	80076a0 <HAL_RCC_OscConfig+0x200>
 80076be:	e01b      	b.n	80076f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076c0:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <HAL_RCC_OscConfig+0x248>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076c6:	f7fb fb61 	bl	8002d8c <HAL_GetTick>
 80076ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076cc:	e00e      	b.n	80076ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076ce:	f7fb fb5d 	bl	8002d8c <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d907      	bls.n	80076ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e150      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
 80076e0:	40023800 	.word	0x40023800
 80076e4:	42470000 	.word	0x42470000
 80076e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076ec:	4b88      	ldr	r3, [pc, #544]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80076ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1ea      	bne.n	80076ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 8097 	beq.w	8007834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007706:	2300      	movs	r3, #0
 8007708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800770a:	4b81      	ldr	r3, [pc, #516]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10f      	bne.n	8007736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007716:	2300      	movs	r3, #0
 8007718:	60bb      	str	r3, [r7, #8]
 800771a:	4b7d      	ldr	r3, [pc, #500]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	4a7c      	ldr	r2, [pc, #496]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007724:	6413      	str	r3, [r2, #64]	; 0x40
 8007726:	4b7a      	ldr	r3, [pc, #488]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800772e:	60bb      	str	r3, [r7, #8]
 8007730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007732:	2301      	movs	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007736:	4b77      	ldr	r3, [pc, #476]	; (8007914 <HAL_RCC_OscConfig+0x474>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800773e:	2b00      	cmp	r3, #0
 8007740:	d118      	bne.n	8007774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007742:	4b74      	ldr	r3, [pc, #464]	; (8007914 <HAL_RCC_OscConfig+0x474>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a73      	ldr	r2, [pc, #460]	; (8007914 <HAL_RCC_OscConfig+0x474>)
 8007748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800774c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800774e:	f7fb fb1d 	bl	8002d8c <HAL_GetTick>
 8007752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007754:	e008      	b.n	8007768 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007756:	f7fb fb19 	bl	8002d8c <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e10c      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007768:	4b6a      	ldr	r3, [pc, #424]	; (8007914 <HAL_RCC_OscConfig+0x474>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0f0      	beq.n	8007756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d106      	bne.n	800778a <HAL_RCC_OscConfig+0x2ea>
 800777c:	4b64      	ldr	r3, [pc, #400]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 800777e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007780:	4a63      	ldr	r2, [pc, #396]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007782:	f043 0301 	orr.w	r3, r3, #1
 8007786:	6713      	str	r3, [r2, #112]	; 0x70
 8007788:	e01c      	b.n	80077c4 <HAL_RCC_OscConfig+0x324>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	2b05      	cmp	r3, #5
 8007790:	d10c      	bne.n	80077ac <HAL_RCC_OscConfig+0x30c>
 8007792:	4b5f      	ldr	r3, [pc, #380]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007796:	4a5e      	ldr	r2, [pc, #376]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007798:	f043 0304 	orr.w	r3, r3, #4
 800779c:	6713      	str	r3, [r2, #112]	; 0x70
 800779e:	4b5c      	ldr	r3, [pc, #368]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a2:	4a5b      	ldr	r2, [pc, #364]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077a4:	f043 0301 	orr.w	r3, r3, #1
 80077a8:	6713      	str	r3, [r2, #112]	; 0x70
 80077aa:	e00b      	b.n	80077c4 <HAL_RCC_OscConfig+0x324>
 80077ac:	4b58      	ldr	r3, [pc, #352]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b0:	4a57      	ldr	r2, [pc, #348]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077b2:	f023 0301 	bic.w	r3, r3, #1
 80077b6:	6713      	str	r3, [r2, #112]	; 0x70
 80077b8:	4b55      	ldr	r3, [pc, #340]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077bc:	4a54      	ldr	r2, [pc, #336]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077be:	f023 0304 	bic.w	r3, r3, #4
 80077c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077cc:	f7fb fade 	bl	8002d8c <HAL_GetTick>
 80077d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077d2:	e00a      	b.n	80077ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077d4:	f7fb fada 	bl	8002d8c <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e0cb      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077ea:	4b49      	ldr	r3, [pc, #292]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80077ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0ee      	beq.n	80077d4 <HAL_RCC_OscConfig+0x334>
 80077f6:	e014      	b.n	8007822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077f8:	f7fb fac8 	bl	8002d8c <HAL_GetTick>
 80077fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077fe:	e00a      	b.n	8007816 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007800:	f7fb fac4 	bl	8002d8c <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	f241 3288 	movw	r2, #5000	; 0x1388
 800780e:	4293      	cmp	r3, r2
 8007810:	d901      	bls.n	8007816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e0b5      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007816:	4b3e      	ldr	r3, [pc, #248]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1ee      	bne.n	8007800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d105      	bne.n	8007834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007828:	4b39      	ldr	r3, [pc, #228]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	4a38      	ldr	r2, [pc, #224]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 800782e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007832:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 80a1 	beq.w	8007980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800783e:	4b34      	ldr	r3, [pc, #208]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 030c 	and.w	r3, r3, #12
 8007846:	2b08      	cmp	r3, #8
 8007848:	d05c      	beq.n	8007904 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d141      	bne.n	80078d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007852:	4b31      	ldr	r3, [pc, #196]	; (8007918 <HAL_RCC_OscConfig+0x478>)
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007858:	f7fb fa98 	bl	8002d8c <HAL_GetTick>
 800785c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800785e:	e008      	b.n	8007872 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007860:	f7fb fa94 	bl	8002d8c <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e087      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007872:	4b27      	ldr	r3, [pc, #156]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f0      	bne.n	8007860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	69da      	ldr	r2, [r3, #28]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	019b      	lsls	r3, r3, #6
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007894:	085b      	lsrs	r3, r3, #1
 8007896:	3b01      	subs	r3, #1
 8007898:	041b      	lsls	r3, r3, #16
 800789a:	431a      	orrs	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	061b      	lsls	r3, r3, #24
 80078a2:	491b      	ldr	r1, [pc, #108]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078a8:	4b1b      	ldr	r3, [pc, #108]	; (8007918 <HAL_RCC_OscConfig+0x478>)
 80078aa:	2201      	movs	r2, #1
 80078ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ae:	f7fb fa6d 	bl	8002d8c <HAL_GetTick>
 80078b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078b4:	e008      	b.n	80078c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078b6:	f7fb fa69 	bl	8002d8c <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e05c      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078c8:	4b11      	ldr	r3, [pc, #68]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0f0      	beq.n	80078b6 <HAL_RCC_OscConfig+0x416>
 80078d4:	e054      	b.n	8007980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078d6:	4b10      	ldr	r3, [pc, #64]	; (8007918 <HAL_RCC_OscConfig+0x478>)
 80078d8:	2200      	movs	r2, #0
 80078da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078dc:	f7fb fa56 	bl	8002d8c <HAL_GetTick>
 80078e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078e2:	e008      	b.n	80078f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078e4:	f7fb fa52 	bl	8002d8c <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d901      	bls.n	80078f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e045      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078f6:	4b06      	ldr	r3, [pc, #24]	; (8007910 <HAL_RCC_OscConfig+0x470>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1f0      	bne.n	80078e4 <HAL_RCC_OscConfig+0x444>
 8007902:	e03d      	b.n	8007980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d107      	bne.n	800791c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e038      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
 8007910:	40023800 	.word	0x40023800
 8007914:	40007000 	.word	0x40007000
 8007918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800791c:	4b1b      	ldr	r3, [pc, #108]	; (800798c <HAL_RCC_OscConfig+0x4ec>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d028      	beq.n	800797c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007934:	429a      	cmp	r2, r3
 8007936:	d121      	bne.n	800797c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007942:	429a      	cmp	r2, r3
 8007944:	d11a      	bne.n	800797c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800794c:	4013      	ands	r3, r2
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007954:	4293      	cmp	r3, r2
 8007956:	d111      	bne.n	800797c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007962:	085b      	lsrs	r3, r3, #1
 8007964:	3b01      	subs	r3, #1
 8007966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007968:	429a      	cmp	r2, r3
 800796a:	d107      	bne.n	800797c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007978:	429a      	cmp	r2, r3
 800797a:	d001      	beq.n	8007980 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e000      	b.n	8007982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	40023800 	.word	0x40023800

08007990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e0cc      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079a4:	4b68      	ldr	r3, [pc, #416]	; (8007b48 <HAL_RCC_ClockConfig+0x1b8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d90c      	bls.n	80079cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079b2:	4b65      	ldr	r3, [pc, #404]	; (8007b48 <HAL_RCC_ClockConfig+0x1b8>)
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	b2d2      	uxtb	r2, r2
 80079b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ba:	4b63      	ldr	r3, [pc, #396]	; (8007b48 <HAL_RCC_ClockConfig+0x1b8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d001      	beq.n	80079cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e0b8      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d020      	beq.n	8007a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d005      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079e4:	4b59      	ldr	r3, [pc, #356]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	4a58      	ldr	r2, [pc, #352]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 80079ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0308 	and.w	r3, r3, #8
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079fc:	4b53      	ldr	r3, [pc, #332]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	4a52      	ldr	r2, [pc, #328]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a08:	4b50      	ldr	r3, [pc, #320]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	494d      	ldr	r1, [pc, #308]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d044      	beq.n	8007ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d107      	bne.n	8007a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a2e:	4b47      	ldr	r3, [pc, #284]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d119      	bne.n	8007a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e07f      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d003      	beq.n	8007a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d107      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a4e:	4b3f      	ldr	r3, [pc, #252]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d109      	bne.n	8007a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e06f      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a5e:	4b3b      	ldr	r3, [pc, #236]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e067      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a6e:	4b37      	ldr	r3, [pc, #220]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f023 0203 	bic.w	r2, r3, #3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	4934      	ldr	r1, [pc, #208]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a80:	f7fb f984 	bl	8002d8c <HAL_GetTick>
 8007a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a86:	e00a      	b.n	8007a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a88:	f7fb f980 	bl	8002d8c <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e04f      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a9e:	4b2b      	ldr	r3, [pc, #172]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f003 020c 	and.w	r2, r3, #12
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d1eb      	bne.n	8007a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ab0:	4b25      	ldr	r3, [pc, #148]	; (8007b48 <HAL_RCC_ClockConfig+0x1b8>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d20c      	bcs.n	8007ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007abe:	4b22      	ldr	r3, [pc, #136]	; (8007b48 <HAL_RCC_ClockConfig+0x1b8>)
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ac6:	4b20      	ldr	r3, [pc, #128]	; (8007b48 <HAL_RCC_ClockConfig+0x1b8>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d001      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e032      	b.n	8007b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d008      	beq.n	8007af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ae4:	4b19      	ldr	r3, [pc, #100]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	4916      	ldr	r1, [pc, #88]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0308 	and.w	r3, r3, #8
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b02:	4b12      	ldr	r3, [pc, #72]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	490e      	ldr	r1, [pc, #56]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b16:	f000 f821 	bl	8007b5c <HAL_RCC_GetSysClockFreq>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	4b0b      	ldr	r3, [pc, #44]	; (8007b4c <HAL_RCC_ClockConfig+0x1bc>)
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	091b      	lsrs	r3, r3, #4
 8007b22:	f003 030f 	and.w	r3, r3, #15
 8007b26:	490a      	ldr	r1, [pc, #40]	; (8007b50 <HAL_RCC_ClockConfig+0x1c0>)
 8007b28:	5ccb      	ldrb	r3, [r1, r3]
 8007b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b2e:	4a09      	ldr	r2, [pc, #36]	; (8007b54 <HAL_RCC_ClockConfig+0x1c4>)
 8007b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b32:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <HAL_RCC_ClockConfig+0x1c8>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fb f8e4 	bl	8002d04 <HAL_InitTick>

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	40023c00 	.word	0x40023c00
 8007b4c:	40023800 	.word	0x40023800
 8007b50:	0800c240 	.word	0x0800c240
 8007b54:	200000c4 	.word	0x200000c4
 8007b58:	200000c8 	.word	0x200000c8

08007b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b60:	b094      	sub	sp, #80	; 0x50
 8007b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	647b      	str	r3, [r7, #68]	; 0x44
 8007b68:	2300      	movs	r3, #0
 8007b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b74:	4b79      	ldr	r3, [pc, #484]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f003 030c 	and.w	r3, r3, #12
 8007b7c:	2b08      	cmp	r3, #8
 8007b7e:	d00d      	beq.n	8007b9c <HAL_RCC_GetSysClockFreq+0x40>
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	f200 80e1 	bhi.w	8007d48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <HAL_RCC_GetSysClockFreq+0x34>
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	d003      	beq.n	8007b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8007b8e:	e0db      	b.n	8007d48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b90:	4b73      	ldr	r3, [pc, #460]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007b94:	e0db      	b.n	8007d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b96:	4b73      	ldr	r3, [pc, #460]	; (8007d64 <HAL_RCC_GetSysClockFreq+0x208>)
 8007b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b9a:	e0d8      	b.n	8007d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b9c:	4b6f      	ldr	r3, [pc, #444]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ba4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ba6:	4b6d      	ldr	r3, [pc, #436]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d063      	beq.n	8007c7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bb2:	4b6a      	ldr	r3, [pc, #424]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	099b      	lsrs	r3, r3, #6
 8007bb8:	2200      	movs	r2, #0
 8007bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007bce:	4622      	mov	r2, r4
 8007bd0:	462b      	mov	r3, r5
 8007bd2:	f04f 0000 	mov.w	r0, #0
 8007bd6:	f04f 0100 	mov.w	r1, #0
 8007bda:	0159      	lsls	r1, r3, #5
 8007bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007be0:	0150      	lsls	r0, r2, #5
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	4621      	mov	r1, r4
 8007be8:	1a51      	subs	r1, r2, r1
 8007bea:	6139      	str	r1, [r7, #16]
 8007bec:	4629      	mov	r1, r5
 8007bee:	eb63 0301 	sbc.w	r3, r3, r1
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	f04f 0200 	mov.w	r2, #0
 8007bf8:	f04f 0300 	mov.w	r3, #0
 8007bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c00:	4659      	mov	r1, fp
 8007c02:	018b      	lsls	r3, r1, #6
 8007c04:	4651      	mov	r1, sl
 8007c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c0a:	4651      	mov	r1, sl
 8007c0c:	018a      	lsls	r2, r1, #6
 8007c0e:	4651      	mov	r1, sl
 8007c10:	ebb2 0801 	subs.w	r8, r2, r1
 8007c14:	4659      	mov	r1, fp
 8007c16:	eb63 0901 	sbc.w	r9, r3, r1
 8007c1a:	f04f 0200 	mov.w	r2, #0
 8007c1e:	f04f 0300 	mov.w	r3, #0
 8007c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c2e:	4690      	mov	r8, r2
 8007c30:	4699      	mov	r9, r3
 8007c32:	4623      	mov	r3, r4
 8007c34:	eb18 0303 	adds.w	r3, r8, r3
 8007c38:	60bb      	str	r3, [r7, #8]
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	eb49 0303 	adc.w	r3, r9, r3
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	f04f 0200 	mov.w	r2, #0
 8007c46:	f04f 0300 	mov.w	r3, #0
 8007c4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007c4e:	4629      	mov	r1, r5
 8007c50:	024b      	lsls	r3, r1, #9
 8007c52:	4621      	mov	r1, r4
 8007c54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007c58:	4621      	mov	r1, r4
 8007c5a:	024a      	lsls	r2, r1, #9
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c62:	2200      	movs	r2, #0
 8007c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c6c:	f7f8 faac 	bl	80001c8 <__aeabi_uldivmod>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4613      	mov	r3, r2
 8007c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c78:	e058      	b.n	8007d2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c7a:	4b38      	ldr	r3, [pc, #224]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	099b      	lsrs	r3, r3, #6
 8007c80:	2200      	movs	r2, #0
 8007c82:	4618      	mov	r0, r3
 8007c84:	4611      	mov	r1, r2
 8007c86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007c8a:	623b      	str	r3, [r7, #32]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007c94:	4642      	mov	r2, r8
 8007c96:	464b      	mov	r3, r9
 8007c98:	f04f 0000 	mov.w	r0, #0
 8007c9c:	f04f 0100 	mov.w	r1, #0
 8007ca0:	0159      	lsls	r1, r3, #5
 8007ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ca6:	0150      	lsls	r0, r2, #5
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4641      	mov	r1, r8
 8007cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007cb8:	f04f 0200 	mov.w	r2, #0
 8007cbc:	f04f 0300 	mov.w	r3, #0
 8007cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8007cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	f04f 0300 	mov.w	r3, #0
 8007cdc:	00eb      	lsls	r3, r5, #3
 8007cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ce2:	00e2      	lsls	r2, r4, #3
 8007ce4:	4614      	mov	r4, r2
 8007ce6:	461d      	mov	r5, r3
 8007ce8:	4643      	mov	r3, r8
 8007cea:	18e3      	adds	r3, r4, r3
 8007cec:	603b      	str	r3, [r7, #0]
 8007cee:	464b      	mov	r3, r9
 8007cf0:	eb45 0303 	adc.w	r3, r5, r3
 8007cf4:	607b      	str	r3, [r7, #4]
 8007cf6:	f04f 0200 	mov.w	r2, #0
 8007cfa:	f04f 0300 	mov.w	r3, #0
 8007cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d02:	4629      	mov	r1, r5
 8007d04:	028b      	lsls	r3, r1, #10
 8007d06:	4621      	mov	r1, r4
 8007d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d0c:	4621      	mov	r1, r4
 8007d0e:	028a      	lsls	r2, r1, #10
 8007d10:	4610      	mov	r0, r2
 8007d12:	4619      	mov	r1, r3
 8007d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d16:	2200      	movs	r2, #0
 8007d18:	61bb      	str	r3, [r7, #24]
 8007d1a:	61fa      	str	r2, [r7, #28]
 8007d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d20:	f7f8 fa52 	bl	80001c8 <__aeabi_uldivmod>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4613      	mov	r3, r2
 8007d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d2c:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	0c1b      	lsrs	r3, r3, #16
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	3301      	adds	r3, #1
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007d3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d46:	e002      	b.n	8007d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3750      	adds	r7, #80	; 0x50
 8007d54:	46bd      	mov	sp, r7
 8007d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d5a:	bf00      	nop
 8007d5c:	40023800 	.word	0x40023800
 8007d60:	00f42400 	.word	0x00f42400
 8007d64:	007a1200 	.word	0x007a1200

08007d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d6c:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	200000c4 	.word	0x200000c4

08007d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d84:	f7ff fff0 	bl	8007d68 <HAL_RCC_GetHCLKFreq>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	0a9b      	lsrs	r3, r3, #10
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	4903      	ldr	r1, [pc, #12]	; (8007da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d96:	5ccb      	ldrb	r3, [r1, r3]
 8007d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	40023800 	.word	0x40023800
 8007da4:	0800c250 	.word	0x0800c250

08007da8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d105      	bne.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d035      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007dd0:	4b62      	ldr	r3, [pc, #392]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007dd6:	f7fa ffd9 	bl	8002d8c <HAL_GetTick>
 8007dda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ddc:	e008      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007dde:	f7fa ffd5 	bl	8002d8c <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d901      	bls.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e0b0      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007df0:	4b5b      	ldr	r3, [pc, #364]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1f0      	bne.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	019a      	lsls	r2, r3, #6
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	071b      	lsls	r3, r3, #28
 8007e08:	4955      	ldr	r1, [pc, #340]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e10:	4b52      	ldr	r3, [pc, #328]	; (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e16:	f7fa ffb9 	bl	8002d8c <HAL_GetTick>
 8007e1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e1c:	e008      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007e1e:	f7fa ffb5 	bl	8002d8c <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e090      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e30:	4b4b      	ldr	r3, [pc, #300]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0f0      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 8083 	beq.w	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	4b44      	ldr	r3, [pc, #272]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	4a43      	ldr	r2, [pc, #268]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e58:	6413      	str	r3, [r2, #64]	; 0x40
 8007e5a:	4b41      	ldr	r3, [pc, #260]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007e66:	4b3f      	ldr	r3, [pc, #252]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a3e      	ldr	r2, [pc, #248]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e72:	f7fa ff8b 	bl	8002d8c <HAL_GetTick>
 8007e76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e78:	e008      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007e7a:	f7fa ff87 	bl	8002d8c <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d901      	bls.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e062      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e8c:	4b35      	ldr	r3, [pc, #212]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d0f0      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e98:	4b31      	ldr	r3, [pc, #196]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ea0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d02f      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d028      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007eb6:	4b2a      	ldr	r3, [pc, #168]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ebe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ec0:	4b29      	ldr	r3, [pc, #164]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ec6:	4b28      	ldr	r3, [pc, #160]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007ecc:	4a24      	ldr	r2, [pc, #144]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ed2:	4b23      	ldr	r3, [pc, #140]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d114      	bne.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007ede:	f7fa ff55 	bl	8002d8c <HAL_GetTick>
 8007ee2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ee4:	e00a      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ee6:	f7fa ff51 	bl	8002d8c <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d901      	bls.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e02a      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007efc:	4b18      	ldr	r3, [pc, #96]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0ee      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f14:	d10d      	bne.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007f16:	4b12      	ldr	r3, [pc, #72]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f2a:	490d      	ldr	r1, [pc, #52]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	608b      	str	r3, [r1, #8]
 8007f30:	e005      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007f32:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	4a0a      	ldr	r2, [pc, #40]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007f3c:	6093      	str	r3, [r2, #8]
 8007f3e:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f4a:	4905      	ldr	r1, [pc, #20]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	42470068 	.word	0x42470068
 8007f60:	40023800 	.word	0x40023800
 8007f64:	40007000 	.word	0x40007000
 8007f68:	42470e40 	.word	0x42470e40

08007f6c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2203      	movs	r2, #3
 8007f78:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007f7a:	4b11      	ldr	r3, [pc, #68]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f80:	099b      	lsrs	r3, r3, #6
 8007f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f8a:	4b0d      	ldr	r3, [pc, #52]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f90:	0f1b      	lsrs	r3, r3, #28
 8007f92:	f003 0207 	and.w	r2, r3, #7
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007f9a:	4b09      	ldr	r3, [pc, #36]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007fa2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007fa4:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007fb4:	bf00      	nop
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	40023800 	.word	0x40023800

08007fc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d13f      	bne.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007fe2:	4b24      	ldr	r3, [pc, #144]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d006      	beq.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ff8:	d12f      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ffa:	4b1f      	ldr	r3, [pc, #124]	; (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007ffc:	617b      	str	r3, [r7, #20]
          break;
 8007ffe:	e02f      	b.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008000:	4b1c      	ldr	r3, [pc, #112]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800800c:	d108      	bne.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800800e:	4b19      	ldr	r3, [pc, #100]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008016:	4a19      	ldr	r2, [pc, #100]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008018:	fbb2 f3f3 	udiv	r3, r2, r3
 800801c:	613b      	str	r3, [r7, #16]
 800801e:	e007      	b.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008020:	4b14      	ldr	r3, [pc, #80]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008028:	4a15      	ldr	r2, [pc, #84]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800802a:	fbb2 f3f3 	udiv	r3, r2, r3
 800802e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008030:	4b10      	ldr	r3, [pc, #64]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008036:	099b      	lsrs	r3, r3, #6
 8008038:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	fb02 f303 	mul.w	r3, r2, r3
 8008042:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008044:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800804a:	0f1b      	lsrs	r3, r3, #28
 800804c:	f003 0307 	and.w	r3, r3, #7
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	fbb2 f3f3 	udiv	r3, r2, r3
 8008056:	617b      	str	r3, [r7, #20]
          break;
 8008058:	e002      	b.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	617b      	str	r3, [r7, #20]
          break;
 800805e:	bf00      	nop
        }
      }
      break;
 8008060:	e000      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8008062:	bf00      	nop
    }
  }
  return frequency;
 8008064:	697b      	ldr	r3, [r7, #20]
}
 8008066:	4618      	mov	r0, r3
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	40023800 	.word	0x40023800
 8008078:	00bb8000 	.word	0x00bb8000
 800807c:	007a1200 	.word	0x007a1200
 8008080:	00f42400 	.word	0x00f42400

08008084 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e083      	b.n	800819e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	2b00      	cmp	r3, #0
 800809c:	d108      	bne.n	80080b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080a6:	d009      	beq.n	80080bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	61da      	str	r2, [r3, #28]
 80080ae:	e005      	b.n	80080bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f890 	bl	80081f6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2202      	movs	r2, #2
 80080da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80080fe:	431a      	orrs	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008108:	431a      	orrs	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	431a      	orrs	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008126:	431a      	orrs	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008130:	431a      	orrs	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813a:	ea42 0103 	orr.w	r1, r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008142:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	0c1b      	lsrs	r3, r3, #16
 8008154:	f003 0104 	and.w	r1, r3, #4
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	f003 0210 	and.w	r2, r3, #16
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008170:	d105      	bne.n	800817e <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	b292      	uxth	r2, r2
 800817c:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69da      	ldr	r2, [r3, #28]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800818c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e01a      	b.n	80081ee <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ce:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f81a 	bl	800820a <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80081fe:	bf00      	nop
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8008212:	bf00      	nop
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b08e      	sub	sp, #56	; 0x38
 8008222:	af02      	add	r7, sp, #8
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	60b9      	str	r1, [r7, #8]
 8008228:	607a      	str	r2, [r7, #4]
 800822a:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008230:	2301      	movs	r3, #1
 8008232:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <HAL_SPI_TransmitReceive+0x2a>
 8008244:	2302      	movs	r3, #2
 8008246:	e22c      	b.n	80086a2 <HAL_SPI_TransmitReceive+0x484>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008250:	f7fa fd9c 	bl	8002d8c <HAL_GetTick>
 8008254:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800825c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008266:	887b      	ldrh	r3, [r7, #2]
 8008268:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800826a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800826e:	2b01      	cmp	r3, #1
 8008270:	d00f      	beq.n	8008292 <HAL_SPI_TransmitReceive+0x74>
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008278:	d107      	bne.n	800828a <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d103      	bne.n	800828a <HAL_SPI_TransmitReceive+0x6c>
 8008282:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008286:	2b04      	cmp	r3, #4
 8008288:	d003      	beq.n	8008292 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 800828a:	2302      	movs	r3, #2
 800828c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008290:	e201      	b.n	8008696 <HAL_SPI_TransmitReceive+0x478>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <HAL_SPI_TransmitReceive+0x86>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <HAL_SPI_TransmitReceive+0x86>
 800829e:	887b      	ldrh	r3, [r7, #2]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d103      	bne.n	80082ac <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80082aa:	e1f4      	b.n	8008696 <HAL_SPI_TransmitReceive+0x478>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d003      	beq.n	80082c0 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2205      	movs	r2, #5
 80082bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	887a      	ldrh	r2, [r7, #2]
 80082d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	887a      	ldrh	r2, [r7, #2]
 80082d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	887a      	ldrh	r2, [r7, #2]
 80082e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	887a      	ldrh	r2, [r7, #2]
 80082e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082fe:	d10f      	bne.n	8008320 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800831e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832a:	2b40      	cmp	r3, #64	; 0x40
 800832c:	d007      	beq.n	800833e <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800833c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008346:	f040 80a2 	bne.w	800848e <HAL_SPI_TransmitReceive+0x270>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_SPI_TransmitReceive+0x13c>
 8008352:	8b7b      	ldrh	r3, [r7, #26]
 8008354:	2b01      	cmp	r3, #1
 8008356:	f040 808f 	bne.w	8008478 <HAL_SPI_TransmitReceive+0x25a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	881a      	ldrh	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836a:	1c9a      	adds	r2, r3, #2
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008374:	b29b      	uxth	r3, r3
 8008376:	3b01      	subs	r3, #1
 8008378:	b29a      	uxth	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	86da      	strh	r2, [r3, #54]	; 0x36

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008382:	b29b      	uxth	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d177      	bne.n	8008478 <HAL_SPI_TransmitReceive+0x25a>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008390:	d172      	bne.n	8008478 <HAL_SPI_TransmitReceive+0x25a>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083a0:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083a2:	e069      	b.n	8008478 <HAL_SPI_TransmitReceive+0x25a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d12d      	bne.n	800840e <HAL_SPI_TransmitReceive+0x1f0>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d028      	beq.n	800840e <HAL_SPI_TransmitReceive+0x1f0>
 80083bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d125      	bne.n	800840e <HAL_SPI_TransmitReceive+0x1f0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c6:	881a      	ldrh	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d2:	1c9a      	adds	r2, r3, #2
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083dc:	b29b      	uxth	r3, r3
 80083de:	3b01      	subs	r3, #1
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083e6:	2300      	movs	r3, #0
 80083e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10c      	bne.n	800840e <HAL_SPI_TransmitReceive+0x1f0>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083fc:	d107      	bne.n	800840e <HAL_SPI_TransmitReceive+0x1f0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800840c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b01      	cmp	r3, #1
 800841a:	d119      	bne.n	8008450 <HAL_SPI_TransmitReceive+0x232>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008420:	b29b      	uxth	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d014      	beq.n	8008450 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68da      	ldr	r2, [r3, #12]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008430:	b292      	uxth	r2, r2
 8008432:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008438:	1c9a      	adds	r2, r3, #2
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008442:	b29b      	uxth	r3, r3
 8008444:	3b01      	subs	r3, #1
 8008446:	b29a      	uxth	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800844c:	2301      	movs	r3, #1
 800844e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008450:	f7fa fc9c 	bl	8002d8c <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800845c:	429a      	cmp	r2, r3
 800845e:	d80b      	bhi.n	8008478 <HAL_SPI_TransmitReceive+0x25a>
 8008460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008466:	d007      	beq.n	8008478 <HAL_SPI_TransmitReceive+0x25a>
      {
        errorcode = HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008476:	e10e      	b.n	8008696 <HAL_SPI_TransmitReceive+0x478>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800847c:	b29b      	uxth	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d190      	bne.n	80083a4 <HAL_SPI_TransmitReceive+0x186>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008486:	b29b      	uxth	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d18b      	bne.n	80083a4 <HAL_SPI_TransmitReceive+0x186>
 800848c:	e0a5      	b.n	80085da <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_SPI_TransmitReceive+0x280>
 8008496:	8b7b      	ldrh	r3, [r7, #26]
 8008498:	2b01      	cmp	r3, #1
 800849a:	f040 8094 	bne.w	80085c6 <HAL_SPI_TransmitReceive+0x3a8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	330c      	adds	r3, #12
 80084a8:	7812      	ldrb	r2, [r2, #0]
 80084aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	3b01      	subs	r3, #1
 80084be:	b29a      	uxth	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	86da      	strh	r2, [r3, #54]	; 0x36

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d17b      	bne.n	80085c6 <HAL_SPI_TransmitReceive+0x3a8>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084d6:	d176      	bne.n	80085c6 <HAL_SPI_TransmitReceive+0x3a8>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084e6:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084e8:	e06d      	b.n	80085c6 <HAL_SPI_TransmitReceive+0x3a8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f003 0302 	and.w	r3, r3, #2
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d12e      	bne.n	8008556 <HAL_SPI_TransmitReceive+0x338>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d029      	beq.n	8008556 <HAL_SPI_TransmitReceive+0x338>
 8008502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008504:	2b01      	cmp	r3, #1
 8008506:	d126      	bne.n	8008556 <HAL_SPI_TransmitReceive+0x338>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	330c      	adds	r3, #12
 8008512:	7812      	ldrb	r2, [r2, #0]
 8008514:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008524:	b29b      	uxth	r3, r3
 8008526:	3b01      	subs	r3, #1
 8008528:	b29a      	uxth	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008536:	b29b      	uxth	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10c      	bne.n	8008556 <HAL_SPI_TransmitReceive+0x338>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008544:	d107      	bne.n	8008556 <HAL_SPI_TransmitReceive+0x338>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008554:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	2b01      	cmp	r3, #1
 8008562:	d119      	bne.n	8008598 <HAL_SPI_TransmitReceive+0x37a>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008568:	b29b      	uxth	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d014      	beq.n	8008598 <HAL_SPI_TransmitReceive+0x37a>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008578:	b2d2      	uxtb	r2, r2
 800857a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800858a:	b29b      	uxth	r3, r3
 800858c:	3b01      	subs	r3, #1
 800858e:	b29a      	uxth	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008594:	2301      	movs	r3, #1
 8008596:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008598:	f7fa fbf8 	bl	8002d8c <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d803      	bhi.n	80085b0 <HAL_SPI_TransmitReceive+0x392>
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ae:	d102      	bne.n	80085b6 <HAL_SPI_TransmitReceive+0x398>
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d107      	bne.n	80085c6 <HAL_SPI_TransmitReceive+0x3a8>
      {
        errorcode = HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80085c4:	e067      	b.n	8008696 <HAL_SPI_TransmitReceive+0x478>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d18c      	bne.n	80084ea <HAL_SPI_TransmitReceive+0x2cc>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d187      	bne.n	80084ea <HAL_SPI_TransmitReceive+0x2cc>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085e2:	d119      	bne.n	8008618 <HAL_SPI_TransmitReceive+0x3fa>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ea:	2201      	movs	r2, #1
 80085ec:	2101      	movs	r1, #1
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 f86a 	bl	80086c8 <SPI_WaitFlagStateUntilTimeout>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d009      	beq.n	800860e <HAL_SPI_TransmitReceive+0x3f0>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fe:	f043 0202 	orr.w	r2, r3, #2
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 800860c:	e043      	b.n	8008696 <HAL_SPI_TransmitReceive+0x478>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8008616:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 0310 	and.w	r3, r3, #16
 8008622:	2b10      	cmp	r3, #16
 8008624:	d10d      	bne.n	8008642 <HAL_SPI_TransmitReceive+0x424>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800862a:	f043 0202 	orr.w	r2, r3, #2
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800863a:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f8c6 	bl	80087d8 <SPI_EndRxTxTransaction>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d006      	beq.n	8008660 <HAL_SPI_TransmitReceive+0x442>
  {
    errorcode = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2220      	movs	r2, #32
 800865c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800865e:	e01a      	b.n	8008696 <HAL_SPI_TransmitReceive+0x478>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10a      	bne.n	800867e <HAL_SPI_TransmitReceive+0x460>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008668:	2300      	movs	r3, #0
 800866a:	613b      	str	r3, [r7, #16]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	613b      	str	r3, [r7, #16]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	613b      	str	r3, [r7, #16]
 800867c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <HAL_SPI_TransmitReceive+0x470>
  {
    errorcode = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800868c:	e003      	b.n	8008696 <HAL_SPI_TransmitReceive+0x478>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800869e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3730      	adds	r7, #48	; 0x30
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b083      	sub	sp, #12
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086b8:	b2db      	uxtb	r3, r3
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
	...

080086c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b088      	sub	sp, #32
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	603b      	str	r3, [r7, #0]
 80086d4:	4613      	mov	r3, r2
 80086d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086d8:	f7fa fb58 	bl	8002d8c <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	1a9b      	subs	r3, r3, r2
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	4413      	add	r3, r2
 80086e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086e8:	f7fa fb50 	bl	8002d8c <HAL_GetTick>
 80086ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086ee:	4b39      	ldr	r3, [pc, #228]	; (80087d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	015b      	lsls	r3, r3, #5
 80086f4:	0d1b      	lsrs	r3, r3, #20
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	fb02 f303 	mul.w	r3, r2, r3
 80086fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086fe:	e054      	b.n	80087aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008706:	d050      	beq.n	80087aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008708:	f7fa fb40 	bl	8002d8c <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	69fa      	ldr	r2, [r7, #28]
 8008714:	429a      	cmp	r2, r3
 8008716:	d902      	bls.n	800871e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d13d      	bne.n	800879a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800872c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008736:	d111      	bne.n	800875c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008740:	d004      	beq.n	800874c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800874a:	d107      	bne.n	800875c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800875a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008764:	d10f      	bne.n	8008786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e017      	b.n	80087ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689a      	ldr	r2, [r3, #8]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	4013      	ands	r3, r2
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	bf0c      	ite	eq
 80087ba:	2301      	moveq	r3, #1
 80087bc:	2300      	movne	r3, #0
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	461a      	mov	r2, r3
 80087c2:	79fb      	ldrb	r3, [r7, #7]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d19b      	bne.n	8008700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3720      	adds	r7, #32
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	200000c4 	.word	0x200000c4

080087d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b088      	sub	sp, #32
 80087dc:	af02      	add	r7, sp, #8
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2201      	movs	r2, #1
 80087ec:	2102      	movs	r1, #2
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f7ff ff6a 	bl	80086c8 <SPI_WaitFlagStateUntilTimeout>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d007      	beq.n	800880a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fe:	f043 0220 	orr.w	r2, r3, #32
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e032      	b.n	8008870 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800880a:	4b1b      	ldr	r3, [pc, #108]	; (8008878 <SPI_EndRxTxTransaction+0xa0>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a1b      	ldr	r2, [pc, #108]	; (800887c <SPI_EndRxTxTransaction+0xa4>)
 8008810:	fba2 2303 	umull	r2, r3, r2, r3
 8008814:	0d5b      	lsrs	r3, r3, #21
 8008816:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800881a:	fb02 f303 	mul.w	r3, r2, r3
 800881e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008828:	d112      	bne.n	8008850 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2200      	movs	r2, #0
 8008832:	2180      	movs	r1, #128	; 0x80
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f7ff ff47 	bl	80086c8 <SPI_WaitFlagStateUntilTimeout>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d016      	beq.n	800886e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008844:	f043 0220 	orr.w	r2, r3, #32
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e00f      	b.n	8008870 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	3b01      	subs	r3, #1
 800885a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008866:	2b80      	cmp	r3, #128	; 0x80
 8008868:	d0f2      	beq.n	8008850 <SPI_EndRxTxTransaction+0x78>
 800886a:	e000      	b.n	800886e <SPI_EndRxTxTransaction+0x96>
        break;
 800886c:	bf00      	nop
  }

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	200000c4 	.word	0x200000c4
 800887c:	165e9f81 	.word	0x165e9f81

08008880 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e041      	b.n	8008916 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d106      	bne.n	80088ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f839 	bl	800891e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3304      	adds	r3, #4
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	f000 fb06 	bl	8008ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800891e:	b480      	push	{r7}
 8008920:	b083      	sub	sp, #12
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
	...

08008934 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d109      	bne.n	800895c <HAL_TIM_OC_Start_IT+0x28>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b01      	cmp	r3, #1
 8008952:	bf14      	ite	ne
 8008954:	2301      	movne	r3, #1
 8008956:	2300      	moveq	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	e022      	b.n	80089a2 <HAL_TIM_OC_Start_IT+0x6e>
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b04      	cmp	r3, #4
 8008960:	d109      	bne.n	8008976 <HAL_TIM_OC_Start_IT+0x42>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b01      	cmp	r3, #1
 800896c:	bf14      	ite	ne
 800896e:	2301      	movne	r3, #1
 8008970:	2300      	moveq	r3, #0
 8008972:	b2db      	uxtb	r3, r3
 8008974:	e015      	b.n	80089a2 <HAL_TIM_OC_Start_IT+0x6e>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b08      	cmp	r3, #8
 800897a:	d109      	bne.n	8008990 <HAL_TIM_OC_Start_IT+0x5c>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b01      	cmp	r3, #1
 8008986:	bf14      	ite	ne
 8008988:	2301      	movne	r3, #1
 800898a:	2300      	moveq	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	e008      	b.n	80089a2 <HAL_TIM_OC_Start_IT+0x6e>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b01      	cmp	r3, #1
 800899a:	bf14      	ite	ne
 800899c:	2301      	movne	r3, #1
 800899e:	2300      	moveq	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e0c7      	b.n	8008b3a <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d104      	bne.n	80089ba <HAL_TIM_OC_Start_IT+0x86>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2202      	movs	r2, #2
 80089b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089b8:	e013      	b.n	80089e2 <HAL_TIM_OC_Start_IT+0xae>
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b04      	cmp	r3, #4
 80089be:	d104      	bne.n	80089ca <HAL_TIM_OC_Start_IT+0x96>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089c8:	e00b      	b.n	80089e2 <HAL_TIM_OC_Start_IT+0xae>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b08      	cmp	r3, #8
 80089ce:	d104      	bne.n	80089da <HAL_TIM_OC_Start_IT+0xa6>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089d8:	e003      	b.n	80089e2 <HAL_TIM_OC_Start_IT+0xae>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2202      	movs	r2, #2
 80089de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b0c      	cmp	r3, #12
 80089e6:	d841      	bhi.n	8008a6c <HAL_TIM_OC_Start_IT+0x138>
 80089e8:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <HAL_TIM_OC_Start_IT+0xbc>)
 80089ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ee:	bf00      	nop
 80089f0:	08008a25 	.word	0x08008a25
 80089f4:	08008a6d 	.word	0x08008a6d
 80089f8:	08008a6d 	.word	0x08008a6d
 80089fc:	08008a6d 	.word	0x08008a6d
 8008a00:	08008a37 	.word	0x08008a37
 8008a04:	08008a6d 	.word	0x08008a6d
 8008a08:	08008a6d 	.word	0x08008a6d
 8008a0c:	08008a6d 	.word	0x08008a6d
 8008a10:	08008a49 	.word	0x08008a49
 8008a14:	08008a6d 	.word	0x08008a6d
 8008a18:	08008a6d 	.word	0x08008a6d
 8008a1c:	08008a6d 	.word	0x08008a6d
 8008a20:	08008a5b 	.word	0x08008a5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68da      	ldr	r2, [r3, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f042 0202 	orr.w	r2, r2, #2
 8008a32:	60da      	str	r2, [r3, #12]
      break;
 8008a34:	e01d      	b.n	8008a72 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f042 0204 	orr.w	r2, r2, #4
 8008a44:	60da      	str	r2, [r3, #12]
      break;
 8008a46:	e014      	b.n	8008a72 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f042 0208 	orr.w	r2, r2, #8
 8008a56:	60da      	str	r2, [r3, #12]
      break;
 8008a58:	e00b      	b.n	8008a72 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f042 0210 	orr.w	r2, r2, #16
 8008a68:	60da      	str	r2, [r3, #12]
      break;
 8008a6a:	e002      	b.n	8008a72 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a70:	bf00      	nop
  }

  if (status == HAL_OK)
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d15f      	bne.n	8008b38 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fc81 	bl	8009388 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a2e      	ldr	r2, [pc, #184]	; (8008b44 <HAL_TIM_OC_Start_IT+0x210>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d004      	beq.n	8008a9a <HAL_TIM_OC_Start_IT+0x166>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a2c      	ldr	r2, [pc, #176]	; (8008b48 <HAL_TIM_OC_Start_IT+0x214>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d101      	bne.n	8008a9e <HAL_TIM_OC_Start_IT+0x16a>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e000      	b.n	8008aa0 <HAL_TIM_OC_Start_IT+0x16c>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d007      	beq.n	8008ab4 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ab2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a22      	ldr	r2, [pc, #136]	; (8008b44 <HAL_TIM_OC_Start_IT+0x210>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d022      	beq.n	8008b04 <HAL_TIM_OC_Start_IT+0x1d0>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac6:	d01d      	beq.n	8008b04 <HAL_TIM_OC_Start_IT+0x1d0>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1f      	ldr	r2, [pc, #124]	; (8008b4c <HAL_TIM_OC_Start_IT+0x218>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d018      	beq.n	8008b04 <HAL_TIM_OC_Start_IT+0x1d0>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a1e      	ldr	r2, [pc, #120]	; (8008b50 <HAL_TIM_OC_Start_IT+0x21c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d013      	beq.n	8008b04 <HAL_TIM_OC_Start_IT+0x1d0>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a1c      	ldr	r2, [pc, #112]	; (8008b54 <HAL_TIM_OC_Start_IT+0x220>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d00e      	beq.n	8008b04 <HAL_TIM_OC_Start_IT+0x1d0>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a17      	ldr	r2, [pc, #92]	; (8008b48 <HAL_TIM_OC_Start_IT+0x214>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d009      	beq.n	8008b04 <HAL_TIM_OC_Start_IT+0x1d0>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a18      	ldr	r2, [pc, #96]	; (8008b58 <HAL_TIM_OC_Start_IT+0x224>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d004      	beq.n	8008b04 <HAL_TIM_OC_Start_IT+0x1d0>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a17      	ldr	r2, [pc, #92]	; (8008b5c <HAL_TIM_OC_Start_IT+0x228>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d111      	bne.n	8008b28 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f003 0307 	and.w	r3, r3, #7
 8008b0e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2b06      	cmp	r3, #6
 8008b14:	d010      	beq.n	8008b38 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f042 0201 	orr.w	r2, r2, #1
 8008b24:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b26:	e007      	b.n	8008b38 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0201 	orr.w	r2, r2, #1
 8008b36:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	40010000 	.word	0x40010000
 8008b48:	40010400 	.word	0x40010400
 8008b4c:	40000400 	.word	0x40000400
 8008b50:	40000800 	.word	0x40000800
 8008b54:	40000c00 	.word	0x40000c00
 8008b58:	40014000 	.word	0x40014000
 8008b5c:	40001800 	.word	0x40001800

08008b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f003 0302 	and.w	r3, r3, #2
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d020      	beq.n	8008bc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01b      	beq.n	8008bc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f06f 0202 	mvn.w	r2, #2
 8008b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f972 	bl	8008e94 <HAL_TIM_IC_CaptureCallback>
 8008bb0:	e005      	b.n	8008bbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7f7 fdfa 	bl	80007ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f975 	bl	8008ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f003 0304 	and.w	r3, r3, #4
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d020      	beq.n	8008c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d01b      	beq.n	8008c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f06f 0204 	mvn.w	r2, #4
 8008be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2202      	movs	r2, #2
 8008be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f94c 	bl	8008e94 <HAL_TIM_IC_CaptureCallback>
 8008bfc:	e005      	b.n	8008c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7f7 fdd4 	bl	80007ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f94f 	bl	8008ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f003 0308 	and.w	r3, r3, #8
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d020      	beq.n	8008c5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f003 0308 	and.w	r3, r3, #8
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01b      	beq.n	8008c5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f06f 0208 	mvn.w	r2, #8
 8008c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2204      	movs	r2, #4
 8008c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f926 	bl	8008e94 <HAL_TIM_IC_CaptureCallback>
 8008c48:	e005      	b.n	8008c56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7f7 fdae 	bl	80007ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f929 	bl	8008ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	f003 0310 	and.w	r3, r3, #16
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d020      	beq.n	8008ca8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f003 0310 	and.w	r3, r3, #16
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d01b      	beq.n	8008ca8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f06f 0210 	mvn.w	r2, #16
 8008c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2208      	movs	r2, #8
 8008c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f900 	bl	8008e94 <HAL_TIM_IC_CaptureCallback>
 8008c94:	e005      	b.n	8008ca2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7f7 fd88 	bl	80007ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f903 	bl	8008ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00c      	beq.n	8008ccc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d007      	beq.n	8008ccc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f06f 0201 	mvn.w	r2, #1
 8008cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f8da 	bl	8008e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00c      	beq.n	8008cf0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d007      	beq.n	8008cf0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fb7b 	bl	80093e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00c      	beq.n	8008d14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d007      	beq.n	8008d14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f8d4 	bl	8008ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f003 0320 	and.w	r3, r3, #32
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00c      	beq.n	8008d38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f003 0320 	and.w	r3, r3, #32
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d007      	beq.n	8008d38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f06f 0220 	mvn.w	r2, #32
 8008d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fb4d 	bl	80093d2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d38:	bf00      	nop
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d101      	bne.n	8008d5e <HAL_TIM_OC_ConfigChannel+0x1e>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e048      	b.n	8008df0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b0c      	cmp	r3, #12
 8008d6a:	d839      	bhi.n	8008de0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008d6c:	a201      	add	r2, pc, #4	; (adr r2, 8008d74 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d72:	bf00      	nop
 8008d74:	08008da9 	.word	0x08008da9
 8008d78:	08008de1 	.word	0x08008de1
 8008d7c:	08008de1 	.word	0x08008de1
 8008d80:	08008de1 	.word	0x08008de1
 8008d84:	08008db7 	.word	0x08008db7
 8008d88:	08008de1 	.word	0x08008de1
 8008d8c:	08008de1 	.word	0x08008de1
 8008d90:	08008de1 	.word	0x08008de1
 8008d94:	08008dc5 	.word	0x08008dc5
 8008d98:	08008de1 	.word	0x08008de1
 8008d9c:	08008de1 	.word	0x08008de1
 8008da0:	08008de1 	.word	0x08008de1
 8008da4:	08008dd3 	.word	0x08008dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68b9      	ldr	r1, [r7, #8]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 f93a 	bl	8009028 <TIM_OC1_SetConfig>
      break;
 8008db4:	e017      	b.n	8008de6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 f9a3 	bl	8009108 <TIM_OC2_SetConfig>
      break;
 8008dc2:	e010      	b.n	8008de6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68b9      	ldr	r1, [r7, #8]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 fa12 	bl	80091f4 <TIM_OC3_SetConfig>
      break;
 8008dd0:	e009      	b.n	8008de6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68b9      	ldr	r1, [r7, #8]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 fa7f 	bl	80092dc <TIM_OC4_SetConfig>
      break;
 8008dde:	e002      	b.n	8008de6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	75fb      	strb	r3, [r7, #23]
      break;
 8008de4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b0c      	cmp	r3, #12
 8008e0a:	d831      	bhi.n	8008e70 <HAL_TIM_ReadCapturedValue+0x78>
 8008e0c:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008e49 	.word	0x08008e49
 8008e18:	08008e71 	.word	0x08008e71
 8008e1c:	08008e71 	.word	0x08008e71
 8008e20:	08008e71 	.word	0x08008e71
 8008e24:	08008e53 	.word	0x08008e53
 8008e28:	08008e71 	.word	0x08008e71
 8008e2c:	08008e71 	.word	0x08008e71
 8008e30:	08008e71 	.word	0x08008e71
 8008e34:	08008e5d 	.word	0x08008e5d
 8008e38:	08008e71 	.word	0x08008e71
 8008e3c:	08008e71 	.word	0x08008e71
 8008e40:	08008e71 	.word	0x08008e71
 8008e44:	08008e67 	.word	0x08008e67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4e:	60fb      	str	r3, [r7, #12]

      break;
 8008e50:	e00f      	b.n	8008e72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e58:	60fb      	str	r3, [r7, #12]

      break;
 8008e5a:	e00a      	b.n	8008e72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e62:	60fb      	str	r3, [r7, #12]

      break;
 8008e64:	e005      	b.n	8008e72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6c:	60fb      	str	r3, [r7, #12]

      break;
 8008e6e:	e000      	b.n	8008e72 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008e70:	bf00      	nop
  }

  return tmpreg;
 8008e72:	68fb      	ldr	r3, [r7, #12]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e88:	bf00      	nop
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a46      	ldr	r2, [pc, #280]	; (8008ffc <TIM_Base_SetConfig+0x12c>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d013      	beq.n	8008f10 <TIM_Base_SetConfig+0x40>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eee:	d00f      	beq.n	8008f10 <TIM_Base_SetConfig+0x40>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a43      	ldr	r2, [pc, #268]	; (8009000 <TIM_Base_SetConfig+0x130>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d00b      	beq.n	8008f10 <TIM_Base_SetConfig+0x40>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a42      	ldr	r2, [pc, #264]	; (8009004 <TIM_Base_SetConfig+0x134>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d007      	beq.n	8008f10 <TIM_Base_SetConfig+0x40>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a41      	ldr	r2, [pc, #260]	; (8009008 <TIM_Base_SetConfig+0x138>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d003      	beq.n	8008f10 <TIM_Base_SetConfig+0x40>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a40      	ldr	r2, [pc, #256]	; (800900c <TIM_Base_SetConfig+0x13c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d108      	bne.n	8008f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a35      	ldr	r2, [pc, #212]	; (8008ffc <TIM_Base_SetConfig+0x12c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d02b      	beq.n	8008f82 <TIM_Base_SetConfig+0xb2>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f30:	d027      	beq.n	8008f82 <TIM_Base_SetConfig+0xb2>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a32      	ldr	r2, [pc, #200]	; (8009000 <TIM_Base_SetConfig+0x130>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d023      	beq.n	8008f82 <TIM_Base_SetConfig+0xb2>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a31      	ldr	r2, [pc, #196]	; (8009004 <TIM_Base_SetConfig+0x134>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d01f      	beq.n	8008f82 <TIM_Base_SetConfig+0xb2>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a30      	ldr	r2, [pc, #192]	; (8009008 <TIM_Base_SetConfig+0x138>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d01b      	beq.n	8008f82 <TIM_Base_SetConfig+0xb2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a2f      	ldr	r2, [pc, #188]	; (800900c <TIM_Base_SetConfig+0x13c>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d017      	beq.n	8008f82 <TIM_Base_SetConfig+0xb2>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a2e      	ldr	r2, [pc, #184]	; (8009010 <TIM_Base_SetConfig+0x140>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d013      	beq.n	8008f82 <TIM_Base_SetConfig+0xb2>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a2d      	ldr	r2, [pc, #180]	; (8009014 <TIM_Base_SetConfig+0x144>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00f      	beq.n	8008f82 <TIM_Base_SetConfig+0xb2>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a2c      	ldr	r2, [pc, #176]	; (8009018 <TIM_Base_SetConfig+0x148>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d00b      	beq.n	8008f82 <TIM_Base_SetConfig+0xb2>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a2b      	ldr	r2, [pc, #172]	; (800901c <TIM_Base_SetConfig+0x14c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d007      	beq.n	8008f82 <TIM_Base_SetConfig+0xb2>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a2a      	ldr	r2, [pc, #168]	; (8009020 <TIM_Base_SetConfig+0x150>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d003      	beq.n	8008f82 <TIM_Base_SetConfig+0xb2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a29      	ldr	r2, [pc, #164]	; (8009024 <TIM_Base_SetConfig+0x154>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d108      	bne.n	8008f94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	689a      	ldr	r2, [r3, #8]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a10      	ldr	r2, [pc, #64]	; (8008ffc <TIM_Base_SetConfig+0x12c>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d003      	beq.n	8008fc8 <TIM_Base_SetConfig+0xf8>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a12      	ldr	r2, [pc, #72]	; (800900c <TIM_Base_SetConfig+0x13c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d103      	bne.n	8008fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	691a      	ldr	r2, [r3, #16]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d105      	bne.n	8008fee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	f023 0201 	bic.w	r2, r3, #1
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	611a      	str	r2, [r3, #16]
  }
}
 8008fee:	bf00      	nop
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	40010000 	.word	0x40010000
 8009000:	40000400 	.word	0x40000400
 8009004:	40000800 	.word	0x40000800
 8009008:	40000c00 	.word	0x40000c00
 800900c:	40010400 	.word	0x40010400
 8009010:	40014000 	.word	0x40014000
 8009014:	40014400 	.word	0x40014400
 8009018:	40014800 	.word	0x40014800
 800901c:	40001800 	.word	0x40001800
 8009020:	40001c00 	.word	0x40001c00
 8009024:	40002000 	.word	0x40002000

08009028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009028:	b480      	push	{r7}
 800902a:	b087      	sub	sp, #28
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	f023 0201 	bic.w	r2, r3, #1
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0303 	bic.w	r3, r3, #3
 800905e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f023 0302 	bic.w	r3, r3, #2
 8009070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	4313      	orrs	r3, r2
 800907a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a20      	ldr	r2, [pc, #128]	; (8009100 <TIM_OC1_SetConfig+0xd8>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d003      	beq.n	800908c <TIM_OC1_SetConfig+0x64>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a1f      	ldr	r2, [pc, #124]	; (8009104 <TIM_OC1_SetConfig+0xdc>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d10c      	bne.n	80090a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f023 0308 	bic.w	r3, r3, #8
 8009092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	4313      	orrs	r3, r2
 800909c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f023 0304 	bic.w	r3, r3, #4
 80090a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a15      	ldr	r2, [pc, #84]	; (8009100 <TIM_OC1_SetConfig+0xd8>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d003      	beq.n	80090b6 <TIM_OC1_SetConfig+0x8e>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a14      	ldr	r2, [pc, #80]	; (8009104 <TIM_OC1_SetConfig+0xdc>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d111      	bne.n	80090da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	685a      	ldr	r2, [r3, #4]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	697a      	ldr	r2, [r7, #20]
 80090f2:	621a      	str	r2, [r3, #32]
}
 80090f4:	bf00      	nop
 80090f6:	371c      	adds	r7, #28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	40010000 	.word	0x40010000
 8009104:	40010400 	.word	0x40010400

08009108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	f023 0210 	bic.w	r2, r3, #16
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800913e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	021b      	lsls	r3, r3, #8
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	4313      	orrs	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f023 0320 	bic.w	r3, r3, #32
 8009152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	011b      	lsls	r3, r3, #4
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	4313      	orrs	r3, r2
 800915e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a22      	ldr	r2, [pc, #136]	; (80091ec <TIM_OC2_SetConfig+0xe4>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d003      	beq.n	8009170 <TIM_OC2_SetConfig+0x68>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a21      	ldr	r2, [pc, #132]	; (80091f0 <TIM_OC2_SetConfig+0xe8>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d10d      	bne.n	800918c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	011b      	lsls	r3, r3, #4
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	4313      	orrs	r3, r2
 8009182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800918a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a17      	ldr	r2, [pc, #92]	; (80091ec <TIM_OC2_SetConfig+0xe4>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d003      	beq.n	800919c <TIM_OC2_SetConfig+0x94>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a16      	ldr	r2, [pc, #88]	; (80091f0 <TIM_OC2_SetConfig+0xe8>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d113      	bne.n	80091c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	621a      	str	r2, [r3, #32]
}
 80091de:	bf00      	nop
 80091e0:	371c      	adds	r7, #28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	40010000 	.word	0x40010000
 80091f0:	40010400 	.word	0x40010400

080091f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a1b      	ldr	r3, [r3, #32]
 8009208:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0303 	bic.w	r3, r3, #3
 800922a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	4313      	orrs	r3, r2
 8009234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800923c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	021b      	lsls	r3, r3, #8
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	4313      	orrs	r3, r2
 8009248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a21      	ldr	r2, [pc, #132]	; (80092d4 <TIM_OC3_SetConfig+0xe0>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d003      	beq.n	800925a <TIM_OC3_SetConfig+0x66>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a20      	ldr	r2, [pc, #128]	; (80092d8 <TIM_OC3_SetConfig+0xe4>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d10d      	bne.n	8009276 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	021b      	lsls	r3, r3, #8
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	4313      	orrs	r3, r2
 800926c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a16      	ldr	r2, [pc, #88]	; (80092d4 <TIM_OC3_SetConfig+0xe0>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d003      	beq.n	8009286 <TIM_OC3_SetConfig+0x92>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a15      	ldr	r2, [pc, #84]	; (80092d8 <TIM_OC3_SetConfig+0xe4>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d113      	bne.n	80092ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800928c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	4313      	orrs	r3, r2
 80092a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	011b      	lsls	r3, r3, #4
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	621a      	str	r2, [r3, #32]
}
 80092c8:	bf00      	nop
 80092ca:	371c      	adds	r7, #28
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	40010000 	.word	0x40010000
 80092d8:	40010400 	.word	0x40010400

080092dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a1b      	ldr	r3, [r3, #32]
 80092f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800930a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	021b      	lsls	r3, r3, #8
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	4313      	orrs	r3, r2
 800931e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	031b      	lsls	r3, r3, #12
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	4313      	orrs	r3, r2
 8009332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a12      	ldr	r2, [pc, #72]	; (8009380 <TIM_OC4_SetConfig+0xa4>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d003      	beq.n	8009344 <TIM_OC4_SetConfig+0x68>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a11      	ldr	r2, [pc, #68]	; (8009384 <TIM_OC4_SetConfig+0xa8>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d109      	bne.n	8009358 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800934a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	019b      	lsls	r3, r3, #6
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	4313      	orrs	r3, r2
 8009356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	621a      	str	r2, [r3, #32]
}
 8009372:	bf00      	nop
 8009374:	371c      	adds	r7, #28
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	40010000 	.word	0x40010000
 8009384:	40010400 	.word	0x40010400

08009388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f003 031f 	and.w	r3, r3, #31
 800939a:	2201      	movs	r2, #1
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6a1a      	ldr	r2, [r3, #32]
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	43db      	mvns	r3, r3
 80093aa:	401a      	ands	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6a1a      	ldr	r2, [r3, #32]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	f003 031f 	and.w	r3, r3, #31
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	fa01 f303 	lsl.w	r3, r1, r3
 80093c0:	431a      	orrs	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	621a      	str	r2, [r3, #32]
}
 80093c6:	bf00      	nop
 80093c8:	371c      	adds	r7, #28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b083      	sub	sp, #12
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093da:	bf00      	nop
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b083      	sub	sp, #12
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f043 0201 	orr.w	r2, r3, #1
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f023 0201 	bic.w	r2, r3, #1
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800943e:	b480      	push	{r7}
 8009440:	b085      	sub	sp, #20
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3301      	adds	r3, #1
 8009450:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009458:	d901      	bls.n	800945e <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	e01b      	b.n	8009496 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	daf2      	bge.n	800944c <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	019b      	lsls	r3, r3, #6
 800946e:	f043 0220 	orr.w	r2, r3, #32
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	3301      	adds	r3, #1
 800947a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009482:	d901      	bls.n	8009488 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e006      	b.n	8009496 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	f003 0320 	and.w	r3, r3, #32
 8009490:	2b20      	cmp	r3, #32
 8009492:	d0f0      	beq.n	8009476 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b085      	sub	sp, #20
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3301      	adds	r3, #1
 80094b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80094ba:	d901      	bls.n	80094c0 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e018      	b.n	80094f2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	daf2      	bge.n	80094ae <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2210      	movs	r2, #16
 80094d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3301      	adds	r3, #1
 80094d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80094de:	d901      	bls.n	80094e4 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e006      	b.n	80094f2 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	f003 0310 	and.w	r3, r3, #16
 80094ec:	2b10      	cmp	r3, #16
 80094ee:	d0f0      	beq.n	80094d2 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3714      	adds	r7, #20
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80094fe:	b480      	push	{r7}
 8009500:	b08b      	sub	sp, #44	; 0x2c
 8009502:	af00      	add	r7, sp, #0
 8009504:	60f8      	str	r0, [r7, #12]
 8009506:	60b9      	str	r1, [r7, #8]
 8009508:	4613      	mov	r3, r2
 800950a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009514:	88fb      	ldrh	r3, [r7, #6]
 8009516:	089b      	lsrs	r3, r3, #2
 8009518:	b29b      	uxth	r3, r3
 800951a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800951c:	88fb      	ldrh	r3, [r7, #6]
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009524:	2300      	movs	r3, #0
 8009526:	623b      	str	r3, [r7, #32]
 8009528:	e014      	b.n	8009554 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	601a      	str	r2, [r3, #0]
    pDest++;
 8009536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009538:	3301      	adds	r3, #1
 800953a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	3301      	adds	r3, #1
 8009540:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	3301      	adds	r3, #1
 8009546:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954a:	3301      	adds	r3, #1
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	3301      	adds	r3, #1
 8009552:	623b      	str	r3, [r7, #32]
 8009554:	6a3a      	ldr	r2, [r7, #32]
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	429a      	cmp	r2, r3
 800955a:	d3e6      	bcc.n	800952a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800955c:	8bfb      	ldrh	r3, [r7, #30]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d01e      	beq.n	80095a0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800956c:	461a      	mov	r2, r3
 800956e:	f107 0310 	add.w	r3, r7, #16
 8009572:	6812      	ldr	r2, [r2, #0]
 8009574:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	b2db      	uxtb	r3, r3
 800957c:	00db      	lsls	r3, r3, #3
 800957e:	fa22 f303 	lsr.w	r3, r2, r3
 8009582:	b2da      	uxtb	r2, r3
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	701a      	strb	r2, [r3, #0]
      i++;
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	3301      	adds	r3, #1
 800958c:	623b      	str	r3, [r7, #32]
      pDest++;
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	3301      	adds	r3, #1
 8009592:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009594:	8bfb      	ldrh	r3, [r7, #30]
 8009596:	3b01      	subs	r3, #1
 8009598:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800959a:	8bfb      	ldrh	r3, [r7, #30]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1ea      	bne.n	8009576 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	372c      	adds	r7, #44	; 0x2c
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	4013      	ands	r3, r2
 80095c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80095c6:	68fb      	ldr	r3, [r7, #12]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	4013      	ands	r3, r2
 8009606:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009608:	68bb      	ldr	r3, [r7, #8]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	f003 0301 	and.w	r3, r3, #1
}
 8009626:	4618      	mov	r0, r3
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009632:	b480      	push	{r7}
 8009634:	b085      	sub	sp, #20
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	460b      	mov	r3, r1
 800963c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009650:	f023 0303 	bic.w	r3, r3, #3
 8009654:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	78fb      	ldrb	r3, [r7, #3]
 8009660:	f003 0303 	and.w	r3, r3, #3
 8009664:	68f9      	ldr	r1, [r7, #12]
 8009666:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800966a:	4313      	orrs	r3, r2
 800966c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800966e:	78fb      	ldrb	r3, [r7, #3]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d107      	bne.n	8009684 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800967a:	461a      	mov	r2, r3
 800967c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009680:	6053      	str	r3, [r2, #4]
 8009682:	e00c      	b.n	800969e <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009684:	78fb      	ldrb	r3, [r7, #3]
 8009686:	2b02      	cmp	r3, #2
 8009688:	d107      	bne.n	800969a <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009690:	461a      	mov	r2, r3
 8009692:	f241 7370 	movw	r3, #6000	; 0x1770
 8009696:	6053      	str	r3, [r2, #4]
 8009698:	e001      	b.n	800969e <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e000      	b.n	80096a0 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	b29b      	uxth	r3, r3
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b089      	sub	sp, #36	; 0x24
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	460b      	mov	r3, r1
 80096d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80096de:	78fb      	ldrb	r3, [r7, #3]
 80096e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	0c9b      	lsrs	r3, r3, #18
 80096f6:	f003 0303 	and.w	r3, r3, #3
 80096fa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	4413      	add	r3, r2
 8009704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	0fdb      	lsrs	r3, r3, #31
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	4413      	add	r3, r2
 800971a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	0fdb      	lsrs	r3, r3, #31
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f003 0320 	and.w	r3, r3, #32
 8009730:	2b20      	cmp	r3, #32
 8009732:	d10d      	bne.n	8009750 <USB_HC_Halt+0x82>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10a      	bne.n	8009750 <USB_HC_Halt+0x82>
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d005      	beq.n	800974c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d002      	beq.n	800974c <USB_HC_Halt+0x7e>
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2b03      	cmp	r3, #3
 800974a:	d101      	bne.n	8009750 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	e0d8      	b.n	8009902 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d002      	beq.n	800975c <USB_HC_Halt+0x8e>
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2b02      	cmp	r3, #2
 800975a:	d173      	bne.n	8009844 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	4413      	add	r3, r2
 8009764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	69ba      	ldr	r2, [r7, #24]
 800976c:	0151      	lsls	r1, r2, #5
 800976e:	69fa      	ldr	r2, [r7, #28]
 8009770:	440a      	add	r2, r1
 8009772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009776:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800977a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f003 0320 	and.w	r3, r3, #32
 8009784:	2b00      	cmp	r3, #0
 8009786:	d14a      	bne.n	800981e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d133      	bne.n	80097fc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	4413      	add	r3, r2
 800979c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	0151      	lsls	r1, r2, #5
 80097a6:	69fa      	ldr	r2, [r7, #28]
 80097a8:	440a      	add	r2, r1
 80097aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097b2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	0151      	lsls	r1, r2, #5
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	440a      	add	r2, r1
 80097ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097d2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	3301      	adds	r3, #1
 80097d8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097e0:	d82e      	bhi.n	8009840 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	015a      	lsls	r2, r3, #5
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097f8:	d0ec      	beq.n	80097d4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097fa:	e081      	b.n	8009900 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	4413      	add	r3, r2
 8009804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	0151      	lsls	r1, r2, #5
 800980e:	69fa      	ldr	r2, [r7, #28]
 8009810:	440a      	add	r2, r1
 8009812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009816:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800981a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800981c:	e070      	b.n	8009900 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	4413      	add	r3, r2
 8009826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	69ba      	ldr	r2, [r7, #24]
 800982e:	0151      	lsls	r1, r2, #5
 8009830:	69fa      	ldr	r2, [r7, #28]
 8009832:	440a      	add	r2, r1
 8009834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800983c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800983e:	e05f      	b.n	8009900 <USB_HC_Halt+0x232>
            break;
 8009840:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009842:	e05d      	b.n	8009900 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	4413      	add	r3, r2
 800984c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	0151      	lsls	r1, r2, #5
 8009856:	69fa      	ldr	r2, [r7, #28]
 8009858:	440a      	add	r2, r1
 800985a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800985e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009862:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d133      	bne.n	80098dc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	0151      	lsls	r1, r2, #5
 8009886:	69fa      	ldr	r2, [r7, #28]
 8009888:	440a      	add	r2, r1
 800988a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800988e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009892:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	4413      	add	r3, r2
 800989c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	0151      	lsls	r1, r2, #5
 80098a6:	69fa      	ldr	r2, [r7, #28]
 80098a8:	440a      	add	r2, r1
 80098aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098b2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	3301      	adds	r3, #1
 80098b8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098c0:	d81d      	bhi.n	80098fe <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098d8:	d0ec      	beq.n	80098b4 <USB_HC_Halt+0x1e6>
 80098da:	e011      	b.n	8009900 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	69ba      	ldr	r2, [r7, #24]
 80098ec:	0151      	lsls	r1, r2, #5
 80098ee:	69fa      	ldr	r2, [r7, #28]
 80098f0:	440a      	add	r2, r1
 80098f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	e000      	b.n	8009900 <USB_HC_Halt+0x232>
          break;
 80098fe:	bf00      	nop
    }
  }

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3724      	adds	r7, #36	; 0x24
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b088      	sub	sp, #32
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800991e:	2300      	movs	r3, #0
 8009920:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff fd7a 	bl	800941c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009928:	2110      	movs	r1, #16
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7ff fd87 	bl	800943e <USB_FlushTxFifo>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d001      	beq.n	800993a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7ff fdb1 	bl	80094a2 <USB_FlushRxFifo>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800994a:	2300      	movs	r3, #0
 800994c:	61bb      	str	r3, [r7, #24]
 800994e:	e01f      	b.n	8009990 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	015a      	lsls	r2, r3, #5
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	4413      	add	r3, r2
 8009958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009966:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800996e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009976:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	4413      	add	r3, r2
 8009980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009984:	461a      	mov	r2, r3
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	3301      	adds	r3, #1
 800998e:	61bb      	str	r3, [r7, #24]
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	2b0f      	cmp	r3, #15
 8009994:	d9dc      	bls.n	8009950 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009996:	2300      	movs	r3, #0
 8009998:	61bb      	str	r3, [r7, #24]
 800999a:	e034      	b.n	8009a06 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	015a      	lsls	r2, r3, #5
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	4413      	add	r3, r2
 80099a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099b2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099ba:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099c2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	015a      	lsls	r2, r3, #5
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	4413      	add	r3, r2
 80099cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099d0:	461a      	mov	r2, r3
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3301      	adds	r3, #1
 80099da:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099e2:	d80c      	bhi.n	80099fe <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099fa:	d0ec      	beq.n	80099d6 <USB_StopHost+0xc8>
 80099fc:	e000      	b.n	8009a00 <USB_StopHost+0xf2>
        break;
 80099fe:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	3301      	adds	r3, #1
 8009a04:	61bb      	str	r3, [r7, #24]
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	2b0f      	cmp	r3, #15
 8009a0a:	d9c7      	bls.n	800999c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a12:	461a      	mov	r2, r3
 8009a14:	f04f 33ff 	mov.w	r3, #4294967295
 8009a18:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a20:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7ff fce9 	bl	80093fa <USB_EnableGlobalInt>

  return ret;
 8009a28:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3720      	adds	r7, #32
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
  USBH_HandleSof(phost);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f804 	bl	8009a56 <USBH_HandleSof>
}
 8009a4e:	bf00      	nop
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	2b0b      	cmp	r3, #11
 8009a66:	d10a      	bne.n	8009a7e <USBH_HandleSof+0x28>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d005      	beq.n	8009a7e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	4798      	blx	r3
  }
}
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009a86:	b480      	push	{r7}
 8009a88:	b083      	sub	sp, #12
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009a96:	bf00      	nop
}
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b083      	sub	sp, #12
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423

  return;
 8009ab2:	bf00      	nop
}
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b083      	sub	sp, #12
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
  phost->device.is_connected = 0U;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7f6 ffcf 	bl	8000ab0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	791b      	ldrb	r3, [r3, #4]
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f80b 	bl	8009b34 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	795b      	ldrb	r3, [r3, #5]
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f805 	bl	8009b34 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009b40:	78fb      	ldrb	r3, [r7, #3]
 8009b42:	2b0f      	cmp	r3, #15
 8009b44:	d80f      	bhi.n	8009b66 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009b46:	78fb      	ldrb	r3, [r7, #3]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	78fb      	ldrb	r3, [r7, #3]
 8009b56:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	440b      	add	r3, r1
 8009b64:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <D16_GENERIC>:
 8009b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b78:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 8009b7c:	b089      	sub	sp, #36	; 0x24
 8009b7e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009b80:	6993      	ldr	r3, [r2, #24]
 8009b82:	9406      	str	r4, [sp, #24]
 8009b84:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009b86:	9307      	str	r3, [sp, #28]
 8009b88:	9402      	str	r4, [sp, #8]
 8009b8a:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 8009b8e:	69d3      	ldr	r3, [r2, #28]
 8009b90:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009b92:	9103      	str	r1, [sp, #12]
 8009b94:	2d00      	cmp	r5, #0
 8009b96:	d066      	beq.n	8009c66 <D16_GENERIC+0xf2>
 8009b98:	f004 0520 	and.w	r5, r4, #32
 8009b9c:	f004 0410 	and.w	r4, r4, #16
 8009ba0:	9505      	str	r5, [sp, #20]
 8009ba2:	4937      	ldr	r1, [pc, #220]	; (8009c80 <D16_GENERIC+0x10c>)
 8009ba4:	9404      	str	r4, [sp, #16]
 8009ba6:	f04f 0c00 	mov.w	ip, #0
 8009baa:	4635      	mov	r5, r6
 8009bac:	e04f      	b.n	8009c4e <D16_GENERIC+0xda>
 8009bae:	5d87      	ldrb	r7, [r0, r6]
 8009bb0:	7804      	ldrb	r4, [r0, #0]
 8009bb2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8009bb6:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8009bba:	b2e6      	uxtb	r6, r4
 8009bbc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009bc0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009bc4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009bc8:	4433      	add	r3, r6
 8009bca:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8009bce:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8009bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bd6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8009bda:	0aa3      	lsrs	r3, r4, #10
 8009bdc:	4c29      	ldr	r4, [pc, #164]	; (8009c84 <D16_GENERIC+0x110>)
 8009bde:	fb26 5404 	smlad	r4, r6, r4, r5
 8009be2:	4d29      	ldr	r5, [pc, #164]	; (8009c88 <D16_GENERIC+0x114>)
 8009be4:	fb26 f505 	smuad	r5, r6, r5
 8009be8:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8009bec:	eb04 080a 	add.w	r8, r4, sl
 8009bf0:	eba8 080b 	sub.w	r8, r8, fp
 8009bf4:	4646      	mov	r6, r8
 8009bf6:	17f7      	asrs	r7, r6, #31
 8009bf8:	e9cd 6700 	strd	r6, r7, [sp]
 8009bfc:	9e04      	ldr	r6, [sp, #16]
 8009bfe:	f10c 0e01 	add.w	lr, ip, #1
 8009c02:	b16e      	cbz	r6, 8009c20 <D16_GENERIC+0xac>
 8009c04:	6a16      	ldr	r6, [r2, #32]
 8009c06:	9f01      	ldr	r7, [sp, #4]
 8009c08:	fba8 ab06 	umull	sl, fp, r8, r6
 8009c0c:	fb06 bb07 	mla	fp, r6, r7, fp
 8009c10:	f11a 4800 	adds.w	r8, sl, #2147483648	; 0x80000000
 8009c14:	f14b 0900 	adc.w	r9, fp, #0
 8009c18:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8009c1c:	46a3      	mov	fp, r4
 8009c1e:	4654      	mov	r4, sl
 8009c20:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8009c22:	9f02      	ldr	r7, [sp, #8]
 8009c24:	0424      	lsls	r4, r4, #16
 8009c26:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009c2a:	f04f 0900 	mov.w	r9, #0
 8009c2e:	fb0c fc06 	mul.w	ip, ip, r6
 8009c32:	fbc7 8904 	smlal	r8, r9, r7, r4
 8009c36:	9e03      	ldr	r6, [sp, #12]
 8009c38:	464f      	mov	r7, r9
 8009c3a:	10bc      	asrs	r4, r7, #2
 8009c3c:	f304 040f 	ssat	r4, #16, r4
 8009c40:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 8009c44:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009c46:	fa1f fc8e 	uxth.w	ip, lr
 8009c4a:	4564      	cmp	r4, ip
 8009c4c:	d90a      	bls.n	8009c64 <D16_GENERIC+0xf0>
 8009c4e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8009c50:	2c01      	cmp	r4, #1
 8009c52:	b2e6      	uxtb	r6, r4
 8009c54:	d1ab      	bne.n	8009bae <D16_GENERIC+0x3a>
 8009c56:	9e05      	ldr	r6, [sp, #20]
 8009c58:	f850 4b02 	ldr.w	r4, [r0], #2
 8009c5c:	2e00      	cmp	r6, #0
 8009c5e:	d0ac      	beq.n	8009bba <D16_GENERIC+0x46>
 8009c60:	ba64      	rev16	r4, r4
 8009c62:	e7aa      	b.n	8009bba <D16_GENERIC+0x46>
 8009c64:	462e      	mov	r6, r5
 8009c66:	9906      	ldr	r1, [sp, #24]
 8009c68:	61d3      	str	r3, [r2, #28]
 8009c6a:	9b07      	ldr	r3, [sp, #28]
 8009c6c:	6096      	str	r6, [r2, #8]
 8009c6e:	2000      	movs	r0, #0
 8009c70:	60d1      	str	r1, [r2, #12]
 8009c72:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 8009c76:	6193      	str	r3, [r2, #24]
 8009c78:	b009      	add	sp, #36	; 0x24
 8009c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7e:	bf00      	nop
 8009c80:	200000d0 	.word	0x200000d0
 8009c84:	00030001 	.word	0x00030001
 8009c88:	00010003 	.word	0x00010003

08009c8c <D24_GENERIC>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009c92:	6993      	ldr	r3, [r2, #24]
 8009c94:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009c96:	b089      	sub	sp, #36	; 0x24
 8009c98:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8009c9c:	9307      	str	r3, [sp, #28]
 8009c9e:	9503      	str	r5, [sp, #12]
 8009ca0:	69d3      	ldr	r3, [r2, #28]
 8009ca2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8009ca4:	9104      	str	r1, [sp, #16]
 8009ca6:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 8009caa:	2e00      	cmp	r6, #0
 8009cac:	f000 808f 	beq.w	8009dce <D24_GENERIC+0x142>
 8009cb0:	f005 0620 	and.w	r6, r5, #32
 8009cb4:	f005 0510 	and.w	r5, r5, #16
 8009cb8:	4953      	ldr	r1, [pc, #332]	; (8009e08 <D24_GENERIC+0x17c>)
 8009cba:	9606      	str	r6, [sp, #24]
 8009cbc:	9505      	str	r5, [sp, #20]
 8009cbe:	f04f 0c00 	mov.w	ip, #0
 8009cc2:	f8cd 9008 	str.w	r9, [sp, #8]
 8009cc6:	e068      	b.n	8009d9a <D24_GENERIC+0x10e>
 8009cc8:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8009ccc:	f810 8007 	ldrb.w	r8, [r0, r7]
 8009cd0:	042d      	lsls	r5, r5, #16
 8009cd2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8009cd6:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8009cda:	44ae      	add	lr, r5
 8009cdc:	4438      	add	r0, r7
 8009cde:	fa5f f68e 	uxtb.w	r6, lr
 8009ce2:	f3ce 2507 	ubfx	r5, lr, #8, #8
 8009ce6:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009cea:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8009cee:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8009cf2:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8009cf6:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009cfa:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 8009cfe:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8009d02:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009d06:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009d0a:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8009d0e:	4d3f      	ldr	r5, [pc, #252]	; (8009e0c <D24_GENERIC+0x180>)
 8009d10:	fb26 b705 	smlad	r7, r6, r5, fp
 8009d14:	4d3e      	ldr	r5, [pc, #248]	; (8009e10 <D24_GENERIC+0x184>)
 8009d16:	fb26 4b05 	smlad	fp, r6, r5, r4
 8009d1a:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8009d1e:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8009d22:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8009d26:	2401      	movs	r4, #1
 8009d28:	fb26 f604 	smuad	r6, r6, r4
 8009d2c:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8009d30:	9f02      	ldr	r7, [sp, #8]
 8009d32:	eb0c 0e04 	add.w	lr, ip, r4
 8009d36:	eb08 0406 	add.w	r4, r8, r6
 8009d3a:	eb05 060a 	add.w	r6, r5, sl
 8009d3e:	1bf6      	subs	r6, r6, r7
 8009d40:	4637      	mov	r7, r6
 8009d42:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8009d46:	e9cd 7800 	strd	r7, r8, [sp]
 8009d4a:	9f05      	ldr	r7, [sp, #20]
 8009d4c:	b177      	cbz	r7, 8009d6c <D24_GENERIC+0xe0>
 8009d4e:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8009d52:	9502      	str	r5, [sp, #8]
 8009d54:	fba6 9a08 	umull	r9, sl, r6, r8
 8009d58:	9e01      	ldr	r6, [sp, #4]
 8009d5a:	fb08 aa06 	mla	sl, r8, r6, sl
 8009d5e:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8009d62:	f14a 0700 	adc.w	r7, sl, #0
 8009d66:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8009d6a:	4655      	mov	r5, sl
 8009d6c:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8009d6e:	9f03      	ldr	r7, [sp, #12]
 8009d70:	03ad      	lsls	r5, r5, #14
 8009d72:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009d76:	f04f 0900 	mov.w	r9, #0
 8009d7a:	fb0c fc06 	mul.w	ip, ip, r6
 8009d7e:	fbc7 8905 	smlal	r8, r9, r7, r5
 8009d82:	9e04      	ldr	r6, [sp, #16]
 8009d84:	464f      	mov	r7, r9
 8009d86:	10bd      	asrs	r5, r7, #2
 8009d88:	f305 050f 	ssat	r5, #16, r5
 8009d8c:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 8009d90:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009d92:	fa1f fc8e 	uxth.w	ip, lr
 8009d96:	4565      	cmp	r5, ip
 8009d98:	d917      	bls.n	8009dca <D24_GENERIC+0x13e>
 8009d9a:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8009d9c:	f890 e000 	ldrb.w	lr, [r0]
 8009da0:	b2ef      	uxtb	r7, r5
 8009da2:	2d01      	cmp	r5, #1
 8009da4:	b23e      	sxth	r6, r7
 8009da6:	d18f      	bne.n	8009cc8 <D24_GENERIC+0x3c>
 8009da8:	9d06      	ldr	r5, [sp, #24]
 8009daa:	b1dd      	cbz	r5, 8009de4 <D24_GENERIC+0x158>
 8009dac:	78c5      	ldrb	r5, [r0, #3]
 8009dae:	ea4f 280e 	mov.w	r8, lr, lsl #8
 8009db2:	f01c 0f01 	tst.w	ip, #1
 8009db6:	ea4f 2605 	mov.w	r6, r5, lsl #8
 8009dba:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8009dbe:	d11b      	bne.n	8009df8 <D24_GENERIC+0x16c>
 8009dc0:	f890 e001 	ldrb.w	lr, [r0, #1]
 8009dc4:	3002      	adds	r0, #2
 8009dc6:	44c6      	add	lr, r8
 8009dc8:	e789      	b.n	8009cde <D24_GENERIC+0x52>
 8009dca:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009dce:	61d3      	str	r3, [r2, #28]
 8009dd0:	9b07      	ldr	r3, [sp, #28]
 8009dd2:	6193      	str	r3, [r2, #24]
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 8009dda:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8009dde:	b009      	add	sp, #36	; 0x24
 8009de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de4:	f890 8001 	ldrb.w	r8, [r0, #1]
 8009de8:	7885      	ldrb	r5, [r0, #2]
 8009dea:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8009dee:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8009df2:	44c6      	add	lr, r8
 8009df4:	3003      	adds	r0, #3
 8009df6:	e772      	b.n	8009cde <D24_GENERIC+0x52>
 8009df8:	f890 8002 	ldrb.w	r8, [r0, #2]
 8009dfc:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 8009e00:	44c6      	add	lr, r8
 8009e02:	3004      	adds	r0, #4
 8009e04:	e76b      	b.n	8009cde <D24_GENERIC+0x52>
 8009e06:	bf00      	nop
 8009e08:	200000d0 	.word	0x200000d0
 8009e0c:	00030001 	.word	0x00030001
 8009e10:	00060007 	.word	0x00060007

08009e14 <D32_GENERIC>:
 8009e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e18:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009e1a:	6993      	ldr	r3, [r2, #24]
 8009e1c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009e1e:	69d6      	ldr	r6, [r2, #28]
 8009e20:	b089      	sub	sp, #36	; 0x24
 8009e22:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8009e26:	9307      	str	r3, [sp, #28]
 8009e28:	9403      	str	r4, [sp, #12]
 8009e2a:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 8009e2e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009e30:	9104      	str	r1, [sp, #16]
 8009e32:	2d00      	cmp	r5, #0
 8009e34:	f000 809a 	beq.w	8009f6c <D32_GENERIC+0x158>
 8009e38:	f004 0520 	and.w	r5, r4, #32
 8009e3c:	f004 0410 	and.w	r4, r4, #16
 8009e40:	9506      	str	r5, [sp, #24]
 8009e42:	4951      	ldr	r1, [pc, #324]	; (8009f88 <D32_GENERIC+0x174>)
 8009e44:	9405      	str	r4, [sp, #20]
 8009e46:	f04f 0e00 	mov.w	lr, #0
 8009e4a:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e4e:	461d      	mov	r5, r3
 8009e50:	4617      	mov	r7, r2
 8009e52:	e077      	b.n	8009f44 <D32_GENERIC+0x130>
 8009e54:	7823      	ldrb	r3, [r4, #0]
 8009e56:	f810 800c 	ldrb.w	r8, [r0, ip]
 8009e5a:	f810 c002 	ldrb.w	ip, [r0, r2]
 8009e5e:	7800      	ldrb	r0, [r0, #0]
 8009e60:	041b      	lsls	r3, r3, #16
 8009e62:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8009e66:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8009e6a:	4403      	add	r3, r0
 8009e6c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8009e70:	b2dc      	uxtb	r4, r3
 8009e72:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009e76:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8009e7a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009e7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009e82:	0e1b      	lsrs	r3, r3, #24
 8009e84:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8009e88:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8009e8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e90:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8009e94:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 8009e98:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 8009e9c:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8009ea0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009ea4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009ea8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009eac:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8009eb0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009eb4:	4b35      	ldr	r3, [pc, #212]	; (8009f8c <D32_GENERIC+0x178>)
 8009eb6:	fb22 b403 	smlad	r4, r2, r3, fp
 8009eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ebe:	fb2c 4803 	smlad	r8, ip, r3, r4
 8009ec2:	4b33      	ldr	r3, [pc, #204]	; (8009f90 <D32_GENERIC+0x17c>)
 8009ec4:	fb22 5503 	smlad	r5, r2, r3, r5
 8009ec8:	4b32      	ldr	r3, [pc, #200]	; (8009f94 <D32_GENERIC+0x180>)
 8009eca:	fb2c 5b03 	smlad	fp, ip, r3, r5
 8009ece:	2301      	movs	r3, #1
 8009ed0:	fb22 f203 	smuad	r2, r2, r3
 8009ed4:	4b30      	ldr	r3, [pc, #192]	; (8009f98 <D32_GENERIC+0x184>)
 8009ed6:	fb2c 2503 	smlad	r5, ip, r3, r2
 8009eda:	9b02      	ldr	r3, [sp, #8]
 8009edc:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8009ee0:	eb04 080a 	add.w	r8, r4, sl
 8009ee4:	eba8 0803 	sub.w	r8, r8, r3
 8009ee8:	4642      	mov	r2, r8
 8009eea:	17d3      	asrs	r3, r2, #31
 8009eec:	e9cd 2300 	strd	r2, r3, [sp]
 8009ef0:	9b05      	ldr	r3, [sp, #20]
 8009ef2:	f10e 0c01 	add.w	ip, lr, #1
 8009ef6:	b173      	cbz	r3, 8009f16 <D32_GENERIC+0x102>
 8009ef8:	6a3a      	ldr	r2, [r7, #32]
 8009efa:	9b01      	ldr	r3, [sp, #4]
 8009efc:	9402      	str	r4, [sp, #8]
 8009efe:	fba8 8902 	umull	r8, r9, r8, r2
 8009f02:	469a      	mov	sl, r3
 8009f04:	fb02 930a 	mla	r3, r2, sl, r9
 8009f08:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8009f0c:	f143 0900 	adc.w	r9, r3, #0
 8009f10:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8009f14:	4654      	mov	r4, sl
 8009f16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f18:	9a04      	ldr	r2, [sp, #16]
 8009f1a:	fb0e fe03 	mul.w	lr, lr, r3
 8009f1e:	9b03      	ldr	r3, [sp, #12]
 8009f20:	0364      	lsls	r4, r4, #13
 8009f22:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009f26:	f04f 0900 	mov.w	r9, #0
 8009f2a:	fbc3 8904 	smlal	r8, r9, r3, r4
 8009f2e:	464b      	mov	r3, r9
 8009f30:	109b      	asrs	r3, r3, #2
 8009f32:	f303 030f 	ssat	r3, #16, r3
 8009f36:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 8009f3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f3c:	fa1f fe8c 	uxth.w	lr, ip
 8009f40:	4573      	cmp	r3, lr
 8009f42:	d90f      	bls.n	8009f64 <D32_GENERIC+0x150>
 8009f44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 8009f4e:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8009f52:	f47f af7f 	bne.w	8009e54 <D32_GENERIC+0x40>
 8009f56:	1d02      	adds	r2, r0, #4
 8009f58:	6803      	ldr	r3, [r0, #0]
 8009f5a:	9806      	ldr	r0, [sp, #24]
 8009f5c:	b188      	cbz	r0, 8009f82 <D32_GENERIC+0x16e>
 8009f5e:	ba5b      	rev16	r3, r3
 8009f60:	4610      	mov	r0, r2
 8009f62:	e785      	b.n	8009e70 <D32_GENERIC+0x5c>
 8009f64:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009f68:	462b      	mov	r3, r5
 8009f6a:	463a      	mov	r2, r7
 8009f6c:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 8009f70:	9b07      	ldr	r3, [sp, #28]
 8009f72:	61d6      	str	r6, [r2, #28]
 8009f74:	2000      	movs	r0, #0
 8009f76:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8009f7a:	6193      	str	r3, [r2, #24]
 8009f7c:	b009      	add	sp, #36	; 0x24
 8009f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f82:	4610      	mov	r0, r2
 8009f84:	e774      	b.n	8009e70 <D32_GENERIC+0x5c>
 8009f86:	bf00      	nop
 8009f88:	200000d0 	.word	0x200000d0
 8009f8c:	00060003 	.word	0x00060003
 8009f90:	000a000c 	.word	0x000a000c
 8009f94:	000c000a 	.word	0x000c000a
 8009f98:	00030006 	.word	0x00030006

08009f9c <D48_GENERIC>:
 8009f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 8009fa4:	b08b      	sub	sp, #44	; 0x2c
 8009fa6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009fa8:	9304      	str	r3, [sp, #16]
 8009faa:	6993      	ldr	r3, [r2, #24]
 8009fac:	9309      	str	r3, [sp, #36]	; 0x24
 8009fae:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8009fb2:	9401      	str	r4, [sp, #4]
 8009fb4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009fb6:	9405      	str	r4, [sp, #20]
 8009fb8:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8009fbc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009fbe:	9106      	str	r1, [sp, #24]
 8009fc0:	2d00      	cmp	r5, #0
 8009fc2:	f000 80c2 	beq.w	800a14a <D48_GENERIC+0x1ae>
 8009fc6:	f004 0520 	and.w	r5, r4, #32
 8009fca:	f04f 0900 	mov.w	r9, #0
 8009fce:	f004 0410 	and.w	r4, r4, #16
 8009fd2:	9508      	str	r5, [sp, #32]
 8009fd4:	4964      	ldr	r1, [pc, #400]	; (800a168 <D48_GENERIC+0x1cc>)
 8009fd6:	9407      	str	r4, [sp, #28]
 8009fd8:	464d      	mov	r5, r9
 8009fda:	e09e      	b.n	800a11a <D48_GENERIC+0x17e>
 8009fdc:	f81b 4007 	ldrb.w	r4, [fp, r7]
 8009fe0:	f810 b008 	ldrb.w	fp, [r0, r8]
 8009fe4:	f819 8008 	ldrb.w	r8, [r9, r8]
 8009fe8:	f810 9006 	ldrb.w	r9, [r0, r6]
 8009fec:	7800      	ldrb	r0, [r0, #0]
 8009fee:	0424      	lsls	r4, r4, #16
 8009ff0:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8009ff4:	f81e 4007 	ldrb.w	r4, [lr, r7]
 8009ff8:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 8009ffc:	44be      	add	lr, r7
 8009ffe:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 800a002:	eb0b 0700 	add.w	r7, fp, r0
 800a006:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 800a00a:	fa5f fe87 	uxtb.w	lr, r7
 800a00e:	f3c7 2607 	ubfx	r6, r7, #8, #8
 800a012:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800a016:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800a01a:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800a01e:	0e3f      	lsrs	r7, r7, #24
 800a020:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 800a024:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 800a028:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 800a02c:	b2e7      	uxtb	r7, r4
 800a02e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800a032:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a036:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800a03a:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800a03e:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 800a042:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 800a046:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a04a:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800a04e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a052:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a056:	f3cc 0809 	ubfx	r8, ip, #0, #10
 800a05a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a05e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a062:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a066:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800a06a:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 800a06e:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 800a072:	4c3e      	ldr	r4, [pc, #248]	; (800a16c <D48_GENERIC+0x1d0>)
 800a074:	9e01      	ldr	r6, [sp, #4]
 800a076:	fb29 6404 	smlad	r4, r9, r4, r6
 800a07a:	4e3d      	ldr	r6, [pc, #244]	; (800a170 <D48_GENERIC+0x1d4>)
 800a07c:	fb2e 4406 	smlad	r4, lr, r6, r4
 800a080:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800a084:	fb27 4b06 	smlad	fp, r7, r6, r4
 800a088:	4c3a      	ldr	r4, [pc, #232]	; (800a174 <D48_GENERIC+0x1d8>)
 800a08a:	fb29 3304 	smlad	r3, r9, r4, r3
 800a08e:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800a092:	fb2e 3304 	smlad	r3, lr, r4, r3
 800a096:	4c38      	ldr	r4, [pc, #224]	; (800a178 <D48_GENERIC+0x1dc>)
 800a098:	fb27 3304 	smlad	r3, r7, r4, r3
 800a09c:	2601      	movs	r6, #1
 800a09e:	9301      	str	r3, [sp, #4]
 800a0a0:	fb29 f906 	smuad	r9, r9, r6
 800a0a4:	4b35      	ldr	r3, [pc, #212]	; (800a17c <D48_GENERIC+0x1e0>)
 800a0a6:	fb2e 9e03 	smlad	lr, lr, r3, r9
 800a0aa:	4b35      	ldr	r3, [pc, #212]	; (800a180 <D48_GENERIC+0x1e4>)
 800a0ac:	fb27 e303 	smlad	r3, r7, r3, lr
 800a0b0:	9f04      	ldr	r7, [sp, #16]
 800a0b2:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800a0b6:	eb05 0e06 	add.w	lr, r5, r6
 800a0ba:	eb04 060a 	add.w	r6, r4, sl
 800a0be:	1bf6      	subs	r6, r6, r7
 800a0c0:	4637      	mov	r7, r6
 800a0c2:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800a0c6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800a0ca:	9f07      	ldr	r7, [sp, #28]
 800a0cc:	b177      	cbz	r7, 800a0ec <D48_GENERIC+0x150>
 800a0ce:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800a0d2:	9404      	str	r4, [sp, #16]
 800a0d4:	fba6 9a08 	umull	r9, sl, r6, r8
 800a0d8:	9e03      	ldr	r6, [sp, #12]
 800a0da:	fb08 aa06 	mla	sl, r8, r6, sl
 800a0de:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800a0e2:	f14a 0700 	adc.w	r7, sl, #0
 800a0e6:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800a0ea:	4654      	mov	r4, sl
 800a0ec:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800a0ee:	fb05 f606 	mul.w	r6, r5, r6
 800a0f2:	9d05      	ldr	r5, [sp, #20]
 800a0f4:	02e4      	lsls	r4, r4, #11
 800a0f6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a0fa:	f04f 0800 	mov.w	r8, #0
 800a0fe:	fbc5 7804 	smlal	r7, r8, r5, r4
 800a102:	4645      	mov	r5, r8
 800a104:	10ac      	asrs	r4, r5, #2
 800a106:	9d06      	ldr	r5, [sp, #24]
 800a108:	f304 040f 	ssat	r4, #16, r4
 800a10c:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800a110:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a112:	fa1f f58e 	uxth.w	r5, lr
 800a116:	42ac      	cmp	r4, r5
 800a118:	d917      	bls.n	800a14a <D48_GENERIC+0x1ae>
 800a11a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800a11c:	b2e6      	uxtb	r6, r4
 800a11e:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800a122:	4277      	negs	r7, r6
 800a124:	eb00 0b08 	add.w	fp, r0, r8
 800a128:	eb0b 0907 	add.w	r9, fp, r7
 800a12c:	2c01      	cmp	r4, #1
 800a12e:	eb09 0e08 	add.w	lr, r9, r8
 800a132:	f47f af53 	bne.w	8009fdc <D48_GENERIC+0x40>
 800a136:	9e08      	ldr	r6, [sp, #32]
 800a138:	e9d0 7400 	ldrd	r7, r4, [r0]
 800a13c:	3006      	adds	r0, #6
 800a13e:	2e00      	cmp	r6, #0
 800a140:	f43f af63 	beq.w	800a00a <D48_GENERIC+0x6e>
 800a144:	ba7f      	rev16	r7, r7
 800a146:	ba64      	rev16	r4, r4
 800a148:	e75f      	b.n	800a00a <D48_GENERIC+0x6e>
 800a14a:	6093      	str	r3, [r2, #8]
 800a14c:	9b01      	ldr	r3, [sp, #4]
 800a14e:	60d3      	str	r3, [r2, #12]
 800a150:	9b04      	ldr	r3, [sp, #16]
 800a152:	6153      	str	r3, [r2, #20]
 800a154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a156:	f8c2 c01c 	str.w	ip, [r2, #28]
 800a15a:	2000      	movs	r0, #0
 800a15c:	f8c2 a010 	str.w	sl, [r2, #16]
 800a160:	6193      	str	r3, [r2, #24]
 800a162:	b00b      	add	sp, #44	; 0x2c
 800a164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a168:	200000d0 	.word	0x200000d0
 800a16c:	000f000a 	.word	0x000f000a
 800a170:	00060003 	.word	0x00060003
 800a174:	00150019 	.word	0x00150019
 800a178:	00190015 	.word	0x00190015
 800a17c:	00030006 	.word	0x00030006
 800a180:	000a000f 	.word	0x000a000f

0800a184 <D64_GENERIC>:
 800a184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a188:	b089      	sub	sp, #36	; 0x24
 800a18a:	6895      	ldr	r5, [r2, #8]
 800a18c:	6913      	ldr	r3, [r2, #16]
 800a18e:	9501      	str	r5, [sp, #4]
 800a190:	68d5      	ldr	r5, [r2, #12]
 800a192:	9302      	str	r3, [sp, #8]
 800a194:	9500      	str	r5, [sp, #0]
 800a196:	6953      	ldr	r3, [r2, #20]
 800a198:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800a19a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800a19c:	9303      	str	r3, [sp, #12]
 800a19e:	6993      	ldr	r3, [r2, #24]
 800a1a0:	9307      	str	r3, [sp, #28]
 800a1a2:	e9cd 5104 	strd	r5, r1, [sp, #16]
 800a1a6:	69d3      	ldr	r3, [r2, #28]
 800a1a8:	2c00      	cmp	r4, #0
 800a1aa:	f000 80d7 	beq.w	800a35c <D64_GENERIC+0x1d8>
 800a1ae:	6a11      	ldr	r1, [r2, #32]
 800a1b0:	9106      	str	r1, [sp, #24]
 800a1b2:	f04f 0e00 	mov.w	lr, #0
 800a1b6:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 800a39c <D64_GENERIC+0x218>
 800a1ba:	4681      	mov	r9, r0
 800a1bc:	e0bf      	b.n	800a33e <D64_GENERIC+0x1ba>
 800a1be:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800a1c2:	426c      	negs	r4, r5
 800a1c4:	eb09 0708 	add.w	r7, r9, r8
 800a1c8:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800a1cc:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 800a1d0:	5d38      	ldrb	r0, [r7, r4]
 800a1d2:	5d31      	ldrb	r1, [r6, r4]
 800a1d4:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800a1d8:	f819 a008 	ldrb.w	sl, [r9, r8]
 800a1dc:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800a1e0:	f899 7000 	ldrb.w	r7, [r9]
 800a1e4:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 800a1e8:	4426      	add	r6, r4
 800a1ea:	0409      	lsls	r1, r1, #16
 800a1ec:	0400      	lsls	r0, r0, #16
 800a1ee:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800a1f2:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800a1f6:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 800a1fa:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800a1fe:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 800a202:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800a206:	4459      	add	r1, fp
 800a208:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 800a20c:	4438      	add	r0, r7
 800a20e:	b2c5      	uxtb	r5, r0
 800a210:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800a214:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 800a218:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 800a21c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800a220:	0e00      	lsrs	r0, r0, #24
 800a222:	eb03 0806 	add.w	r8, r3, r6
 800a226:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800a22a:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 800a22e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800a232:	b2c8      	uxtb	r0, r1
 800a234:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800a238:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800a23c:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 800a240:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 800a244:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800a248:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800a24c:	0e09      	lsrs	r1, r1, #24
 800a24e:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800a252:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 800a256:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800a25a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800a25e:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800a262:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a266:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800a26a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a26e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a272:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a276:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800a27a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a27e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a282:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a286:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800a28a:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800a28e:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800a292:	0a8b      	lsrs	r3, r1, #10
 800a294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800a298:	4938      	ldr	r1, [pc, #224]	; (800a37c <D64_GENERIC+0x1f8>)
 800a29a:	9c00      	ldr	r4, [sp, #0]
 800a29c:	fb28 4101 	smlad	r1, r8, r1, r4
 800a2a0:	4c37      	ldr	r4, [pc, #220]	; (800a380 <D64_GENERIC+0x1fc>)
 800a2a2:	fb27 1104 	smlad	r1, r7, r4, r1
 800a2a6:	4c37      	ldr	r4, [pc, #220]	; (800a384 <D64_GENERIC+0x200>)
 800a2a8:	fb20 1104 	smlad	r1, r0, r4, r1
 800a2ac:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800a2b0:	fb2a 1106 	smlad	r1, sl, r6, r1
 800a2b4:	4d34      	ldr	r5, [pc, #208]	; (800a388 <D64_GENERIC+0x204>)
 800a2b6:	9c01      	ldr	r4, [sp, #4]
 800a2b8:	fb28 4405 	smlad	r4, r8, r5, r4
 800a2bc:	fb2a 4415 	smladx	r4, sl, r5, r4
 800a2c0:	4d32      	ldr	r5, [pc, #200]	; (800a38c <D64_GENERIC+0x208>)
 800a2c2:	fb27 4405 	smlad	r4, r7, r5, r4
 800a2c6:	fb20 4415 	smladx	r4, r0, r5, r4
 800a2ca:	2501      	movs	r5, #1
 800a2cc:	9400      	str	r4, [sp, #0]
 800a2ce:	fb28 f805 	smuad	r8, r8, r5
 800a2d2:	4c2f      	ldr	r4, [pc, #188]	; (800a390 <D64_GENERIC+0x20c>)
 800a2d4:	fb27 8704 	smlad	r7, r7, r4, r8
 800a2d8:	4c2e      	ldr	r4, [pc, #184]	; (800a394 <D64_GENERIC+0x210>)
 800a2da:	fb20 7004 	smlad	r0, r0, r4, r7
 800a2de:	4c2e      	ldr	r4, [pc, #184]	; (800a398 <D64_GENERIC+0x214>)
 800a2e0:	fb2a 0004 	smlad	r0, sl, r4, r0
 800a2e4:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800a2e8:	9906      	ldr	r1, [sp, #24]
 800a2ea:	9001      	str	r0, [sp, #4]
 800a2ec:	b181      	cbz	r1, 800a310 <D64_GENERIC+0x18c>
 800a2ee:	9802      	ldr	r0, [sp, #8]
 800a2f0:	9c03      	ldr	r4, [sp, #12]
 800a2f2:	4430      	add	r0, r6
 800a2f4:	1b00      	subs	r0, r0, r4
 800a2f6:	fba0 7801 	umull	r7, r8, r0, r1
 800a2fa:	17c5      	asrs	r5, r0, #31
 800a2fc:	fb01 8805 	mla	r8, r1, r5, r8
 800a300:	f117 4000 	adds.w	r0, r7, #2147483648	; 0x80000000
 800a304:	f148 0100 	adc.w	r1, r8, #0
 800a308:	0049      	lsls	r1, r1, #1
 800a30a:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800a30e:	460e      	mov	r6, r1
 800a310:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800a312:	9904      	ldr	r1, [sp, #16]
 800a314:	9805      	ldr	r0, [sp, #20]
 800a316:	02b6      	lsls	r6, r6, #10
 800a318:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a31c:	f04f 0800 	mov.w	r8, #0
 800a320:	fb0e f404 	mul.w	r4, lr, r4
 800a324:	fbc1 7806 	smlal	r7, r8, r1, r6
 800a328:	4641      	mov	r1, r8
 800a32a:	1089      	asrs	r1, r1, #2
 800a32c:	f301 010f 	ssat	r1, #16, r1
 800a330:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800a334:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800a336:	f10e 0e01 	add.w	lr, lr, #1
 800a33a:	4571      	cmp	r1, lr
 800a33c:	dd0e      	ble.n	800a35c <D64_GENERIC+0x1d8>
 800a33e:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800a340:	2d01      	cmp	r5, #1
 800a342:	f47f af3c 	bne.w	800a1be <D64_GENERIC+0x3a>
 800a346:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800a348:	06ac      	lsls	r4, r5, #26
 800a34a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a34e:	f109 0908 	add.w	r9, r9, #8
 800a352:	f57f af5c 	bpl.w	800a20e <D64_GENERIC+0x8a>
 800a356:	ba40      	rev16	r0, r0
 800a358:	ba49      	rev16	r1, r1
 800a35a:	e758      	b.n	800a20e <D64_GENERIC+0x8a>
 800a35c:	61d3      	str	r3, [r2, #28]
 800a35e:	9b02      	ldr	r3, [sp, #8]
 800a360:	9901      	ldr	r1, [sp, #4]
 800a362:	6113      	str	r3, [r2, #16]
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	6091      	str	r1, [r2, #8]
 800a368:	6153      	str	r3, [r2, #20]
 800a36a:	9900      	ldr	r1, [sp, #0]
 800a36c:	9b07      	ldr	r3, [sp, #28]
 800a36e:	60d1      	str	r1, [r2, #12]
 800a370:	2000      	movs	r0, #0
 800a372:	6193      	str	r3, [r2, #24]
 800a374:	b009      	add	sp, #36	; 0x24
 800a376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37a:	bf00      	nop
 800a37c:	001c0015 	.word	0x001c0015
 800a380:	000f000a 	.word	0x000f000a
 800a384:	00060003 	.word	0x00060003
 800a388:	0024002a 	.word	0x0024002a
 800a38c:	002e0030 	.word	0x002e0030
 800a390:	00030006 	.word	0x00030006
 800a394:	000a000f 	.word	0x000a000f
 800a398:	0015001c 	.word	0x0015001c
 800a39c:	200000d0 	.word	0x200000d0

0800a3a0 <D80_GENERIC>:
 800a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	b08b      	sub	sp, #44	; 0x2c
 800a3a6:	6914      	ldr	r4, [r2, #16]
 800a3a8:	9405      	str	r4, [sp, #20]
 800a3aa:	6954      	ldr	r4, [r2, #20]
 800a3ac:	9406      	str	r4, [sp, #24]
 800a3ae:	6994      	ldr	r4, [r2, #24]
 800a3b0:	9409      	str	r4, [sp, #36]	; 0x24
 800a3b2:	6894      	ldr	r4, [r2, #8]
 800a3b4:	9402      	str	r4, [sp, #8]
 800a3b6:	68d4      	ldr	r4, [r2, #12]
 800a3b8:	9401      	str	r4, [sp, #4]
 800a3ba:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a3bc:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800a3be:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800a3c2:	e9cd 4107 	strd	r4, r1, [sp, #28]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f000 810a 	beq.w	800a5e0 <D80_GENERIC+0x240>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f8df 9260 	ldr.w	r9, [pc, #608]	; 800a630 <D80_GENERIC+0x290>
 800a3d2:	e9cd b303 	strd	fp, r3, [sp, #12]
 800a3d6:	e0ee      	b.n	800a5b6 <D80_GENERIC+0x216>
 800a3d8:	fa5f fe8e 	uxtb.w	lr, lr
 800a3dc:	fa0f f48e 	sxth.w	r4, lr
 800a3e0:	0066      	lsls	r6, r4, #1
 800a3e2:	eb06 0804 	add.w	r8, r6, r4
 800a3e6:	f1ce 0500 	rsb	r5, lr, #0
 800a3ea:	eb00 0108 	add.w	r1, r0, r8
 800a3ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a3f2:	194b      	adds	r3, r1, r5
 800a3f4:	5d49      	ldrb	r1, [r1, r5]
 800a3f6:	f810 a008 	ldrb.w	sl, [r0, r8]
 800a3fa:	f813 b004 	ldrb.w	fp, [r3, r4]
 800a3fe:	f810 e00e 	ldrb.w	lr, [r0, lr]
 800a402:	f890 8000 	ldrb.w	r8, [r0]
 800a406:	eb03 0c04 	add.w	ip, r3, r4
 800a40a:	eb0c 0705 	add.w	r7, ip, r5
 800a40e:	0409      	lsls	r1, r1, #16
 800a410:	f81c 3005 	ldrb.w	r3, [ip, r5]
 800a414:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800a418:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800a41c:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800a420:	eb0a 0004 	add.w	r0, sl, r4
 800a424:	041b      	lsls	r3, r3, #16
 800a426:	f81a a004 	ldrb.w	sl, [sl, r4]
 800a42a:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800a42e:	5d44      	ldrb	r4, [r0, r5]
 800a430:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800a434:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 800a438:	4428      	add	r0, r5
 800a43a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 800a43e:	4441      	add	r1, r8
 800a440:	4430      	add	r0, r6
 800a442:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800a446:	441f      	add	r7, r3
 800a448:	b2cd      	uxtb	r5, r1
 800a44a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800a44e:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800a452:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 800a456:	9b03      	ldr	r3, [sp, #12]
 800a458:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800a45c:	0e09      	lsrs	r1, r1, #24
 800a45e:	4433      	add	r3, r6
 800a460:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800a464:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800a468:	b2fd      	uxtb	r5, r7
 800a46a:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 800a46e:	469b      	mov	fp, r3
 800a470:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800a474:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800a478:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 800a47c:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800a480:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 800a484:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800a488:	0e3b      	lsrs	r3, r7, #24
 800a48a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800a48e:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 800a492:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a496:	fa5f fc84 	uxtb.w	ip, r4
 800a49a:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 800a49e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a4a2:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800a4a6:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 800a4aa:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800a4ae:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800a4b2:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 800a4b6:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800a4ba:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a4be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4c2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a4c6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a4ca:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a4ce:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a4d2:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800a4d6:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800a4da:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800a4de:	0aa3      	lsrs	r3, r4, #10
 800a4e0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a4e4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a4e8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a4ec:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 800a4f0:	9303      	str	r3, [sp, #12]
 800a4f2:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800a4f6:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 800a4fa:	4b41      	ldr	r3, [pc, #260]	; (800a600 <D80_GENERIC+0x260>)
 800a4fc:	9901      	ldr	r1, [sp, #4]
 800a4fe:	fb2b 1303 	smlad	r3, fp, r3, r1
 800a502:	4940      	ldr	r1, [pc, #256]	; (800a604 <D80_GENERIC+0x264>)
 800a504:	fb28 3301 	smlad	r3, r8, r1, r3
 800a508:	493f      	ldr	r1, [pc, #252]	; (800a608 <D80_GENERIC+0x268>)
 800a50a:	fb2e 3301 	smlad	r3, lr, r1, r3
 800a50e:	493f      	ldr	r1, [pc, #252]	; (800a60c <D80_GENERIC+0x26c>)
 800a510:	fb27 3301 	smlad	r3, r7, r1, r3
 800a514:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800a518:	fb2c 3404 	smlad	r4, ip, r4, r3
 800a51c:	4b3c      	ldr	r3, [pc, #240]	; (800a610 <D80_GENERIC+0x270>)
 800a51e:	9902      	ldr	r1, [sp, #8]
 800a520:	fb2b 1303 	smlad	r3, fp, r3, r1
 800a524:	493b      	ldr	r1, [pc, #236]	; (800a614 <D80_GENERIC+0x274>)
 800a526:	fb28 3301 	smlad	r3, r8, r1, r3
 800a52a:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800a52e:	fb2e 3101 	smlad	r1, lr, r1, r3
 800a532:	4b39      	ldr	r3, [pc, #228]	; (800a618 <D80_GENERIC+0x278>)
 800a534:	fb27 1103 	smlad	r1, r7, r3, r1
 800a538:	4b38      	ldr	r3, [pc, #224]	; (800a61c <D80_GENERIC+0x27c>)
 800a53a:	fb2c 1303 	smlad	r3, ip, r3, r1
 800a53e:	2101      	movs	r1, #1
 800a540:	9301      	str	r3, [sp, #4]
 800a542:	fb2b fb01 	smuad	fp, fp, r1
 800a546:	4b36      	ldr	r3, [pc, #216]	; (800a620 <D80_GENERIC+0x280>)
 800a548:	fb28 b803 	smlad	r8, r8, r3, fp
 800a54c:	4d35      	ldr	r5, [pc, #212]	; (800a624 <D80_GENERIC+0x284>)
 800a54e:	fb2e 8e05 	smlad	lr, lr, r5, r8
 800a552:	4d35      	ldr	r5, [pc, #212]	; (800a628 <D80_GENERIC+0x288>)
 800a554:	fb27 e705 	smlad	r7, r7, r5, lr
 800a558:	4b34      	ldr	r3, [pc, #208]	; (800a62c <D80_GENERIC+0x28c>)
 800a55a:	fb2c 7303 	smlad	r3, ip, r3, r7
 800a55e:	6a11      	ldr	r1, [r2, #32]
 800a560:	9302      	str	r3, [sp, #8]
 800a562:	f5a4 337a 	sub.w	r3, r4, #256000	; 0x3e800
 800a566:	b181      	cbz	r1, 800a58a <D80_GENERIC+0x1ea>
 800a568:	9c05      	ldr	r4, [sp, #20]
 800a56a:	9d06      	ldr	r5, [sp, #24]
 800a56c:	441c      	add	r4, r3
 800a56e:	1b64      	subs	r4, r4, r5
 800a570:	fba4 ab01 	umull	sl, fp, r4, r1
 800a574:	17e7      	asrs	r7, r4, #31
 800a576:	fb01 bb07 	mla	fp, r1, r7, fp
 800a57a:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 800a57e:	f14b 0500 	adc.w	r5, fp, #0
 800a582:	0069      	lsls	r1, r5, #1
 800a584:	e9cd 1305 	strd	r1, r3, [sp, #20]
 800a588:	460b      	mov	r3, r1
 800a58a:	9e04      	ldr	r6, [sp, #16]
 800a58c:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 800a58e:	9f07      	ldr	r7, [sp, #28]
 800a590:	025b      	lsls	r3, r3, #9
 800a592:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a596:	2500      	movs	r5, #0
 800a598:	fb06 f101 	mul.w	r1, r6, r1
 800a59c:	fbc7 4503 	smlal	r4, r5, r7, r3
 800a5a0:	9c08      	ldr	r4, [sp, #32]
 800a5a2:	10ab      	asrs	r3, r5, #2
 800a5a4:	f303 030f 	ssat	r3, #16, r3
 800a5a8:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800a5ac:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a5ae:	1c71      	adds	r1, r6, #1
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	9104      	str	r1, [sp, #16]
 800a5b4:	dd12      	ble.n	800a5dc <D80_GENERIC+0x23c>
 800a5b6:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 800a5ba:	f1be 0f01 	cmp.w	lr, #1
 800a5be:	f47f af0b 	bne.w	800a3d8 <D80_GENERIC+0x38>
 800a5c2:	6801      	ldr	r1, [r0, #0]
 800a5c4:	6847      	ldr	r7, [r0, #4]
 800a5c6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a5c8:	6884      	ldr	r4, [r0, #8]
 800a5ca:	069b      	lsls	r3, r3, #26
 800a5cc:	f100 000a 	add.w	r0, r0, #10
 800a5d0:	f57f af3a 	bpl.w	800a448 <D80_GENERIC+0xa8>
 800a5d4:	ba49      	rev16	r1, r1
 800a5d6:	ba7f      	rev16	r7, r7
 800a5d8:	ba64      	rev16	r4, r4
 800a5da:	e735      	b.n	800a448 <D80_GENERIC+0xa8>
 800a5dc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a5e0:	9b02      	ldr	r3, [sp, #8]
 800a5e2:	6093      	str	r3, [r2, #8]
 800a5e4:	9b01      	ldr	r3, [sp, #4]
 800a5e6:	60d3      	str	r3, [r2, #12]
 800a5e8:	9b05      	ldr	r3, [sp, #20]
 800a5ea:	6113      	str	r3, [r2, #16]
 800a5ec:	9b06      	ldr	r3, [sp, #24]
 800a5ee:	6153      	str	r3, [r2, #20]
 800a5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f2:	f8c2 b01c 	str.w	fp, [r2, #28]
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	6193      	str	r3, [r2, #24]
 800a5fa:	b00b      	add	sp, #44	; 0x2c
 800a5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a600:	002d0024 	.word	0x002d0024
 800a604:	001c0015 	.word	0x001c0015
 800a608:	000f000a 	.word	0x000f000a
 800a60c:	00060003 	.word	0x00060003
 800a610:	0037003f 	.word	0x0037003f
 800a614:	00450049 	.word	0x00450049
 800a618:	00490045 	.word	0x00490045
 800a61c:	003f0037 	.word	0x003f0037
 800a620:	00030006 	.word	0x00030006
 800a624:	000a000f 	.word	0x000a000f
 800a628:	0015001c 	.word	0x0015001c
 800a62c:	0024002d 	.word	0x0024002d
 800a630:	200000d0 	.word	0x200000d0

0800a634 <D128_GENERIC>:
 800a634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a638:	b091      	sub	sp, #68	; 0x44
 800a63a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a63c:	9004      	str	r0, [sp, #16]
 800a63e:	6910      	ldr	r0, [r2, #16]
 800a640:	900a      	str	r0, [sp, #40]	; 0x28
 800a642:	6950      	ldr	r0, [r2, #20]
 800a644:	900b      	str	r0, [sp, #44]	; 0x2c
 800a646:	6990      	ldr	r0, [r2, #24]
 800a648:	900f      	str	r0, [sp, #60]	; 0x3c
 800a64a:	69d0      	ldr	r0, [r2, #28]
 800a64c:	9002      	str	r0, [sp, #8]
 800a64e:	6890      	ldr	r0, [r2, #8]
 800a650:	9003      	str	r0, [sp, #12]
 800a652:	68d0      	ldr	r0, [r2, #12]
 800a654:	9001      	str	r0, [sp, #4]
 800a656:	6b10      	ldr	r0, [r2, #48]	; 0x30
 800a658:	9200      	str	r2, [sp, #0]
 800a65a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 8196 	beq.w	800a990 <D128_GENERIC+0x35c>
 800a664:	2300      	movs	r3, #0
 800a666:	6a12      	ldr	r2, [r2, #32]
 800a668:	920e      	str	r2, [sp, #56]	; 0x38
 800a66a:	f8df 93a0 	ldr.w	r9, [pc, #928]	; 800aa0c <D128_GENERIC+0x3d8>
 800a66e:	9305      	str	r3, [sp, #20]
 800a670:	e177      	b.n	800a962 <D128_GENERIC+0x32e>
 800a672:	b2d2      	uxtb	r2, r2
 800a674:	9d04      	ldr	r5, [sp, #16]
 800a676:	b214      	sxth	r4, r2
 800a678:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800a67c:	4250      	negs	r0, r2
 800a67e:	eb05 010a 	add.w	r1, r5, sl
 800a682:	00a6      	lsls	r6, r4, #2
 800a684:	eb01 0800 	add.w	r8, r1, r0
 800a688:	eb06 0e04 	add.w	lr, r6, r4
 800a68c:	eb08 070e 	add.w	r7, r8, lr
 800a690:	183b      	adds	r3, r7, r0
 800a692:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800a696:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 800a69a:	9608      	str	r6, [sp, #32]
 800a69c:	eb0c 0604 	add.w	r6, ip, r4
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	1833      	adds	r3, r6, r0
 800a6a4:	f815 b00a 	ldrb.w	fp, [r5, sl]
 800a6a8:	9306      	str	r3, [sp, #24]
 800a6aa:	f818 a00e 	ldrb.w	sl, [r8, lr]
 800a6ae:	9b04      	ldr	r3, [sp, #16]
 800a6b0:	f815 e002 	ldrb.w	lr, [r5, r2]
 800a6b4:	782d      	ldrb	r5, [r5, #0]
 800a6b6:	5c3a      	ldrb	r2, [r7, r0]
 800a6b8:	9507      	str	r5, [sp, #28]
 800a6ba:	9d06      	ldr	r5, [sp, #24]
 800a6bc:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800a6c0:	f81c 8004 	ldrb.w	r8, [ip, r4]
 800a6c4:	9304      	str	r3, [sp, #16]
 800a6c6:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 800a6ca:	5c33      	ldrb	r3, [r6, r0]
 800a6cc:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800a6d0:	5c09      	ldrb	r1, [r1, r0]
 800a6d2:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800a6d6:	0412      	lsls	r2, r2, #16
 800a6d8:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800a6dc:	eb06 0a04 	add.w	sl, r6, r4
 800a6e0:	5d36      	ldrb	r6, [r6, r4]
 800a6e2:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 800a6e6:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800a6ea:	042d      	lsls	r5, r5, #16
 800a6ec:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800a6f0:	0409      	lsls	r1, r1, #16
 800a6f2:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800a6f6:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800a6fa:	041b      	lsls	r3, r3, #16
 800a6fc:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 800a700:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800a704:	eb0a 0e00 	add.w	lr, sl, r0
 800a708:	9d07      	ldr	r5, [sp, #28]
 800a70a:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 800a70e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800a712:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800a716:	9f08      	ldr	r7, [sp, #32]
 800a718:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 800a71c:	4429      	add	r1, r5
 800a71e:	9d04      	ldr	r5, [sp, #16]
 800a720:	4438      	add	r0, r7
 800a722:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 800a726:	9004      	str	r0, [sp, #16]
 800a728:	442a      	add	r2, r5
 800a72a:	eb06 0a0b 	add.w	sl, r6, fp
 800a72e:	1918      	adds	r0, r3, r4
 800a730:	b2cb      	uxtb	r3, r1
 800a732:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a736:	9e02      	ldr	r6, [sp, #8]
 800a738:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a73c:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800a740:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800a744:	441e      	add	r6, r3
 800a746:	0e09      	lsrs	r1, r1, #24
 800a748:	4633      	mov	r3, r6
 800a74a:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800a74e:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800a752:	b2d4      	uxtb	r4, r2
 800a754:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800a758:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a75c:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800a760:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800a764:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a768:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a76c:	0e12      	lsrs	r2, r2, #24
 800a76e:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800a772:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800a776:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800a77a:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800a77e:	9702      	str	r7, [sp, #8]
 800a780:	b2c2      	uxtb	r2, r0
 800a782:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800a786:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 800a78a:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800a78e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800a792:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800a796:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 800a79a:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800a79e:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800a7a2:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800a7a6:	0e00      	lsrs	r0, r0, #24
 800a7a8:	fa5f f68a 	uxtb.w	r6, sl
 800a7ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7b0:	9308      	str	r3, [sp, #32]
 800a7b2:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800a7b6:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800a7ba:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800a7be:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800a7c2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a7c6:	9509      	str	r5, [sp, #36]	; 0x24
 800a7c8:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800a7cc:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800a7d0:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800a7d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a7d8:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800a7dc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800a7e0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800a7e4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800a7e8:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800a7ec:	9306      	str	r3, [sp, #24]
 800a7ee:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800a7f2:	9b02      	ldr	r3, [sp, #8]
 800a7f4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800a7f8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a7fc:	f8cd a01c 	str.w	sl, [sp, #28]
 800a800:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800a804:	9b06      	ldr	r3, [sp, #24]
 800a806:	9506      	str	r5, [sp, #24]
 800a808:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a80a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a80e:	f8cd e008 	str.w	lr, [sp, #8]
 800a812:	46ae      	mov	lr, r5
 800a814:	9d08      	ldr	r5, [sp, #32]
 800a816:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a81a:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800a81e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a822:	9d02      	ldr	r5, [sp, #8]
 800a824:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800a828:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a82c:	9f07      	ldr	r7, [sp, #28]
 800a82e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a832:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a836:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800a83a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a83e:	9d06      	ldr	r5, [sp, #24]
 800a840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a844:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a848:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a84c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800a850:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800a854:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 800a858:	0abe      	lsrs	r6, r7, #10
 800a85a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a85e:	9602      	str	r6, [sp, #8]
 800a860:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800a864:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800a868:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 800a86c:	4e52      	ldr	r6, [pc, #328]	; (800a9b8 <D128_GENERIC+0x384>)
 800a86e:	9f01      	ldr	r7, [sp, #4]
 800a870:	fb2e 7606 	smlad	r6, lr, r6, r7
 800a874:	4f51      	ldr	r7, [pc, #324]	; (800a9bc <D128_GENERIC+0x388>)
 800a876:	fb2a 6607 	smlad	r6, sl, r7, r6
 800a87a:	4f51      	ldr	r7, [pc, #324]	; (800a9c0 <D128_GENERIC+0x38c>)
 800a87c:	fb21 6607 	smlad	r6, r1, r7, r6
 800a880:	4f50      	ldr	r7, [pc, #320]	; (800a9c4 <D128_GENERIC+0x390>)
 800a882:	fb24 6607 	smlad	r6, r4, r7, r6
 800a886:	4f50      	ldr	r7, [pc, #320]	; (800a9c8 <D128_GENERIC+0x394>)
 800a888:	fb22 6607 	smlad	r6, r2, r7, r6
 800a88c:	4f4f      	ldr	r7, [pc, #316]	; (800a9cc <D128_GENERIC+0x398>)
 800a88e:	fb20 6607 	smlad	r6, r0, r7, r6
 800a892:	4f4f      	ldr	r7, [pc, #316]	; (800a9d0 <D128_GENERIC+0x39c>)
 800a894:	fb23 6607 	smlad	r6, r3, r7, r6
 800a898:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800a89c:	fb25 6807 	smlad	r8, r5, r7, r6
 800a8a0:	4f4c      	ldr	r7, [pc, #304]	; (800a9d4 <D128_GENERIC+0x3a0>)
 800a8a2:	9e03      	ldr	r6, [sp, #12]
 800a8a4:	fb2e 6c07 	smlad	ip, lr, r7, r6
 800a8a8:	4e4b      	ldr	r6, [pc, #300]	; (800a9d8 <D128_GENERIC+0x3a4>)
 800a8aa:	fb2a cc06 	smlad	ip, sl, r6, ip
 800a8ae:	4f4b      	ldr	r7, [pc, #300]	; (800a9dc <D128_GENERIC+0x3a8>)
 800a8b0:	fb21 cc07 	smlad	ip, r1, r7, ip
 800a8b4:	4f4a      	ldr	r7, [pc, #296]	; (800a9e0 <D128_GENERIC+0x3ac>)
 800a8b6:	fb24 cc07 	smlad	ip, r4, r7, ip
 800a8ba:	4f4a      	ldr	r7, [pc, #296]	; (800a9e4 <D128_GENERIC+0x3b0>)
 800a8bc:	fb22 cc07 	smlad	ip, r2, r7, ip
 800a8c0:	4f49      	ldr	r7, [pc, #292]	; (800a9e8 <D128_GENERIC+0x3b4>)
 800a8c2:	fb20 cc07 	smlad	ip, r0, r7, ip
 800a8c6:	4f49      	ldr	r7, [pc, #292]	; (800a9ec <D128_GENERIC+0x3b8>)
 800a8c8:	fb23 c707 	smlad	r7, r3, r7, ip
 800a8cc:	f8df c140 	ldr.w	ip, [pc, #320]	; 800aa10 <D128_GENERIC+0x3dc>
 800a8d0:	fb25 760c 	smlad	r6, r5, ip, r7
 800a8d4:	f04f 0b01 	mov.w	fp, #1
 800a8d8:	9601      	str	r6, [sp, #4]
 800a8da:	fb2e fb0b 	smuad	fp, lr, fp
 800a8de:	4f44      	ldr	r7, [pc, #272]	; (800a9f0 <D128_GENERIC+0x3bc>)
 800a8e0:	fb2a ba07 	smlad	sl, sl, r7, fp
 800a8e4:	4f43      	ldr	r7, [pc, #268]	; (800a9f4 <D128_GENERIC+0x3c0>)
 800a8e6:	fb21 aa07 	smlad	sl, r1, r7, sl
 800a8ea:	4f43      	ldr	r7, [pc, #268]	; (800a9f8 <D128_GENERIC+0x3c4>)
 800a8ec:	fb24 aa07 	smlad	sl, r4, r7, sl
 800a8f0:	4f42      	ldr	r7, [pc, #264]	; (800a9fc <D128_GENERIC+0x3c8>)
 800a8f2:	fb22 a707 	smlad	r7, r2, r7, sl
 800a8f6:	4a42      	ldr	r2, [pc, #264]	; (800aa00 <D128_GENERIC+0x3cc>)
 800a8f8:	fb20 7702 	smlad	r7, r0, r2, r7
 800a8fc:	4a41      	ldr	r2, [pc, #260]	; (800aa04 <D128_GENERIC+0x3d0>)
 800a8fe:	fb23 7702 	smlad	r7, r3, r2, r7
 800a902:	4b41      	ldr	r3, [pc, #260]	; (800aa08 <D128_GENERIC+0x3d4>)
 800a904:	fb25 7303 	smlad	r3, r5, r3, r7
 800a908:	9303      	str	r3, [sp, #12]
 800a90a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a90c:	f5a8 1680 	sub.w	r6, r8, #1048576	; 0x100000
 800a910:	b183      	cbz	r3, 800a934 <D128_GENERIC+0x300>
 800a912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a914:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a916:	4432      	add	r2, r6
 800a918:	1a52      	subs	r2, r2, r1
 800a91a:	fba2 4503 	umull	r4, r5, r2, r3
 800a91e:	17d1      	asrs	r1, r2, #31
 800a920:	fb03 5501 	mla	r5, r3, r1, r5
 800a924:	f114 4200 	adds.w	r2, r4, #2147483648	; 0x80000000
 800a928:	f145 0300 	adc.w	r3, r5, #0
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
 800a932:	461e      	mov	r6, r3
 800a934:	9800      	ldr	r0, [sp, #0]
 800a936:	9c05      	ldr	r4, [sp, #20]
 800a938:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800a93a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a93c:	01f6      	lsls	r6, r6, #7
 800a93e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a942:	2300      	movs	r3, #0
 800a944:	fbc5 2306 	smlal	r2, r3, r5, r6
 800a948:	fb04 f101 	mul.w	r1, r4, r1
 800a94c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a94e:	109b      	asrs	r3, r3, #2
 800a950:	f303 030f 	ssat	r3, #16, r3
 800a954:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800a958:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800a95a:	1c62      	adds	r2, r4, #1
 800a95c:	4293      	cmp	r3, r2
 800a95e:	9205      	str	r2, [sp, #20]
 800a960:	dd16      	ble.n	800a990 <D128_GENERIC+0x35c>
 800a962:	9b00      	ldr	r3, [sp, #0]
 800a964:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a966:	2a01      	cmp	r2, #1
 800a968:	f47f ae83 	bne.w	800a672 <D128_GENERIC+0x3e>
 800a96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96e:	9c04      	ldr	r4, [sp, #16]
 800a970:	069b      	lsls	r3, r3, #26
 800a972:	e9d4 1200 	ldrd	r1, r2, [r4]
 800a976:	68a0      	ldr	r0, [r4, #8]
 800a978:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800a97c:	f104 0410 	add.w	r4, r4, #16
 800a980:	d517      	bpl.n	800a9b2 <D128_GENERIC+0x37e>
 800a982:	ba49      	rev16	r1, r1
 800a984:	ba52      	rev16	r2, r2
 800a986:	ba40      	rev16	r0, r0
 800a988:	fa9a fa9a 	rev16.w	sl, sl
 800a98c:	9404      	str	r4, [sp, #16]
 800a98e:	e6cf      	b.n	800a730 <D128_GENERIC+0xfc>
 800a990:	9b00      	ldr	r3, [sp, #0]
 800a992:	9903      	ldr	r1, [sp, #12]
 800a994:	6099      	str	r1, [r3, #8]
 800a996:	9901      	ldr	r1, [sp, #4]
 800a998:	60d9      	str	r1, [r3, #12]
 800a99a:	9902      	ldr	r1, [sp, #8]
 800a99c:	61d9      	str	r1, [r3, #28]
 800a99e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a9a0:	6119      	str	r1, [r3, #16]
 800a9a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a9a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9a6:	6159      	str	r1, [r3, #20]
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	619a      	str	r2, [r3, #24]
 800a9ac:	b011      	add	sp, #68	; 0x44
 800a9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b2:	9404      	str	r4, [sp, #16]
 800a9b4:	e6bc      	b.n	800a730 <D128_GENERIC+0xfc>
 800a9b6:	bf00      	nop
 800a9b8:	00780069 	.word	0x00780069
 800a9bc:	005b004e 	.word	0x005b004e
 800a9c0:	00420037 	.word	0x00420037
 800a9c4:	002d0024 	.word	0x002d0024
 800a9c8:	001c0015 	.word	0x001c0015
 800a9cc:	000f000a 	.word	0x000f000a
 800a9d0:	00060003 	.word	0x00060003
 800a9d4:	00880096 	.word	0x00880096
 800a9d8:	00a200ac 	.word	0x00a200ac
 800a9dc:	00b400ba 	.word	0x00b400ba
 800a9e0:	00be00c0 	.word	0x00be00c0
 800a9e4:	00c000be 	.word	0x00c000be
 800a9e8:	00ba00b4 	.word	0x00ba00b4
 800a9ec:	00ac00a2 	.word	0x00ac00a2
 800a9f0:	00030006 	.word	0x00030006
 800a9f4:	000a000f 	.word	0x000a000f
 800a9f8:	0015001c 	.word	0x0015001c
 800a9fc:	0024002d 	.word	0x0024002d
 800aa00:	00370042 	.word	0x00370042
 800aa04:	004e005b 	.word	0x004e005b
 800aa08:	00690078 	.word	0x00690078
 800aa0c:	200000d0 	.word	0x200000d0
 800aa10:	00960088 	.word	0x00960088

0800aa14 <D16_1CH_HTONS_VOL_HP>:
 800aa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa18:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800aa1c:	b085      	sub	sp, #20
 800aa1e:	4681      	mov	r9, r0
 800aa20:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800aa22:	6993      	ldr	r3, [r2, #24]
 800aa24:	9303      	str	r3, [sp, #12]
 800aa26:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 800aa2a:	69d3      	ldr	r3, [r2, #28]
 800aa2c:	9402      	str	r4, [sp, #8]
 800aa2e:	f8d2 a030 	ldr.w	sl, [r2, #48]	; 0x30
 800aa32:	f8d2 c020 	ldr.w	ip, [r2, #32]
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d057      	beq.n	800aaea <D16_1CH_HTONS_VOL_HP+0xd6>
 800aa3a:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 800aa3e:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 800aaf8 <D16_1CH_HTONS_VOL_HP+0xe4>
 800aa42:	f1a1 0802 	sub.w	r8, r1, #2
 800aa46:	4639      	mov	r1, r7
 800aa48:	465f      	mov	r7, fp
 800aa4a:	46d3      	mov	fp, sl
 800aa4c:	46ca      	mov	sl, r9
 800aa4e:	4699      	mov	r9, r3
 800aa50:	4633      	mov	r3, r6
 800aa52:	4616      	mov	r6, r2
 800aa54:	f85a 2b02 	ldr.w	r2, [sl], #2
 800aa58:	ba52      	rev16	r2, r2
 800aa5a:	b2d4      	uxtb	r4, r2
 800aa5c:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800aa60:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 800aa64:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 800aa68:	4491      	add	r9, r2
 800aa6a:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 800aa6e:	f3c0 0209 	ubfx	r2, r0, #0, #10
 800aa72:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800aa76:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 800aa7a:	ea4f 2990 	mov.w	r9, r0, lsr #10
 800aa7e:	481c      	ldr	r0, [pc, #112]	; (800aaf0 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800aa80:	fb22 5400 	smlad	r4, r2, r0, r5
 800aa84:	481b      	ldr	r0, [pc, #108]	; (800aaf4 <D16_1CH_HTONS_VOL_HP+0xe0>)
 800aa86:	fb22 f500 	smuad	r5, r2, r0
 800aa8a:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800aa8e:	18e2      	adds	r2, r4, r3
 800aa90:	1a52      	subs	r2, r2, r1
 800aa92:	17d1      	asrs	r1, r2, #31
 800aa94:	fba2 230c 	umull	r2, r3, r2, ip
 800aa98:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800aa9c:	fb0c 3301 	mla	r3, ip, r1, r3
 800aaa0:	f143 0100 	adc.w	r1, r3, #0
 800aaa4:	e9cd 0100 	strd	r0, r1, [sp]
 800aaa8:	044a      	lsls	r2, r1, #17
 800aaaa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800aaae:	2100      	movs	r1, #0
 800aab0:	9b01      	ldr	r3, [sp, #4]
 800aab2:	fbcb 0102 	smlal	r0, r1, fp, r2
 800aab6:	45ba      	cmp	sl, r7
 800aab8:	ea4f 02a1 	mov.w	r2, r1, asr #2
 800aabc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aac0:	f302 020f 	ssat	r2, #16, r2
 800aac4:	4621      	mov	r1, r4
 800aac6:	f828 2f02 	strh.w	r2, [r8, #2]!
 800aaca:	d1c3      	bne.n	800aa54 <D16_1CH_HTONS_VOL_HP+0x40>
 800aacc:	4632      	mov	r2, r6
 800aace:	461e      	mov	r6, r3
 800aad0:	464b      	mov	r3, r9
 800aad2:	9902      	ldr	r1, [sp, #8]
 800aad4:	61d3      	str	r3, [r2, #28]
 800aad6:	9b03      	ldr	r3, [sp, #12]
 800aad8:	6095      	str	r5, [r2, #8]
 800aada:	2000      	movs	r0, #0
 800aadc:	60d1      	str	r1, [r2, #12]
 800aade:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800aae2:	6193      	str	r3, [r2, #24]
 800aae4:	b005      	add	sp, #20
 800aae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaea:	463c      	mov	r4, r7
 800aaec:	e7f1      	b.n	800aad2 <D16_1CH_HTONS_VOL_HP+0xbe>
 800aaee:	bf00      	nop
 800aaf0:	00030001 	.word	0x00030001
 800aaf4:	00010003 	.word	0x00010003
 800aaf8:	200000d0 	.word	0x200000d0

0800aafc <D24_1CH_HTONS_VOL_HP>:
 800aafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab00:	4696      	mov	lr, r2
 800ab02:	b089      	sub	sp, #36	; 0x24
 800ab04:	f8de 7030 	ldr.w	r7, [lr, #48]	; 0x30
 800ab08:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800ab0a:	f8de 3018 	ldr.w	r3, [lr, #24]
 800ab0e:	9703      	str	r7, [sp, #12]
 800ab10:	f8de 7020 	ldr.w	r7, [lr, #32]
 800ab14:	9306      	str	r3, [sp, #24]
 800ab16:	9205      	str	r2, [sp, #20]
 800ab18:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 800ab1c:	f8de 601c 	ldr.w	r6, [lr, #28]
 800ab20:	9704      	str	r7, [sp, #16]
 800ab22:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 800ab26:	2a00      	cmp	r2, #0
 800ab28:	f000 8081 	beq.w	800ac2e <D24_1CH_HTONS_VOL_HP+0x132>
 800ab2c:	f1a1 0b02 	sub.w	fp, r1, #2
 800ab30:	2700      	movs	r7, #0
 800ab32:	46d9      	mov	r9, fp
 800ab34:	f8cd e01c 	str.w	lr, [sp, #28]
 800ab38:	46d3      	mov	fp, sl
 800ab3a:	f8df c100 	ldr.w	ip, [pc, #256]	; 800ac3c <D24_1CH_HTONS_VOL_HP+0x140>
 800ab3e:	46a8      	mov	r8, r5
 800ab40:	46ba      	mov	sl, r7
 800ab42:	469e      	mov	lr, r3
 800ab44:	e052      	b.n	800abec <D24_1CH_HTONS_VOL_HP+0xf0>
 800ab46:	7842      	ldrb	r2, [r0, #1]
 800ab48:	3002      	adds	r0, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	b2d9      	uxtb	r1, r3
 800ab4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ab52:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 800ab56:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800ab5a:	0c1b      	lsrs	r3, r3, #16
 800ab5c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800ab60:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800ab64:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 800ab68:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800ab6c:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800ab70:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800ab74:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800ab78:	4a2e      	ldr	r2, [pc, #184]	; (800ac34 <D24_1CH_HTONS_VOL_HP+0x138>)
 800ab7a:	fb23 b102 	smlad	r1, r3, r2, fp
 800ab7e:	4a2e      	ldr	r2, [pc, #184]	; (800ac38 <D24_1CH_HTONS_VOL_HP+0x13c>)
 800ab80:	fb23 eb02 	smlad	fp, r3, r2, lr
 800ab84:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 800ab88:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 800ab8c:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 800ab90:	2201      	movs	r2, #1
 800ab92:	fb23 f702 	smuad	r7, r3, r2
 800ab96:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800ab9a:	eb01 0208 	add.w	r2, r1, r8
 800ab9e:	1b12      	subs	r2, r2, r4
 800aba0:	17d4      	asrs	r4, r2, #31
 800aba2:	4613      	mov	r3, r2
 800aba4:	e9cd 3400 	strd	r3, r4, [sp]
 800aba8:	9c04      	ldr	r4, [sp, #16]
 800abaa:	9d01      	ldr	r5, [sp, #4]
 800abac:	fba2 2304 	umull	r2, r3, r2, r4
 800abb0:	fb04 3305 	mla	r3, r4, r5, r3
 800abb4:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800abb8:	f143 0500 	adc.w	r5, r3, #0
 800abbc:	9b03      	ldr	r3, [sp, #12]
 800abbe:	e9cd 4500 	strd	r4, r5, [sp]
 800abc2:	03ea      	lsls	r2, r5, #15
 800abc4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800abc8:	2500      	movs	r5, #0
 800abca:	fbc3 4502 	smlal	r4, r5, r3, r2
 800abce:	9b01      	ldr	r3, [sp, #4]
 800abd0:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800abd4:	10ab      	asrs	r3, r5, #2
 800abd6:	f303 030f 	ssat	r3, #16, r3
 800abda:	f829 3f02 	strh.w	r3, [r9, #2]!
 800abde:	9b05      	ldr	r3, [sp, #20]
 800abe0:	f10a 0a01 	add.w	sl, sl, #1
 800abe4:	459a      	cmp	sl, r3
 800abe6:	44be      	add	lr, r7
 800abe8:	460c      	mov	r4, r1
 800abea:	d00e      	beq.n	800ac0a <D24_1CH_HTONS_VOL_HP+0x10e>
 800abec:	7801      	ldrb	r1, [r0, #0]
 800abee:	78c2      	ldrb	r2, [r0, #3]
 800abf0:	020b      	lsls	r3, r1, #8
 800abf2:	f01a 0f01 	tst.w	sl, #1
 800abf6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800abfa:	d0a4      	beq.n	800ab46 <D24_1CH_HTONS_VOL_HP+0x4a>
 800abfc:	7885      	ldrb	r5, [r0, #2]
 800abfe:	0212      	lsls	r2, r2, #8
 800ac00:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 800ac04:	440b      	add	r3, r1
 800ac06:	3004      	adds	r0, #4
 800ac08:	e7a0      	b.n	800ab4c <D24_1CH_HTONS_VOL_HP+0x50>
 800ac0a:	4673      	mov	r3, lr
 800ac0c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800ac10:	46da      	mov	sl, fp
 800ac12:	4645      	mov	r5, r8
 800ac14:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 800ac18:	9b06      	ldr	r3, [sp, #24]
 800ac1a:	f8ce 601c 	str.w	r6, [lr, #28]
 800ac1e:	2000      	movs	r0, #0
 800ac20:	e9ce 5104 	strd	r5, r1, [lr, #16]
 800ac24:	f8ce 3018 	str.w	r3, [lr, #24]
 800ac28:	b009      	add	sp, #36	; 0x24
 800ac2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2e:	4621      	mov	r1, r4
 800ac30:	e7f0      	b.n	800ac14 <D24_1CH_HTONS_VOL_HP+0x118>
 800ac32:	bf00      	nop
 800ac34:	00030001 	.word	0x00030001
 800ac38:	00060007 	.word	0x00060007
 800ac3c:	200000d0 	.word	0x200000d0

0800ac40 <D32_1CH_HTONS_VOL_HP>:
 800ac40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac44:	4682      	mov	sl, r0
 800ac46:	b087      	sub	sp, #28
 800ac48:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800ac4a:	6993      	ldr	r3, [r2, #24]
 800ac4c:	9304      	str	r3, [sp, #16]
 800ac4e:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 800ac52:	69d5      	ldr	r5, [r2, #28]
 800ac54:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800ac56:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800ac5a:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d070      	beq.n	800ad44 <D32_1CH_HTONS_VOL_HP+0x104>
 800ac62:	468e      	mov	lr, r1
 800ac64:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 800ad58 <D32_1CH_HTONS_VOL_HP+0x118>
 800ac68:	9205      	str	r2, [sp, #20]
 800ac6a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800ac6e:	46d3      	mov	fp, sl
 800ac70:	4638      	mov	r0, r7
 800ac72:	46ca      	mov	sl, r9
 800ac74:	9103      	str	r1, [sp, #12]
 800ac76:	4627      	mov	r7, r4
 800ac78:	4699      	mov	r9, r3
 800ac7a:	f85b 1b04 	ldr.w	r1, [fp], #4
 800ac7e:	ba49      	rev16	r1, r1
 800ac80:	b2ca      	uxtb	r2, r1
 800ac82:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800ac86:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800ac8a:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 800ac8e:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800ac92:	0e09      	lsrs	r1, r1, #24
 800ac94:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800ac98:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800ac9c:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 800aca0:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800aca4:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800aca8:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 800acac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800acb0:	f3c5 0109 	ubfx	r1, r5, #0, #10
 800acb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800acb8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800acbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acc0:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800acc4:	4a20      	ldr	r2, [pc, #128]	; (800ad48 <D32_1CH_HTONS_VOL_HP+0x108>)
 800acc6:	fb23 8802 	smlad	r8, r3, r2, r8
 800acca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800acce:	fb24 8102 	smlad	r1, r4, r2, r8
 800acd2:	4a1e      	ldr	r2, [pc, #120]	; (800ad4c <D32_1CH_HTONS_VOL_HP+0x10c>)
 800acd4:	fb23 9802 	smlad	r8, r3, r2, r9
 800acd8:	4a1d      	ldr	r2, [pc, #116]	; (800ad50 <D32_1CH_HTONS_VOL_HP+0x110>)
 800acda:	fb24 8802 	smlad	r8, r4, r2, r8
 800acde:	2201      	movs	r2, #1
 800ace0:	fb23 f302 	smuad	r3, r3, r2
 800ace4:	4a1b      	ldr	r2, [pc, #108]	; (800ad54 <D32_1CH_HTONS_VOL_HP+0x114>)
 800ace6:	fb24 3902 	smlad	r9, r4, r2, r3
 800acea:	f5a1 4480 	sub.w	r4, r1, #16384	; 0x4000
 800acee:	19a2      	adds	r2, r4, r6
 800acf0:	1a12      	subs	r2, r2, r0
 800acf2:	17d1      	asrs	r1, r2, #31
 800acf4:	fba2 230a 	umull	r2, r3, r2, sl
 800acf8:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 800acfc:	fb0a 3301 	mla	r3, sl, r1, r3
 800ad00:	f143 0100 	adc.w	r1, r3, #0
 800ad04:	e9cd 0100 	strd	r0, r1, [sp]
 800ad08:	038a      	lsls	r2, r1, #14
 800ad0a:	9b01      	ldr	r3, [sp, #4]
 800ad0c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ad10:	2100      	movs	r1, #0
 800ad12:	fbc7 0102 	smlal	r0, r1, r7, r2
 800ad16:	108a      	asrs	r2, r1, #2
 800ad18:	005e      	lsls	r6, r3, #1
 800ad1a:	f302 020f 	ssat	r2, #16, r2
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	f82e 2b02 	strh.w	r2, [lr], #2
 800ad24:	459e      	cmp	lr, r3
 800ad26:	4620      	mov	r0, r4
 800ad28:	d1a7      	bne.n	800ac7a <D32_1CH_HTONS_VOL_HP+0x3a>
 800ad2a:	9a05      	ldr	r2, [sp, #20]
 800ad2c:	464b      	mov	r3, r9
 800ad2e:	e9c2 3802 	strd	r3, r8, [r2, #8]
 800ad32:	9b04      	ldr	r3, [sp, #16]
 800ad34:	61d5      	str	r5, [r2, #28]
 800ad36:	2000      	movs	r0, #0
 800ad38:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800ad3c:	6193      	str	r3, [r2, #24]
 800ad3e:	b007      	add	sp, #28
 800ad40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad44:	463c      	mov	r4, r7
 800ad46:	e7f2      	b.n	800ad2e <D32_1CH_HTONS_VOL_HP+0xee>
 800ad48:	00060003 	.word	0x00060003
 800ad4c:	000a000c 	.word	0x000a000c
 800ad50:	000c000a 	.word	0x000c000a
 800ad54:	00030006 	.word	0x00030006
 800ad58:	200000d0 	.word	0x200000d0

0800ad5c <D48_1CH_HTONS_VOL_HP>:
 800ad5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad60:	b087      	sub	sp, #28
 800ad62:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800ad64:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ad66:	6993      	ldr	r3, [r2, #24]
 800ad68:	9702      	str	r7, [sp, #8]
 800ad6a:	6a17      	ldr	r7, [r2, #32]
 800ad6c:	9304      	str	r3, [sp, #16]
 800ad6e:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 800ad72:	69d6      	ldr	r6, [r2, #28]
 800ad74:	9705      	str	r7, [sp, #20]
 800ad76:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800ad7a:	2d00      	cmp	r5, #0
 800ad7c:	f000 8093 	beq.w	800aea6 <D48_1CH_HTONS_VOL_HP+0x14a>
 800ad80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad84:	46ba      	mov	sl, r7
 800ad86:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800ad8a:	3902      	subs	r1, #2
 800ad8c:	4f47      	ldr	r7, [pc, #284]	; (800aeac <D48_1CH_HTONS_VOL_HP+0x150>)
 800ad8e:	9503      	str	r5, [sp, #12]
 800ad90:	9101      	str	r1, [sp, #4]
 800ad92:	469e      	mov	lr, r3
 800ad94:	9205      	str	r2, [sp, #20]
 800ad96:	e9d0 3500 	ldrd	r3, r5, [r0]
 800ad9a:	3006      	adds	r0, #6
 800ad9c:	ba5b      	rev16	r3, r3
 800ad9e:	ba6d      	rev16	r5, r5
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ada6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800adaa:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800adae:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800adb2:	0e1b      	lsrs	r3, r3, #24
 800adb4:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800adb8:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 800adbc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800adc0:	fa5f fb85 	uxtb.w	fp, r5
 800adc4:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 800adc8:	f3c5 2607 	ubfx	r6, r5, #8, #8
 800adcc:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800add0:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 800add4:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 800add8:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 800addc:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800ade0:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800ade4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ade8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adec:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 800adf0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800adf4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800adf8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800adfc:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 800ae00:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800ae04:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 800ae08:	4b29      	ldr	r3, [pc, #164]	; (800aeb0 <D48_1CH_HTONS_VOL_HP+0x154>)
 800ae0a:	fb22 c103 	smlad	r1, r2, r3, ip
 800ae0e:	4b29      	ldr	r3, [pc, #164]	; (800aeb4 <D48_1CH_HTONS_VOL_HP+0x158>)
 800ae10:	fb28 1103 	smlad	r1, r8, r3, r1
 800ae14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ae18:	fb25 1103 	smlad	r1, r5, r3, r1
 800ae1c:	4b26      	ldr	r3, [pc, #152]	; (800aeb8 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800ae1e:	fb22 ec03 	smlad	ip, r2, r3, lr
 800ae22:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800ae26:	fb28 cc03 	smlad	ip, r8, r3, ip
 800ae2a:	4b24      	ldr	r3, [pc, #144]	; (800aebc <D48_1CH_HTONS_VOL_HP+0x160>)
 800ae2c:	fb25 cc03 	smlad	ip, r5, r3, ip
 800ae30:	f04f 0e01 	mov.w	lr, #1
 800ae34:	fb22 f20e 	smuad	r2, r2, lr
 800ae38:	4b21      	ldr	r3, [pc, #132]	; (800aec0 <D48_1CH_HTONS_VOL_HP+0x164>)
 800ae3a:	fb28 2803 	smlad	r8, r8, r3, r2
 800ae3e:	4b21      	ldr	r3, [pc, #132]	; (800aec4 <D48_1CH_HTONS_VOL_HP+0x168>)
 800ae40:	fb25 8e03 	smlad	lr, r5, r3, r8
 800ae44:	f5a1 4158 	sub.w	r1, r1, #55296	; 0xd800
 800ae48:	190a      	adds	r2, r1, r4
 800ae4a:	eba2 0209 	sub.w	r2, r2, r9
 800ae4e:	17d5      	asrs	r5, r2, #31
 800ae50:	fba2 230a 	umull	r2, r3, r2, sl
 800ae54:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 800ae58:	fb0a 3305 	mla	r3, sl, r5, r3
 800ae5c:	f143 0500 	adc.w	r5, r3, #0
 800ae60:	9b02      	ldr	r3, [sp, #8]
 800ae62:	032a      	lsls	r2, r5, #12
 800ae64:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800ae68:	f04f 0900 	mov.w	r9, #0
 800ae6c:	fbc3 8902 	smlal	r8, r9, r3, r2
 800ae70:	9a01      	ldr	r2, [sp, #4]
 800ae72:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800ae76:	f303 030f 	ssat	r3, #16, r3
 800ae7a:	f822 3f02 	strh.w	r3, [r2, #2]!
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	9201      	str	r2, [sp, #4]
 800ae82:	4283      	cmp	r3, r0
 800ae84:	ea4f 0445 	mov.w	r4, r5, lsl #1
 800ae88:	4689      	mov	r9, r1
 800ae8a:	d184      	bne.n	800ad96 <D48_1CH_HTONS_VOL_HP+0x3a>
 800ae8c:	9a05      	ldr	r2, [sp, #20]
 800ae8e:	4673      	mov	r3, lr
 800ae90:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 800ae94:	9b04      	ldr	r3, [sp, #16]
 800ae96:	61d6      	str	r6, [r2, #28]
 800ae98:	2000      	movs	r0, #0
 800ae9a:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800ae9e:	6193      	str	r3, [r2, #24]
 800aea0:	b007      	add	sp, #28
 800aea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea6:	4649      	mov	r1, r9
 800aea8:	e7f2      	b.n	800ae90 <D48_1CH_HTONS_VOL_HP+0x134>
 800aeaa:	bf00      	nop
 800aeac:	200000d0 	.word	0x200000d0
 800aeb0:	000f000a 	.word	0x000f000a
 800aeb4:	00060003 	.word	0x00060003
 800aeb8:	00150019 	.word	0x00150019
 800aebc:	00190015 	.word	0x00190015
 800aec0:	00030006 	.word	0x00030006
 800aec4:	000a000f 	.word	0x000a000f

0800aec8 <D64_1CH_HTONS_VOL_HP>:
 800aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aecc:	b087      	sub	sp, #28
 800aece:	6913      	ldr	r3, [r2, #16]
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 800aed6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800aed8:	9601      	str	r6, [sp, #4]
 800aeda:	4681      	mov	r9, r0
 800aedc:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 800aede:	6a16      	ldr	r6, [r2, #32]
 800aee0:	9304      	str	r3, [sp, #16]
 800aee2:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 800aee6:	69d3      	ldr	r3, [r2, #28]
 800aee8:	9602      	str	r6, [sp, #8]
 800aeea:	2800      	cmp	r0, #0
 800aeec:	f000 809d 	beq.w	800b02a <D64_1CH_HTONS_VOL_HP+0x162>
 800aef0:	468e      	mov	lr, r1
 800aef2:	f8df c170 	ldr.w	ip, [pc, #368]	; 800b064 <D64_1CH_HTONS_VOL_HP+0x19c>
 800aef6:	9205      	str	r2, [sp, #20]
 800aef8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800aefc:	9103      	str	r1, [sp, #12]
 800aefe:	4622      	mov	r2, r4
 800af00:	4619      	mov	r1, r3
 800af02:	f859 3b08 	ldr.w	r3, [r9], #8
 800af06:	f859 6c04 	ldr.w	r6, [r9, #-4]
 800af0a:	ba5b      	rev16	r3, r3
 800af0c:	ba76      	rev16	r6, r6
 800af0e:	b2dc      	uxtb	r4, r3
 800af10:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800af14:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800af18:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 800af1c:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800af20:	0e1b      	lsrs	r3, r3, #24
 800af22:	eb01 0b07 	add.w	fp, r1, r7
 800af26:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 800af2a:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 800af2e:	b2f1      	uxtb	r1, r6
 800af30:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 800af34:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800af38:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 800af3c:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 800af40:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 800af44:	f3c6 4107 	ubfx	r1, r6, #16, #8
 800af48:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 800af4c:	0e36      	lsrs	r6, r6, #24
 800af4e:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 800af52:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800af56:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800af5a:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800af5e:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800af62:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800af66:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800af6a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800af6e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800af72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af76:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800af7a:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 800af7e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800af82:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800af86:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800af8a:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 800af8e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800af92:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 800af96:	4b2b      	ldr	r3, [pc, #172]	; (800b044 <D64_1CH_HTONS_VOL_HP+0x17c>)
 800af98:	0ab1      	lsrs	r1, r6, #10
 800af9a:	fb2b 8803 	smlad	r8, fp, r3, r8
 800af9e:	4b2a      	ldr	r3, [pc, #168]	; (800b048 <D64_1CH_HTONS_VOL_HP+0x180>)
 800afa0:	fb2a 8803 	smlad	r8, sl, r3, r8
 800afa4:	4b29      	ldr	r3, [pc, #164]	; (800b04c <D64_1CH_HTONS_VOL_HP+0x184>)
 800afa6:	fb27 8803 	smlad	r8, r7, r3, r8
 800afaa:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800afae:	fb20 8604 	smlad	r6, r0, r4, r8
 800afb2:	4b27      	ldr	r3, [pc, #156]	; (800b050 <D64_1CH_HTONS_VOL_HP+0x188>)
 800afb4:	fb2b 5803 	smlad	r8, fp, r3, r5
 800afb8:	fb20 8813 	smladx	r8, r0, r3, r8
 800afbc:	4b25      	ldr	r3, [pc, #148]	; (800b054 <D64_1CH_HTONS_VOL_HP+0x18c>)
 800afbe:	fb2a 8803 	smlad	r8, sl, r3, r8
 800afc2:	fb27 8813 	smladx	r8, r7, r3, r8
 800afc6:	2401      	movs	r4, #1
 800afc8:	fb2b fb04 	smuad	fp, fp, r4
 800afcc:	4b22      	ldr	r3, [pc, #136]	; (800b058 <D64_1CH_HTONS_VOL_HP+0x190>)
 800afce:	fb2a ba03 	smlad	sl, sl, r3, fp
 800afd2:	4b22      	ldr	r3, [pc, #136]	; (800b05c <D64_1CH_HTONS_VOL_HP+0x194>)
 800afd4:	fb27 a703 	smlad	r7, r7, r3, sl
 800afd8:	4b21      	ldr	r3, [pc, #132]	; (800b060 <D64_1CH_HTONS_VOL_HP+0x198>)
 800afda:	fb20 7503 	smlad	r5, r0, r3, r7
 800afde:	9b00      	ldr	r3, [sp, #0]
 800afe0:	9802      	ldr	r0, [sp, #8]
 800afe2:	f5a6 3400 	sub.w	r4, r6, #131072	; 0x20000
 800afe6:	4423      	add	r3, r4
 800afe8:	1a9a      	subs	r2, r3, r2
 800afea:	17d7      	asrs	r7, r2, #31
 800afec:	fba2 2300 	umull	r2, r3, r2, r0
 800aff0:	fb00 3307 	mla	r3, r0, r7, r3
 800aff4:	f112 4a00 	adds.w	sl, r2, #2147483648	; 0x80000000
 800aff8:	f143 0b00 	adc.w	fp, r3, #0
 800affc:	9b01      	ldr	r3, [sp, #4]
 800affe:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 800b002:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b006:	2700      	movs	r7, #0
 800b008:	fbc3 6702 	smlal	r6, r7, r3, r2
 800b00c:	ea4f 034b 	mov.w	r3, fp, lsl #1
 800b010:	10ba      	asrs	r2, r7, #2
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	f302 020f 	ssat	r2, #16, r2
 800b018:	9b03      	ldr	r3, [sp, #12]
 800b01a:	f82e 2b02 	strh.w	r2, [lr], #2
 800b01e:	459e      	cmp	lr, r3
 800b020:	4622      	mov	r2, r4
 800b022:	f47f af6e 	bne.w	800af02 <D64_1CH_HTONS_VOL_HP+0x3a>
 800b026:	9a05      	ldr	r2, [sp, #20]
 800b028:	460b      	mov	r3, r1
 800b02a:	61d3      	str	r3, [r2, #28]
 800b02c:	9b00      	ldr	r3, [sp, #0]
 800b02e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800b032:	9b04      	ldr	r3, [sp, #16]
 800b034:	6193      	str	r3, [r2, #24]
 800b036:	2000      	movs	r0, #0
 800b038:	e9c2 5802 	strd	r5, r8, [r2, #8]
 800b03c:	b007      	add	sp, #28
 800b03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b042:	bf00      	nop
 800b044:	001c0015 	.word	0x001c0015
 800b048:	000f000a 	.word	0x000f000a
 800b04c:	00060003 	.word	0x00060003
 800b050:	0024002a 	.word	0x0024002a
 800b054:	002e0030 	.word	0x002e0030
 800b058:	00030006 	.word	0x00030006
 800b05c:	000a000f 	.word	0x000a000f
 800b060:	0015001c 	.word	0x0015001c
 800b064:	200000d0 	.word	0x200000d0

0800b068 <D80_1CH_HTONS_VOL_HP>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	4615      	mov	r5, r2
 800b06e:	b089      	sub	sp, #36	; 0x24
 800b070:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 800b074:	692b      	ldr	r3, [r5, #16]
 800b076:	9301      	str	r3, [sp, #4]
 800b078:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 800b07c:	9400      	str	r4, [sp, #0]
 800b07e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b080:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800b082:	9403      	str	r4, [sp, #12]
 800b084:	6a2c      	ldr	r4, [r5, #32]
 800b086:	9306      	str	r3, [sp, #24]
 800b088:	9404      	str	r4, [sp, #16]
 800b08a:	69eb      	ldr	r3, [r5, #28]
 800b08c:	2a00      	cmp	r2, #0
 800b08e:	f000 80d3 	beq.w	800b238 <D80_1CH_HTONS_VOL_HP+0x1d0>
 800b092:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b096:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800b09a:	9205      	str	r2, [sp, #20]
 800b09c:	4c67      	ldr	r4, [pc, #412]	; (800b23c <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800b09e:	9507      	str	r5, [sp, #28]
 800b0a0:	1e8a      	subs	r2, r1, #2
 800b0a2:	9202      	str	r2, [sp, #8]
 800b0a4:	469b      	mov	fp, r3
 800b0a6:	6807      	ldr	r7, [r0, #0]
 800b0a8:	6842      	ldr	r2, [r0, #4]
 800b0aa:	6883      	ldr	r3, [r0, #8]
 800b0ac:	300a      	adds	r0, #10
 800b0ae:	ba7f      	rev16	r7, r7
 800b0b0:	ba52      	rev16	r2, r2
 800b0b2:	ba5b      	rev16	r3, r3
 800b0b4:	b2fd      	uxtb	r5, r7
 800b0b6:	f3c7 2107 	ubfx	r1, r7, #8, #8
 800b0ba:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 800b0be:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800b0c2:	f3c7 4507 	ubfx	r5, r7, #16, #8
 800b0c6:	44f3      	add	fp, lr
 800b0c8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 800b0cc:	0e3f      	lsrs	r7, r7, #24
 800b0ce:	fa5f fe82 	uxtb.w	lr, r2
 800b0d2:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 800b0d6:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 800b0da:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800b0de:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 800b0e2:	f3c2 2507 	ubfx	r5, r2, #8, #8
 800b0e6:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 800b0ea:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 800b0ee:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 800b0f2:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 800b0f6:	0e12      	lsrs	r2, r2, #24
 800b0f8:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800b0fc:	fa5f fe83 	uxtb.w	lr, r3
 800b100:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 800b104:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b108:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 800b10c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800b110:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800b114:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800b118:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800b11c:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 800b120:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800b124:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b128:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b12c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b130:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b134:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b138:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 800b13c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b140:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 800b144:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b148:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b14c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b150:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 800b154:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 800b158:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 800b15c:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 800b160:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 800b164:	4b36      	ldr	r3, [pc, #216]	; (800b240 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800b166:	9a00      	ldr	r2, [sp, #0]
 800b168:	fb21 2303 	smlad	r3, r1, r3, r2
 800b16c:	4a35      	ldr	r2, [pc, #212]	; (800b244 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800b16e:	fb27 3302 	smlad	r3, r7, r2, r3
 800b172:	4a35      	ldr	r2, [pc, #212]	; (800b248 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800b174:	fb25 3302 	smlad	r3, r5, r2, r3
 800b178:	4a34      	ldr	r2, [pc, #208]	; (800b24c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800b17a:	fb28 3302 	smlad	r3, r8, r2, r3
 800b17e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b182:	fb2e 3302 	smlad	r3, lr, r2, r3
 800b186:	4a32      	ldr	r2, [pc, #200]	; (800b250 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800b188:	fb21 cc02 	smlad	ip, r1, r2, ip
 800b18c:	4a31      	ldr	r2, [pc, #196]	; (800b254 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800b18e:	fb27 cc02 	smlad	ip, r7, r2, ip
 800b192:	f04f 194b 	mov.w	r9, #4915275	; 0x4b004b
 800b196:	fb25 c909 	smlad	r9, r5, r9, ip
 800b19a:	4a2f      	ldr	r2, [pc, #188]	; (800b258 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800b19c:	fb28 9902 	smlad	r9, r8, r2, r9
 800b1a0:	4a2e      	ldr	r2, [pc, #184]	; (800b25c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800b1a2:	fb2e 9202 	smlad	r2, lr, r2, r9
 800b1a6:	f04f 0a01 	mov.w	sl, #1
 800b1aa:	9200      	str	r2, [sp, #0]
 800b1ac:	fb21 fa0a 	smuad	sl, r1, sl
 800b1b0:	4a2b      	ldr	r2, [pc, #172]	; (800b260 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800b1b2:	fb27 a702 	smlad	r7, r7, r2, sl
 800b1b6:	4a2b      	ldr	r2, [pc, #172]	; (800b264 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800b1b8:	fb25 7702 	smlad	r7, r5, r2, r7
 800b1bc:	4a2a      	ldr	r2, [pc, #168]	; (800b268 <D80_1CH_HTONS_VOL_HP+0x200>)
 800b1be:	fb28 7202 	smlad	r2, r8, r2, r7
 800b1c2:	4d2a      	ldr	r5, [pc, #168]	; (800b26c <D80_1CH_HTONS_VOL_HP+0x204>)
 800b1c4:	fb2e 2c05 	smlad	ip, lr, r5, r2
 800b1c8:	f5a3 327a 	sub.w	r2, r3, #256000	; 0x3e800
 800b1cc:	9b01      	ldr	r3, [sp, #4]
 800b1ce:	9903      	ldr	r1, [sp, #12]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	1b9e      	subs	r6, r3, r6
 800b1d4:	9b04      	ldr	r3, [sp, #16]
 800b1d6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b1da:	fba6 5603 	umull	r5, r6, r6, r3
 800b1de:	fb03 6309 	mla	r3, r3, r9, r6
 800b1e2:	462e      	mov	r6, r5
 800b1e4:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800b1e8:	f143 0700 	adc.w	r7, r3, #0
 800b1ec:	02bb      	lsls	r3, r7, #10
 800b1ee:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b1f2:	f04f 0900 	mov.w	r9, #0
 800b1f6:	fbc1 8903 	smlal	r8, r9, r1, r3
 800b1fa:	9902      	ldr	r1, [sp, #8]
 800b1fc:	007b      	lsls	r3, r7, #1
 800b1fe:	9301      	str	r3, [sp, #4]
 800b200:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800b204:	f303 030f 	ssat	r3, #16, r3
 800b208:	f821 3f02 	strh.w	r3, [r1, #2]!
 800b20c:	9b05      	ldr	r3, [sp, #20]
 800b20e:	9102      	str	r1, [sp, #8]
 800b210:	4283      	cmp	r3, r0
 800b212:	4616      	mov	r6, r2
 800b214:	f47f af47 	bne.w	800b0a6 <D80_1CH_HTONS_VOL_HP+0x3e>
 800b218:	9d07      	ldr	r5, [sp, #28]
 800b21a:	465b      	mov	r3, fp
 800b21c:	61eb      	str	r3, [r5, #28]
 800b21e:	9b01      	ldr	r3, [sp, #4]
 800b220:	9900      	ldr	r1, [sp, #0]
 800b222:	f8c5 c008 	str.w	ip, [r5, #8]
 800b226:	e9c5 3204 	strd	r3, r2, [r5, #16]
 800b22a:	9b06      	ldr	r3, [sp, #24]
 800b22c:	60e9      	str	r1, [r5, #12]
 800b22e:	2000      	movs	r0, #0
 800b230:	61ab      	str	r3, [r5, #24]
 800b232:	b009      	add	sp, #36	; 0x24
 800b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b238:	4632      	mov	r2, r6
 800b23a:	e7ef      	b.n	800b21c <D80_1CH_HTONS_VOL_HP+0x1b4>
 800b23c:	200000d0 	.word	0x200000d0
 800b240:	002d0024 	.word	0x002d0024
 800b244:	001c0015 	.word	0x001c0015
 800b248:	000f000a 	.word	0x000f000a
 800b24c:	00060003 	.word	0x00060003
 800b250:	0037003f 	.word	0x0037003f
 800b254:	00450049 	.word	0x00450049
 800b258:	00490045 	.word	0x00490045
 800b25c:	003f0037 	.word	0x003f0037
 800b260:	00030006 	.word	0x00030006
 800b264:	000a000f 	.word	0x000a000f
 800b268:	0015001c 	.word	0x0015001c
 800b26c:	0024002d 	.word	0x0024002d

0800b270 <D128_1CH_HTONS_VOL_HP>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	b093      	sub	sp, #76	; 0x4c
 800b276:	6914      	ldr	r4, [r2, #16]
 800b278:	9404      	str	r4, [sp, #16]
 800b27a:	6954      	ldr	r4, [r2, #20]
 800b27c:	9406      	str	r4, [sp, #24]
 800b27e:	6994      	ldr	r4, [r2, #24]
 800b280:	9410      	str	r4, [sp, #64]	; 0x40
 800b282:	6894      	ldr	r4, [r2, #8]
 800b284:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b286:	9403      	str	r4, [sp, #12]
 800b288:	68d4      	ldr	r4, [r2, #12]
 800b28a:	9211      	str	r2, [sp, #68]	; 0x44
 800b28c:	69d6      	ldr	r6, [r2, #28]
 800b28e:	9402      	str	r4, [sp, #8]
 800b290:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b292:	6a12      	ldr	r2, [r2, #32]
 800b294:	940d      	str	r4, [sp, #52]	; 0x34
 800b296:	920e      	str	r2, [sp, #56]	; 0x38
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 814a 	beq.w	800b532 <D128_1CH_HTONS_VOL_HP+0x2c2>
 800b29e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b2a2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2a4:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 800b570 <D128_1CH_HTONS_VOL_HP+0x300>
 800b2a8:	9107      	str	r1, [sp, #28]
 800b2aa:	f100 0310 	add.w	r3, r0, #16
 800b2ae:	469b      	mov	fp, r3
 800b2b0:	9605      	str	r6, [sp, #20]
 800b2b2:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 800b2b6:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 800b2ba:	ba49      	rev16	r1, r1
 800b2bc:	ba52      	rev16	r2, r2
 800b2be:	ba5b      	rev16	r3, r3
 800b2c0:	fa90 fa90 	rev16.w	sl, r0
 800b2c4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800b2c8:	b2cc      	uxtb	r4, r1
 800b2ca:	9e05      	ldr	r6, [sp, #20]
 800b2cc:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800b2d0:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800b2d4:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800b2d8:	0e09      	lsrs	r1, r1, #24
 800b2da:	4426      	add	r6, r4
 800b2dc:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800b2e0:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800b2e4:	b2d0      	uxtb	r0, r2
 800b2e6:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800b2ea:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b2ee:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 800b2f2:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800b2f6:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 800b2fa:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800b2fe:	0e12      	lsrs	r2, r2, #24
 800b300:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b304:	9401      	str	r4, [sp, #4]
 800b306:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 800b30a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800b30e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800b312:	9705      	str	r7, [sp, #20]
 800b314:	b2da      	uxtb	r2, r3
 800b316:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 800b31a:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 800b31e:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800b322:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800b326:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 800b32a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b32e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800b332:	0e1b      	lsrs	r3, r3, #24
 800b334:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800b338:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800b33c:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800b340:	fa5f f38a 	uxtb.w	r3, sl
 800b344:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b348:	960a      	str	r6, [sp, #40]	; 0x28
 800b34a:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800b34e:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800b352:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b356:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800b35a:	950b      	str	r5, [sp, #44]	; 0x2c
 800b35c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800b360:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800b364:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800b368:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800b36c:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800b370:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800b374:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800b378:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800b37c:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800b380:	9308      	str	r3, [sp, #32]
 800b382:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b386:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800b38a:	920c      	str	r2, [sp, #48]	; 0x30
 800b38c:	9b01      	ldr	r3, [sp, #4]
 800b38e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b390:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800b394:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b398:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b39c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800b3a0:	9b05      	ldr	r3, [sp, #20]
 800b3a2:	f8cd 9014 	str.w	r9, [sp, #20]
 800b3a6:	4691      	mov	r9, r2
 800b3a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3aa:	f8cd a004 	str.w	sl, [sp, #4]
 800b3ae:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 800b3b2:	9a01      	ldr	r2, [sp, #4]
 800b3b4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800b3b8:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 800b3bc:	9b08      	ldr	r3, [sp, #32]
 800b3be:	9a05      	ldr	r2, [sp, #20]
 800b3c0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b3c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b3c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3ca:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b3ce:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800b3d2:	9201      	str	r2, [sp, #4]
 800b3d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3d6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b3da:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b3de:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b3e2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b3e6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b3ea:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800b3ee:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b3f2:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800b3f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3fa:	0a92      	lsrs	r2, r2, #10
 800b3fc:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 800b400:	9205      	str	r2, [sp, #20]
 800b402:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800b406:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800b40a:	4d4b      	ldr	r5, [pc, #300]	; (800b538 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800b40c:	9a02      	ldr	r2, [sp, #8]
 800b40e:	fb29 2505 	smlad	r5, r9, r5, r2
 800b412:	4a4a      	ldr	r2, [pc, #296]	; (800b53c <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800b414:	fb2a 5502 	smlad	r5, sl, r2, r5
 800b418:	4a49      	ldr	r2, [pc, #292]	; (800b540 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800b41a:	fb21 5502 	smlad	r5, r1, r2, r5
 800b41e:	4a49      	ldr	r2, [pc, #292]	; (800b544 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800b420:	fb24 5502 	smlad	r5, r4, r2, r5
 800b424:	4a48      	ldr	r2, [pc, #288]	; (800b548 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800b426:	9e01      	ldr	r6, [sp, #4]
 800b428:	fb26 5502 	smlad	r5, r6, r2, r5
 800b42c:	4a47      	ldr	r2, [pc, #284]	; (800b54c <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800b42e:	fb20 5502 	smlad	r5, r0, r2, r5
 800b432:	4a47      	ldr	r2, [pc, #284]	; (800b550 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800b434:	fb23 5502 	smlad	r5, r3, r2, r5
 800b438:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800b43c:	fb27 520c 	smlad	r2, r7, ip, r5
 800b440:	4616      	mov	r6, r2
 800b442:	9d03      	ldr	r5, [sp, #12]
 800b444:	4a43      	ldr	r2, [pc, #268]	; (800b554 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800b446:	fb29 5c02 	smlad	ip, r9, r2, r5
 800b44a:	4a43      	ldr	r2, [pc, #268]	; (800b558 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800b44c:	fb2a ce02 	smlad	lr, sl, r2, ip
 800b450:	f8df c120 	ldr.w	ip, [pc, #288]	; 800b574 <D128_1CH_HTONS_VOL_HP+0x304>
 800b454:	fb21 ec0c 	smlad	ip, r1, ip, lr
 800b458:	f8df e11c 	ldr.w	lr, [pc, #284]	; 800b578 <D128_1CH_HTONS_VOL_HP+0x308>
 800b45c:	fb24 cc0e 	smlad	ip, r4, lr, ip
 800b460:	f8df e118 	ldr.w	lr, [pc, #280]	; 800b57c <D128_1CH_HTONS_VOL_HP+0x30c>
 800b464:	9d01      	ldr	r5, [sp, #4]
 800b466:	fb25 ce0e 	smlad	lr, r5, lr, ip
 800b46a:	f8df c114 	ldr.w	ip, [pc, #276]	; 800b580 <D128_1CH_HTONS_VOL_HP+0x310>
 800b46e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800b472:	f8df c110 	ldr.w	ip, [pc, #272]	; 800b584 <D128_1CH_HTONS_VOL_HP+0x314>
 800b476:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800b47a:	f8df e10c 	ldr.w	lr, [pc, #268]	; 800b588 <D128_1CH_HTONS_VOL_HP+0x318>
 800b47e:	fb27 c20e 	smlad	r2, r7, lr, ip
 800b482:	f04f 0c01 	mov.w	ip, #1
 800b486:	9202      	str	r2, [sp, #8]
 800b488:	fb29 fc0c 	smuad	ip, r9, ip
 800b48c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800b58c <D128_1CH_HTONS_VOL_HP+0x31c>
 800b490:	fb2a ca09 	smlad	sl, sl, r9, ip
 800b494:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800b590 <D128_1CH_HTONS_VOL_HP+0x320>
 800b498:	fb21 a909 	smlad	r9, r1, r9, sl
 800b49c:	492f      	ldr	r1, [pc, #188]	; (800b55c <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800b49e:	fb24 9901 	smlad	r9, r4, r1, r9
 800b4a2:	492f      	ldr	r1, [pc, #188]	; (800b560 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800b4a4:	fb25 9901 	smlad	r9, r5, r1, r9
 800b4a8:	492e      	ldr	r1, [pc, #184]	; (800b564 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800b4aa:	fb20 9901 	smlad	r9, r0, r1, r9
 800b4ae:	492e      	ldr	r1, [pc, #184]	; (800b568 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800b4b0:	fb23 9301 	smlad	r3, r3, r1, r9
 800b4b4:	482d      	ldr	r0, [pc, #180]	; (800b56c <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800b4b6:	fb27 3300 	smlad	r3, r7, r0, r3
 800b4ba:	9303      	str	r3, [sp, #12]
 800b4bc:	9b04      	ldr	r3, [sp, #16]
 800b4be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800b4c0:	f5a6 1580 	sub.w	r5, r6, #1048576	; 0x100000
 800b4c4:	442b      	add	r3, r5
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	9b06      	ldr	r3, [sp, #24]
 800b4ca:	9506      	str	r5, [sp, #24]
 800b4cc:	1ad2      	subs	r2, r2, r3
 800b4ce:	17d1      	asrs	r1, r2, #31
 800b4d0:	fba2 2304 	umull	r2, r3, r2, r4
 800b4d4:	fb04 3301 	mla	r3, r4, r1, r3
 800b4d8:	f112 4900 	adds.w	r9, r2, #2147483648	; 0x80000000
 800b4dc:	f143 0a00 	adc.w	sl, r3, #0
 800b4e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4e2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800b4e6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	fbc3 0102 	smlal	r0, r1, r3, r2
 800b4f0:	9b07      	ldr	r3, [sp, #28]
 800b4f2:	108a      	asrs	r2, r1, #2
 800b4f4:	f302 020f 	ssat	r2, #16, r2
 800b4f8:	f823 2b02 	strh.w	r2, [r3], #2
 800b4fc:	ea4f 024a 	mov.w	r2, sl, lsl #1
 800b500:	9204      	str	r2, [sp, #16]
 800b502:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b504:	9307      	str	r3, [sp, #28]
 800b506:	4293      	cmp	r3, r2
 800b508:	f10b 0b10 	add.w	fp, fp, #16
 800b50c:	f47f aed1 	bne.w	800b2b2 <D128_1CH_HTONS_VOL_HP+0x42>
 800b510:	9e05      	ldr	r6, [sp, #20]
 800b512:	4629      	mov	r1, r5
 800b514:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b516:	9803      	ldr	r0, [sp, #12]
 800b518:	6098      	str	r0, [r3, #8]
 800b51a:	9802      	ldr	r0, [sp, #8]
 800b51c:	60d8      	str	r0, [r3, #12]
 800b51e:	9804      	ldr	r0, [sp, #16]
 800b520:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b522:	61de      	str	r6, [r3, #28]
 800b524:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b528:	2000      	movs	r0, #0
 800b52a:	619a      	str	r2, [r3, #24]
 800b52c:	b013      	add	sp, #76	; 0x4c
 800b52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b532:	9906      	ldr	r1, [sp, #24]
 800b534:	e7ee      	b.n	800b514 <D128_1CH_HTONS_VOL_HP+0x2a4>
 800b536:	bf00      	nop
 800b538:	00780069 	.word	0x00780069
 800b53c:	005b004e 	.word	0x005b004e
 800b540:	00420037 	.word	0x00420037
 800b544:	002d0024 	.word	0x002d0024
 800b548:	001c0015 	.word	0x001c0015
 800b54c:	000f000a 	.word	0x000f000a
 800b550:	00060003 	.word	0x00060003
 800b554:	00880096 	.word	0x00880096
 800b558:	00a200ac 	.word	0x00a200ac
 800b55c:	0015001c 	.word	0x0015001c
 800b560:	0024002d 	.word	0x0024002d
 800b564:	00370042 	.word	0x00370042
 800b568:	004e005b 	.word	0x004e005b
 800b56c:	00690078 	.word	0x00690078
 800b570:	200000d0 	.word	0x200000d0
 800b574:	00b400ba 	.word	0x00b400ba
 800b578:	00be00c0 	.word	0x00be00c0
 800b57c:	00c000be 	.word	0x00c000be
 800b580:	00ba00b4 	.word	0x00ba00b4
 800b584:	00ac00a2 	.word	0x00ac00a2
 800b588:	00960088 	.word	0x00960088
 800b58c:	00030006 	.word	0x00030006
 800b590:	000a000f 	.word	0x000a000f

0800b594 <PDM_Filter_Init>:
 800b594:	4a59      	ldr	r2, [pc, #356]	; (800b6fc <PDM_Filter_Init+0x168>)
 800b596:	495a      	ldr	r1, [pc, #360]	; (800b700 <PDM_Filter_Init+0x16c>)
 800b598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59a:	6813      	ldr	r3, [r2, #0]
 800b59c:	f023 0301 	bic.w	r3, r3, #1
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	680b      	ldr	r3, [r1, #0]
 800b5a4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	f24c 2540 	movw	r5, #49728	; 0xc240
 800b5ae:	42ab      	cmp	r3, r5
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	d044      	beq.n	800b63e <PDM_Filter_Init+0xaa>
 800b5b4:	680b      	ldr	r3, [r1, #0]
 800b5b6:	f24c 2170 	movw	r1, #49776	; 0xc270
 800b5ba:	401a      	ands	r2, r3
 800b5bc:	428a      	cmp	r2, r1
 800b5be:	d03e      	beq.n	800b63e <PDM_Filter_Init+0xaa>
 800b5c0:	4b50      	ldr	r3, [pc, #320]	; (800b704 <PDM_Filter_Init+0x170>)
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	601a      	str	r2, [r3, #0]
 800b5c6:	6819      	ldr	r1, [r3, #0]
 800b5c8:	2900      	cmp	r1, #0
 800b5ca:	d1fc      	bne.n	800b5c6 <PDM_Filter_Init+0x32>
 800b5cc:	4b4e      	ldr	r3, [pc, #312]	; (800b708 <PDM_Filter_Init+0x174>)
 800b5ce:	4a4f      	ldr	r2, [pc, #316]	; (800b70c <PDM_Filter_Init+0x178>)
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	4b4e      	ldr	r3, [pc, #312]	; (800b710 <PDM_Filter_Init+0x17c>)
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	f104 000c 	add.w	r0, r4, #12
 800b5dc:	f04f 0240 	mov.w	r2, #64	; 0x40
 800b5e0:	d047      	beq.n	800b672 <PDM_Filter_Init+0xde>
 800b5e2:	f000 f9c7 	bl	800b974 <memset>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	6463      	str	r3, [r4, #68]	; 0x44
 800b5ea:	8820      	ldrh	r0, [r4, #0]
 800b5ec:	8963      	ldrh	r3, [r4, #10]
 800b5ee:	8922      	ldrh	r2, [r4, #8]
 800b5f0:	86a3      	strh	r3, [r4, #52]	; 0x34
 800b5f2:	2801      	cmp	r0, #1
 800b5f4:	f04f 0300 	mov.w	r3, #0
 800b5f8:	61a3      	str	r3, [r4, #24]
 800b5fa:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800b5fe:	60e3      	str	r3, [r4, #12]
 800b600:	6263      	str	r3, [r4, #36]	; 0x24
 800b602:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b606:	6423      	str	r3, [r4, #64]	; 0x40
 800b608:	86e2      	strh	r2, [r4, #54]	; 0x36
 800b60a:	d93a      	bls.n	800b682 <PDM_Filter_Init+0xee>
 800b60c:	2003      	movs	r0, #3
 800b60e:	2302      	movs	r3, #2
 800b610:	8862      	ldrh	r2, [r4, #2]
 800b612:	2a01      	cmp	r2, #1
 800b614:	d932      	bls.n	800b67c <PDM_Filter_Init+0xe8>
 800b616:	2140      	movs	r1, #64	; 0x40
 800b618:	2300      	movs	r3, #0
 800b61a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b61c:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800b620:	6862      	ldr	r2, [r4, #4]
 800b622:	bf04      	itt	eq
 800b624:	6421      	streq	r1, [r4, #64]	; 0x40
 800b626:	460b      	moveq	r3, r1
 800b628:	b11a      	cbz	r2, 800b632 <PDM_Filter_Init+0x9e>
 800b62a:	f043 0310 	orr.w	r3, r3, #16
 800b62e:	6423      	str	r3, [r4, #64]	; 0x40
 800b630:	62e2      	str	r2, [r4, #44]	; 0x2c
 800b632:	2200      	movs	r2, #0
 800b634:	8722      	strh	r2, [r4, #56]	; 0x38
 800b636:	b908      	cbnz	r0, 800b63c <PDM_Filter_Init+0xa8>
 800b638:	3380      	adds	r3, #128	; 0x80
 800b63a:	6423      	str	r3, [r4, #64]	; 0x40
 800b63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b63e:	4b35      	ldr	r3, [pc, #212]	; (800b714 <PDM_Filter_Init+0x180>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1bc      	bne.n	800b5c0 <PDM_Filter_Init+0x2c>
 800b646:	4a34      	ldr	r2, [pc, #208]	; (800b718 <PDM_Filter_Init+0x184>)
 800b648:	6813      	ldr	r3, [r2, #0]
 800b64a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b64e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b652:	d006      	beq.n	800b662 <PDM_Filter_Init+0xce>
 800b654:	6813      	ldr	r3, [r2, #0]
 800b656:	f240 4283 	movw	r2, #1155	; 0x483
 800b65a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b65e:	4293      	cmp	r3, r2
 800b660:	d1ae      	bne.n	800b5c0 <PDM_Filter_Init+0x2c>
 800b662:	4b2e      	ldr	r3, [pc, #184]	; (800b71c <PDM_Filter_Init+0x188>)
 800b664:	2201      	movs	r2, #1
 800b666:	601a      	str	r2, [r3, #0]
 800b668:	6819      	ldr	r1, [r3, #0]
 800b66a:	2900      	cmp	r1, #0
 800b66c:	d1fc      	bne.n	800b668 <PDM_Filter_Init+0xd4>
 800b66e:	4b2c      	ldr	r3, [pc, #176]	; (800b720 <PDM_Filter_Init+0x18c>)
 800b670:	e7ad      	b.n	800b5ce <PDM_Filter_Init+0x3a>
 800b672:	f000 f97f 	bl	800b974 <memset>
 800b676:	4b26      	ldr	r3, [pc, #152]	; (800b710 <PDM_Filter_Init+0x17c>)
 800b678:	6463      	str	r3, [r4, #68]	; 0x44
 800b67a:	e7b6      	b.n	800b5ea <PDM_Filter_Init+0x56>
 800b67c:	d038      	beq.n	800b6f0 <PDM_Filter_Init+0x15c>
 800b67e:	4618      	mov	r0, r3
 800b680:	e7c9      	b.n	800b616 <PDM_Filter_Init+0x82>
 800b682:	4d28      	ldr	r5, [pc, #160]	; (800b724 <PDM_Filter_Init+0x190>)
 800b684:	782a      	ldrb	r2, [r5, #0]
 800b686:	d01a      	beq.n	800b6be <PDM_Filter_Init+0x12a>
 800b688:	2a01      	cmp	r2, #1
 800b68a:	d001      	beq.n	800b690 <PDM_Filter_Init+0xfc>
 800b68c:	2001      	movs	r0, #1
 800b68e:	e7bf      	b.n	800b610 <PDM_Filter_Init+0x7c>
 800b690:	4925      	ldr	r1, [pc, #148]	; (800b728 <PDM_Filter_Init+0x194>)
 800b692:	f8df c09c 	ldr.w	ip, [pc, #156]	; 800b730 <PDM_Filter_Init+0x19c>
 800b696:	4f25      	ldr	r7, [pc, #148]	; (800b72c <PDM_Filter_Init+0x198>)
 800b698:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800b69c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b6a0:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800b6a4:	ea02 0007 	and.w	r0, r2, r7
 800b6a8:	4303      	orrs	r3, r0
 800b6aa:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800b6ae:	4413      	add	r3, r2
 800b6b0:	428e      	cmp	r6, r1
 800b6b2:	600b      	str	r3, [r1, #0]
 800b6b4:	d1f2      	bne.n	800b69c <PDM_Filter_Init+0x108>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	702b      	strb	r3, [r5, #0]
 800b6ba:	2001      	movs	r0, #1
 800b6bc:	e7a8      	b.n	800b610 <PDM_Filter_Init+0x7c>
 800b6be:	2a00      	cmp	r2, #0
 800b6c0:	d1a6      	bne.n	800b610 <PDM_Filter_Init+0x7c>
 800b6c2:	4919      	ldr	r1, [pc, #100]	; (800b728 <PDM_Filter_Init+0x194>)
 800b6c4:	f8df c068 	ldr.w	ip, [pc, #104]	; 800b730 <PDM_Filter_Init+0x19c>
 800b6c8:	4f18      	ldr	r7, [pc, #96]	; (800b72c <PDM_Filter_Init+0x198>)
 800b6ca:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800b6ce:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b6d2:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800b6d6:	ea02 0007 	and.w	r0, r2, r7
 800b6da:	4303      	orrs	r3, r0
 800b6dc:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800b6e0:	4413      	add	r3, r2
 800b6e2:	428e      	cmp	r6, r1
 800b6e4:	600b      	str	r3, [r1, #0]
 800b6e6:	d1f2      	bne.n	800b6ce <PDM_Filter_Init+0x13a>
 800b6e8:	2001      	movs	r0, #1
 800b6ea:	7028      	strb	r0, [r5, #0]
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	e78f      	b.n	800b610 <PDM_Filter_Init+0x7c>
 800b6f0:	2220      	movs	r2, #32
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	6422      	str	r2, [r4, #64]	; 0x40
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	2160      	movs	r1, #96	; 0x60
 800b6fa:	e78e      	b.n	800b61a <PDM_Filter_Init+0x86>
 800b6fc:	e0002000 	.word	0xe0002000
 800b700:	e000ed00 	.word	0xe000ed00
 800b704:	40023008 	.word	0x40023008
 800b708:	40023000 	.word	0x40023000
 800b70c:	f407a5c2 	.word	0xf407a5c2
 800b710:	b5e8b5cd 	.word	0xb5e8b5cd
 800b714:	e0042000 	.word	0xe0042000
 800b718:	5c001000 	.word	0x5c001000
 800b71c:	58024c08 	.word	0x58024c08
 800b720:	58024c00 	.word	0x58024c00
 800b724:	20003dac 	.word	0x20003dac
 800b728:	200000cc 	.word	0x200000cc
 800b72c:	000ffc00 	.word	0x000ffc00
 800b730:	3ff00000 	.word	0x3ff00000

0800b734 <PDM_Filter_setConfig>:
 800b734:	4b6d      	ldr	r3, [pc, #436]	; (800b8ec <PDM_Filter_setConfig+0x1b8>)
 800b736:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b738:	429a      	cmp	r2, r3
 800b73a:	d12f      	bne.n	800b79c <PDM_Filter_setConfig+0x68>
 800b73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b73e:	880e      	ldrh	r6, [r1, #0]
 800b740:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b742:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800b746:	ed2d 8b02 	vpush	{d8}
 800b74a:	4604      	mov	r4, r0
 800b74c:	1e72      	subs	r2, r6, #1
 800b74e:	460d      	mov	r5, r1
 800b750:	2a06      	cmp	r2, #6
 800b752:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b756:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 800b75a:	6421      	str	r1, [r4, #64]	; 0x40
 800b75c:	b083      	sub	sp, #12
 800b75e:	d904      	bls.n	800b76a <PDM_Filter_setConfig+0x36>
 800b760:	42b8      	cmp	r0, r7
 800b762:	f000 80bb 	beq.w	800b8dc <PDM_Filter_setConfig+0x1a8>
 800b766:	2008      	movs	r0, #8
 800b768:	e01d      	b.n	800b7a6 <PDM_Filter_setConfig+0x72>
 800b76a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 800b76c:	42b2      	cmp	r2, r6
 800b76e:	d070      	beq.n	800b852 <PDM_Filter_setConfig+0x11e>
 800b770:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800b774:	f023 0301 	bic.w	r3, r3, #1
 800b778:	4333      	orrs	r3, r6
 800b77a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b77e:	6423      	str	r3, [r4, #64]	; 0x40
 800b780:	2a70      	cmp	r2, #112	; 0x70
 800b782:	f003 030f 	and.w	r3, r3, #15
 800b786:	f103 33ff 	add.w	r3, r3, #4294967295
 800b78a:	d067      	beq.n	800b85c <PDM_Filter_setConfig+0x128>
 800b78c:	2b06      	cmp	r3, #6
 800b78e:	d809      	bhi.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b790:	e8df f003 	tbb	[pc, r3]
 800b794:	89868380 	.word	0x89868380
 800b798:	8f8c      	.short	0x8f8c
 800b79a:	7d          	.byte	0x7d
 800b79b:	00          	.byte	0x00
 800b79c:	2004      	movs	r0, #4
 800b79e:	4770      	bx	lr
 800b7a0:	4b53      	ldr	r3, [pc, #332]	; (800b8f0 <PDM_Filter_setConfig+0x1bc>)
 800b7a2:	64a3      	str	r3, [r4, #72]	; 0x48
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	f117 0f0c 	cmn.w	r7, #12
 800b7aa:	da0a      	bge.n	800b7c2 <PDM_Filter_setConfig+0x8e>
 800b7ac:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800b7b0:	3040      	adds	r0, #64	; 0x40
 800b7b2:	80ab      	strh	r3, [r5, #4]
 800b7b4:	886b      	ldrh	r3, [r5, #2]
 800b7b6:	8663      	strh	r3, [r4, #50]	; 0x32
 800b7b8:	8626      	strh	r6, [r4, #48]	; 0x30
 800b7ba:	b003      	add	sp, #12
 800b7bc:	ecbd 8b02 	vpop	{d8}
 800b7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7c2:	2f33      	cmp	r7, #51	; 0x33
 800b7c4:	dc41      	bgt.n	800b84a <PDM_Filter_setConfig+0x116>
 800b7c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7c8:	f003 030f 	and.w	r3, r3, #15
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	2b06      	cmp	r3, #6
 800b7d0:	d858      	bhi.n	800b884 <PDM_Filter_setConfig+0x150>
 800b7d2:	4948      	ldr	r1, [pc, #288]	; (800b8f4 <PDM_Filter_setConfig+0x1c0>)
 800b7d4:	4a48      	ldr	r2, [pc, #288]	; (800b8f8 <PDM_Filter_setConfig+0x1c4>)
 800b7d6:	eddf 0a49 	vldr	s1, [pc, #292]	; 800b8fc <PDM_Filter_setConfig+0x1c8>
 800b7da:	9001      	str	r0, [sp, #4]
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4419      	add	r1, r3
 800b7e0:	edd1 7a00 	vldr	s15, [r1]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b7ea:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b7ee:	ed93 8a00 	vldr	s16, [r3]
 800b7f2:	f000 f8ff 	bl	800b9f4 <powf>
 800b7f6:	9801      	ldr	r0, [sp, #4]
 800b7f8:	eef0 8a40 	vmov.f32	s17, s0
 800b7fc:	ee07 7a10 	vmov	s14, r7
 800b800:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800b900 <PDM_Filter_setConfig+0x1cc>
 800b804:	9001      	str	r0, [sp, #4]
 800b806:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 800b80a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800b80e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b812:	f000 f8ef 	bl	800b9f4 <powf>
 800b816:	ee28 8a28 	vmul.f32	s16, s16, s17
 800b81a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b81e:	f000 f94d 	bl	800babc <roundf>
 800b822:	9801      	ldr	r0, [sp, #4]
 800b824:	886b      	ldrh	r3, [r5, #2]
 800b826:	8663      	strh	r3, [r4, #50]	; 0x32
 800b828:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800b82c:	8727      	strh	r7, [r4, #56]	; 0x38
 800b82e:	8626      	strh	r6, [r4, #48]	; 0x30
 800b830:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800b834:	2800      	cmp	r0, #0
 800b836:	d1c0      	bne.n	800b7ba <PDM_Filter_setConfig+0x86>
 800b838:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b83a:	2000      	movs	r0, #0
 800b83c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b840:	6423      	str	r3, [r4, #64]	; 0x40
 800b842:	b003      	add	sp, #12
 800b844:	ecbd 8b02 	vpop	{d8}
 800b848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b84a:	2333      	movs	r3, #51	; 0x33
 800b84c:	3040      	adds	r0, #64	; 0x40
 800b84e:	80ab      	strh	r3, [r5, #4]
 800b850:	e7b0      	b.n	800b7b4 <PDM_Filter_setConfig+0x80>
 800b852:	42b8      	cmp	r0, r7
 800b854:	d1a6      	bne.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b856:	886b      	ldrh	r3, [r5, #2]
 800b858:	8663      	strh	r3, [r4, #50]	; 0x32
 800b85a:	e7ed      	b.n	800b838 <PDM_Filter_setConfig+0x104>
 800b85c:	2b06      	cmp	r3, #6
 800b85e:	d8a1      	bhi.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b860:	a201      	add	r2, pc, #4	; (adr r2, 800b868 <PDM_Filter_setConfig+0x134>)
 800b862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b866:	bf00      	nop
 800b868:	0800b8d7 	.word	0x0800b8d7
 800b86c:	0800b8d1 	.word	0x0800b8d1
 800b870:	0800b8c5 	.word	0x0800b8c5
 800b874:	0800b8bf 	.word	0x0800b8bf
 800b878:	0800b7a1 	.word	0x0800b7a1
 800b87c:	0800b8b9 	.word	0x0800b8b9
 800b880:	0800b8cb 	.word	0x0800b8cb
 800b884:	eddf 8a1f 	vldr	s17, [pc, #124]	; 800b904 <PDM_Filter_setConfig+0x1d0>
 800b888:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 800b908 <PDM_Filter_setConfig+0x1d4>
 800b88c:	e7b6      	b.n	800b7fc <PDM_Filter_setConfig+0xc8>
 800b88e:	4b1f      	ldr	r3, [pc, #124]	; (800b90c <PDM_Filter_setConfig+0x1d8>)
 800b890:	64a3      	str	r3, [r4, #72]	; 0x48
 800b892:	e787      	b.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b894:	4b1e      	ldr	r3, [pc, #120]	; (800b910 <PDM_Filter_setConfig+0x1dc>)
 800b896:	64a3      	str	r3, [r4, #72]	; 0x48
 800b898:	e784      	b.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b89a:	4b1e      	ldr	r3, [pc, #120]	; (800b914 <PDM_Filter_setConfig+0x1e0>)
 800b89c:	64a3      	str	r3, [r4, #72]	; 0x48
 800b89e:	e781      	b.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b8a0:	4b1d      	ldr	r3, [pc, #116]	; (800b918 <PDM_Filter_setConfig+0x1e4>)
 800b8a2:	64a3      	str	r3, [r4, #72]	; 0x48
 800b8a4:	e77e      	b.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b8a6:	4b1d      	ldr	r3, [pc, #116]	; (800b91c <PDM_Filter_setConfig+0x1e8>)
 800b8a8:	64a3      	str	r3, [r4, #72]	; 0x48
 800b8aa:	e77b      	b.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b8ac:	4b1c      	ldr	r3, [pc, #112]	; (800b920 <PDM_Filter_setConfig+0x1ec>)
 800b8ae:	64a3      	str	r3, [r4, #72]	; 0x48
 800b8b0:	e778      	b.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b8b2:	4b1c      	ldr	r3, [pc, #112]	; (800b924 <PDM_Filter_setConfig+0x1f0>)
 800b8b4:	64a3      	str	r3, [r4, #72]	; 0x48
 800b8b6:	e775      	b.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b8b8:	4b1b      	ldr	r3, [pc, #108]	; (800b928 <PDM_Filter_setConfig+0x1f4>)
 800b8ba:	64a3      	str	r3, [r4, #72]	; 0x48
 800b8bc:	e772      	b.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b8be:	4b1b      	ldr	r3, [pc, #108]	; (800b92c <PDM_Filter_setConfig+0x1f8>)
 800b8c0:	64a3      	str	r3, [r4, #72]	; 0x48
 800b8c2:	e76f      	b.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b8c4:	4b1a      	ldr	r3, [pc, #104]	; (800b930 <PDM_Filter_setConfig+0x1fc>)
 800b8c6:	64a3      	str	r3, [r4, #72]	; 0x48
 800b8c8:	e76c      	b.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b8ca:	4b1a      	ldr	r3, [pc, #104]	; (800b934 <PDM_Filter_setConfig+0x200>)
 800b8cc:	64a3      	str	r3, [r4, #72]	; 0x48
 800b8ce:	e769      	b.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b8d0:	4b19      	ldr	r3, [pc, #100]	; (800b938 <PDM_Filter_setConfig+0x204>)
 800b8d2:	64a3      	str	r3, [r4, #72]	; 0x48
 800b8d4:	e766      	b.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b8d6:	4b19      	ldr	r3, [pc, #100]	; (800b93c <PDM_Filter_setConfig+0x208>)
 800b8d8:	64a3      	str	r3, [r4, #72]	; 0x48
 800b8da:	e763      	b.n	800b7a4 <PDM_Filter_setConfig+0x70>
 800b8dc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800b8de:	42b3      	cmp	r3, r6
 800b8e0:	f47f af41 	bne.w	800b766 <PDM_Filter_setConfig+0x32>
 800b8e4:	886b      	ldrh	r3, [r5, #2]
 800b8e6:	8663      	strh	r3, [r4, #50]	; 0x32
 800b8e8:	2008      	movs	r0, #8
 800b8ea:	e766      	b.n	800b7ba <PDM_Filter_setConfig+0x86>
 800b8ec:	b5e8b5cd 	.word	0xb5e8b5cd
 800b8f0:	0800aa15 	.word	0x0800aa15
 800b8f4:	0800c260 	.word	0x0800c260
 800b8f8:	0800c27c 	.word	0x0800c27c
 800b8fc:	42000000 	.word	0x42000000
 800b900:	3d4ccccd 	.word	0x3d4ccccd
 800b904:	4f800000 	.word	0x4f800000
 800b908:	00000000 	.word	0x00000000
 800b90c:	08009e15 	.word	0x08009e15
 800b910:	08009f9d 	.word	0x08009f9d
 800b914:	0800a185 	.word	0x0800a185
 800b918:	0800a3a1 	.word	0x0800a3a1
 800b91c:	0800a635 	.word	0x0800a635
 800b920:	08009b75 	.word	0x08009b75
 800b924:	08009c8d 	.word	0x08009c8d
 800b928:	0800aafd 	.word	0x0800aafd
 800b92c:	0800b271 	.word	0x0800b271
 800b930:	0800b069 	.word	0x0800b069
 800b934:	0800ac41 	.word	0x0800ac41
 800b938:	0800aec9 	.word	0x0800aec9
 800b93c:	0800ad5d 	.word	0x0800ad5d

0800b940 <PDM_Filter>:
 800b940:	b410      	push	{r4}
 800b942:	4b0b      	ldr	r3, [pc, #44]	; (800b970 <PDM_Filter+0x30>)
 800b944:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800b946:	429c      	cmp	r4, r3
 800b948:	d107      	bne.n	800b95a <PDM_Filter+0x1a>
 800b94a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b94c:	05dc      	lsls	r4, r3, #23
 800b94e:	d508      	bpl.n	800b962 <PDM_Filter+0x22>
 800b950:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800b952:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b956:	320c      	adds	r2, #12
 800b958:	4718      	bx	r3
 800b95a:	2004      	movs	r0, #4
 800b95c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b960:	4770      	bx	lr
 800b962:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b966:	bf14      	ite	ne
 800b968:	2020      	movne	r0, #32
 800b96a:	2030      	moveq	r0, #48	; 0x30
 800b96c:	e7f6      	b.n	800b95c <PDM_Filter+0x1c>
 800b96e:	bf00      	nop
 800b970:	b5e8b5cd 	.word	0xb5e8b5cd

0800b974 <memset>:
 800b974:	4402      	add	r2, r0
 800b976:	4603      	mov	r3, r0
 800b978:	4293      	cmp	r3, r2
 800b97a:	d100      	bne.n	800b97e <memset+0xa>
 800b97c:	4770      	bx	lr
 800b97e:	f803 1b01 	strb.w	r1, [r3], #1
 800b982:	e7f9      	b.n	800b978 <memset+0x4>

0800b984 <__errno>:
 800b984:	4b01      	ldr	r3, [pc, #4]	; (800b98c <__errno+0x8>)
 800b986:	6818      	ldr	r0, [r3, #0]
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	2000051c 	.word	0x2000051c

0800b990 <__libc_init_array>:
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	4d0d      	ldr	r5, [pc, #52]	; (800b9c8 <__libc_init_array+0x38>)
 800b994:	4c0d      	ldr	r4, [pc, #52]	; (800b9cc <__libc_init_array+0x3c>)
 800b996:	1b64      	subs	r4, r4, r5
 800b998:	10a4      	asrs	r4, r4, #2
 800b99a:	2600      	movs	r6, #0
 800b99c:	42a6      	cmp	r6, r4
 800b99e:	d109      	bne.n	800b9b4 <__libc_init_array+0x24>
 800b9a0:	4d0b      	ldr	r5, [pc, #44]	; (800b9d0 <__libc_init_array+0x40>)
 800b9a2:	4c0c      	ldr	r4, [pc, #48]	; (800b9d4 <__libc_init_array+0x44>)
 800b9a4:	f000 fc0c 	bl	800c1c0 <_init>
 800b9a8:	1b64      	subs	r4, r4, r5
 800b9aa:	10a4      	asrs	r4, r4, #2
 800b9ac:	2600      	movs	r6, #0
 800b9ae:	42a6      	cmp	r6, r4
 800b9b0:	d105      	bne.n	800b9be <__libc_init_array+0x2e>
 800b9b2:	bd70      	pop	{r4, r5, r6, pc}
 800b9b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9b8:	4798      	blx	r3
 800b9ba:	3601      	adds	r6, #1
 800b9bc:	e7ee      	b.n	800b99c <__libc_init_array+0xc>
 800b9be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9c2:	4798      	blx	r3
 800b9c4:	3601      	adds	r6, #1
 800b9c6:	e7f2      	b.n	800b9ae <__libc_init_array+0x1e>
 800b9c8:	0800c2b8 	.word	0x0800c2b8
 800b9cc:	0800c2b8 	.word	0x0800c2b8
 800b9d0:	0800c2b8 	.word	0x0800c2b8
 800b9d4:	0800c2bc 	.word	0x0800c2bc

0800b9d8 <memcpy>:
 800b9d8:	440a      	add	r2, r1
 800b9da:	4291      	cmp	r1, r2
 800b9dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9e0:	d100      	bne.n	800b9e4 <memcpy+0xc>
 800b9e2:	4770      	bx	lr
 800b9e4:	b510      	push	{r4, lr}
 800b9e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9ee:	4291      	cmp	r1, r2
 800b9f0:	d1f9      	bne.n	800b9e6 <memcpy+0xe>
 800b9f2:	bd10      	pop	{r4, pc}

0800b9f4 <powf>:
 800b9f4:	b508      	push	{r3, lr}
 800b9f6:	ed2d 8b04 	vpush	{d8-d9}
 800b9fa:	eeb0 8a60 	vmov.f32	s16, s1
 800b9fe:	eeb0 9a40 	vmov.f32	s18, s0
 800ba02:	f000 f87f 	bl	800bb04 <__ieee754_powf>
 800ba06:	eeb4 8a48 	vcmp.f32	s16, s16
 800ba0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba0e:	eef0 8a40 	vmov.f32	s17, s0
 800ba12:	d63e      	bvs.n	800ba92 <powf+0x9e>
 800ba14:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ba18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba1c:	d112      	bne.n	800ba44 <powf+0x50>
 800ba1e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ba22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba26:	d039      	beq.n	800ba9c <powf+0xa8>
 800ba28:	eeb0 0a48 	vmov.f32	s0, s16
 800ba2c:	f000 f839 	bl	800baa2 <finitef>
 800ba30:	b378      	cbz	r0, 800ba92 <powf+0x9e>
 800ba32:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ba36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba3a:	d52a      	bpl.n	800ba92 <powf+0x9e>
 800ba3c:	f7ff ffa2 	bl	800b984 <__errno>
 800ba40:	2322      	movs	r3, #34	; 0x22
 800ba42:	e014      	b.n	800ba6e <powf+0x7a>
 800ba44:	f000 f82d 	bl	800baa2 <finitef>
 800ba48:	b998      	cbnz	r0, 800ba72 <powf+0x7e>
 800ba4a:	eeb0 0a49 	vmov.f32	s0, s18
 800ba4e:	f000 f828 	bl	800baa2 <finitef>
 800ba52:	b170      	cbz	r0, 800ba72 <powf+0x7e>
 800ba54:	eeb0 0a48 	vmov.f32	s0, s16
 800ba58:	f000 f823 	bl	800baa2 <finitef>
 800ba5c:	b148      	cbz	r0, 800ba72 <powf+0x7e>
 800ba5e:	eef4 8a68 	vcmp.f32	s17, s17
 800ba62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba66:	d7e9      	bvc.n	800ba3c <powf+0x48>
 800ba68:	f7ff ff8c 	bl	800b984 <__errno>
 800ba6c:	2321      	movs	r3, #33	; 0x21
 800ba6e:	6003      	str	r3, [r0, #0]
 800ba70:	e00f      	b.n	800ba92 <powf+0x9e>
 800ba72:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ba76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba7a:	d10a      	bne.n	800ba92 <powf+0x9e>
 800ba7c:	eeb0 0a49 	vmov.f32	s0, s18
 800ba80:	f000 f80f 	bl	800baa2 <finitef>
 800ba84:	b128      	cbz	r0, 800ba92 <powf+0x9e>
 800ba86:	eeb0 0a48 	vmov.f32	s0, s16
 800ba8a:	f000 f80a 	bl	800baa2 <finitef>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d1d4      	bne.n	800ba3c <powf+0x48>
 800ba92:	eeb0 0a68 	vmov.f32	s0, s17
 800ba96:	ecbd 8b04 	vpop	{d8-d9}
 800ba9a:	bd08      	pop	{r3, pc}
 800ba9c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800baa0:	e7f7      	b.n	800ba92 <powf+0x9e>

0800baa2 <finitef>:
 800baa2:	b082      	sub	sp, #8
 800baa4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800baa8:	9801      	ldr	r0, [sp, #4]
 800baaa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800baae:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800bab2:	bfac      	ite	ge
 800bab4:	2000      	movge	r0, #0
 800bab6:	2001      	movlt	r0, #1
 800bab8:	b002      	add	sp, #8
 800baba:	4770      	bx	lr

0800babc <roundf>:
 800babc:	ee10 0a10 	vmov	r0, s0
 800bac0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800bac4:	3a7f      	subs	r2, #127	; 0x7f
 800bac6:	2a16      	cmp	r2, #22
 800bac8:	dc15      	bgt.n	800baf6 <roundf+0x3a>
 800baca:	2a00      	cmp	r2, #0
 800bacc:	da08      	bge.n	800bae0 <roundf+0x24>
 800bace:	3201      	adds	r2, #1
 800bad0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800bad4:	d101      	bne.n	800bada <roundf+0x1e>
 800bad6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800bada:	ee00 3a10 	vmov	s0, r3
 800bade:	4770      	bx	lr
 800bae0:	4907      	ldr	r1, [pc, #28]	; (800bb00 <roundf+0x44>)
 800bae2:	4111      	asrs	r1, r2
 800bae4:	4208      	tst	r0, r1
 800bae6:	d0fa      	beq.n	800bade <roundf+0x22>
 800bae8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800baec:	4113      	asrs	r3, r2
 800baee:	4403      	add	r3, r0
 800baf0:	ea23 0301 	bic.w	r3, r3, r1
 800baf4:	e7f1      	b.n	800bada <roundf+0x1e>
 800baf6:	2a80      	cmp	r2, #128	; 0x80
 800baf8:	d1f1      	bne.n	800bade <roundf+0x22>
 800bafa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bafe:	4770      	bx	lr
 800bb00:	007fffff 	.word	0x007fffff

0800bb04 <__ieee754_powf>:
 800bb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb08:	ee10 4a90 	vmov	r4, s1
 800bb0c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800bb10:	ed2d 8b02 	vpush	{d8}
 800bb14:	ee10 7a10 	vmov	r7, s0
 800bb18:	eeb0 8a40 	vmov.f32	s16, s0
 800bb1c:	eef0 8a60 	vmov.f32	s17, s1
 800bb20:	d10c      	bne.n	800bb3c <__ieee754_powf+0x38>
 800bb22:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800bb26:	007f      	lsls	r7, r7, #1
 800bb28:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800bb2c:	f240 8292 	bls.w	800c054 <__ieee754_powf+0x550>
 800bb30:	ee38 0a28 	vadd.f32	s0, s16, s17
 800bb34:	ecbd 8b02 	vpop	{d8}
 800bb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb3c:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800bb40:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bb44:	dcf4      	bgt.n	800bb30 <__ieee754_powf+0x2c>
 800bb46:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800bb4a:	dd08      	ble.n	800bb5e <__ieee754_powf+0x5a>
 800bb4c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800bb50:	d1ee      	bne.n	800bb30 <__ieee754_powf+0x2c>
 800bb52:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800bb56:	0064      	lsls	r4, r4, #1
 800bb58:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800bb5c:	e7e6      	b.n	800bb2c <__ieee754_powf+0x28>
 800bb5e:	2f00      	cmp	r7, #0
 800bb60:	da20      	bge.n	800bba4 <__ieee754_powf+0xa0>
 800bb62:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800bb66:	da2d      	bge.n	800bbc4 <__ieee754_powf+0xc0>
 800bb68:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800bb6c:	f2c0 827b 	blt.w	800c066 <__ieee754_powf+0x562>
 800bb70:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800bb74:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800bb78:	fa48 f603 	asr.w	r6, r8, r3
 800bb7c:	fa06 f303 	lsl.w	r3, r6, r3
 800bb80:	4543      	cmp	r3, r8
 800bb82:	f040 8270 	bne.w	800c066 <__ieee754_powf+0x562>
 800bb86:	f006 0601 	and.w	r6, r6, #1
 800bb8a:	f1c6 0602 	rsb	r6, r6, #2
 800bb8e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800bb92:	d11f      	bne.n	800bbd4 <__ieee754_powf+0xd0>
 800bb94:	2c00      	cmp	r4, #0
 800bb96:	f280 8263 	bge.w	800c060 <__ieee754_powf+0x55c>
 800bb9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bb9e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800bba2:	e7c7      	b.n	800bb34 <__ieee754_powf+0x30>
 800bba4:	2600      	movs	r6, #0
 800bba6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800bbaa:	d1f0      	bne.n	800bb8e <__ieee754_powf+0x8a>
 800bbac:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800bbb0:	f000 8250 	beq.w	800c054 <__ieee754_powf+0x550>
 800bbb4:	dd08      	ble.n	800bbc8 <__ieee754_powf+0xc4>
 800bbb6:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800bebc <__ieee754_powf+0x3b8>
 800bbba:	2c00      	cmp	r4, #0
 800bbbc:	bfa8      	it	ge
 800bbbe:	eeb0 0a68 	vmovge.f32	s0, s17
 800bbc2:	e7b7      	b.n	800bb34 <__ieee754_powf+0x30>
 800bbc4:	2602      	movs	r6, #2
 800bbc6:	e7ee      	b.n	800bba6 <__ieee754_powf+0xa2>
 800bbc8:	2c00      	cmp	r4, #0
 800bbca:	f280 8246 	bge.w	800c05a <__ieee754_powf+0x556>
 800bbce:	eeb1 0a68 	vneg.f32	s0, s17
 800bbd2:	e7af      	b.n	800bb34 <__ieee754_powf+0x30>
 800bbd4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800bbd8:	d102      	bne.n	800bbe0 <__ieee754_powf+0xdc>
 800bbda:	ee28 0a08 	vmul.f32	s0, s16, s16
 800bbde:	e7a9      	b.n	800bb34 <__ieee754_powf+0x30>
 800bbe0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800bbe4:	eeb0 0a48 	vmov.f32	s0, s16
 800bbe8:	d107      	bne.n	800bbfa <__ieee754_powf+0xf6>
 800bbea:	2f00      	cmp	r7, #0
 800bbec:	db05      	blt.n	800bbfa <__ieee754_powf+0xf6>
 800bbee:	ecbd 8b02 	vpop	{d8}
 800bbf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf6:	f000 badf 	b.w	800c1b8 <__ieee754_sqrtf>
 800bbfa:	f000 fa4d 	bl	800c098 <fabsf>
 800bbfe:	b125      	cbz	r5, 800bc0a <__ieee754_powf+0x106>
 800bc00:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800bc04:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800bc08:	d115      	bne.n	800bc36 <__ieee754_powf+0x132>
 800bc0a:	2c00      	cmp	r4, #0
 800bc0c:	bfbc      	itt	lt
 800bc0e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800bc12:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800bc16:	2f00      	cmp	r7, #0
 800bc18:	da8c      	bge.n	800bb34 <__ieee754_powf+0x30>
 800bc1a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800bc1e:	4335      	orrs	r5, r6
 800bc20:	d104      	bne.n	800bc2c <__ieee754_powf+0x128>
 800bc22:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bc26:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bc2a:	e783      	b.n	800bb34 <__ieee754_powf+0x30>
 800bc2c:	2e01      	cmp	r6, #1
 800bc2e:	d181      	bne.n	800bb34 <__ieee754_powf+0x30>
 800bc30:	eeb1 0a40 	vneg.f32	s0, s0
 800bc34:	e77e      	b.n	800bb34 <__ieee754_powf+0x30>
 800bc36:	0ff8      	lsrs	r0, r7, #31
 800bc38:	3801      	subs	r0, #1
 800bc3a:	ea56 0300 	orrs.w	r3, r6, r0
 800bc3e:	d104      	bne.n	800bc4a <__ieee754_powf+0x146>
 800bc40:	ee38 8a48 	vsub.f32	s16, s16, s16
 800bc44:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800bc48:	e774      	b.n	800bb34 <__ieee754_powf+0x30>
 800bc4a:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800bc4e:	dd73      	ble.n	800bd38 <__ieee754_powf+0x234>
 800bc50:	4b9b      	ldr	r3, [pc, #620]	; (800bec0 <__ieee754_powf+0x3bc>)
 800bc52:	429d      	cmp	r5, r3
 800bc54:	dc08      	bgt.n	800bc68 <__ieee754_powf+0x164>
 800bc56:	2c00      	cmp	r4, #0
 800bc58:	da0b      	bge.n	800bc72 <__ieee754_powf+0x16e>
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	ecbd 8b02 	vpop	{d8}
 800bc60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc64:	f000 baa2 	b.w	800c1ac <__math_oflowf>
 800bc68:	4b96      	ldr	r3, [pc, #600]	; (800bec4 <__ieee754_powf+0x3c0>)
 800bc6a:	429d      	cmp	r5, r3
 800bc6c:	dd08      	ble.n	800bc80 <__ieee754_powf+0x17c>
 800bc6e:	2c00      	cmp	r4, #0
 800bc70:	dcf3      	bgt.n	800bc5a <__ieee754_powf+0x156>
 800bc72:	2000      	movs	r0, #0
 800bc74:	ecbd 8b02 	vpop	{d8}
 800bc78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc7c:	f000 ba90 	b.w	800c1a0 <__math_uflowf>
 800bc80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bc84:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bc88:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800bec8 <__ieee754_powf+0x3c4>
 800bc8c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800bc90:	eee0 6a67 	vfms.f32	s13, s0, s15
 800bc94:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bc98:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800bc9c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bca4:	eddf 7a89 	vldr	s15, [pc, #548]	; 800becc <__ieee754_powf+0x3c8>
 800bca8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800bcac:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800bed0 <__ieee754_powf+0x3cc>
 800bcb0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bcb4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800bed4 <__ieee754_powf+0x3d0>
 800bcb8:	eef0 6a67 	vmov.f32	s13, s15
 800bcbc:	eee0 6a07 	vfma.f32	s13, s0, s14
 800bcc0:	ee16 3a90 	vmov	r3, s13
 800bcc4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bcc8:	f023 030f 	bic.w	r3, r3, #15
 800bccc:	ee06 3a90 	vmov	s13, r3
 800bcd0:	eee0 6a47 	vfms.f32	s13, s0, s14
 800bcd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bcd8:	3e01      	subs	r6, #1
 800bcda:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800bcde:	4306      	orrs	r6, r0
 800bce0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bce4:	f024 040f 	bic.w	r4, r4, #15
 800bce8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800bcec:	bf08      	it	eq
 800bcee:	eeb0 8a47 	vmoveq.f32	s16, s14
 800bcf2:	ee07 4a10 	vmov	s14, r4
 800bcf6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800bcfa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800bcfe:	ee07 3a90 	vmov	s15, r3
 800bd02:	eee7 0a27 	vfma.f32	s1, s14, s15
 800bd06:	ee07 4a10 	vmov	s14, r4
 800bd0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd0e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800bd12:	ee17 1a10 	vmov	r1, s14
 800bd16:	2900      	cmp	r1, #0
 800bd18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd1c:	f340 817c 	ble.w	800c018 <__ieee754_powf+0x514>
 800bd20:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800bd24:	f340 80f8 	ble.w	800bf18 <__ieee754_powf+0x414>
 800bd28:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd30:	bf4c      	ite	mi
 800bd32:	2001      	movmi	r0, #1
 800bd34:	2000      	movpl	r0, #0
 800bd36:	e791      	b.n	800bc5c <__ieee754_powf+0x158>
 800bd38:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800bd3c:	bf01      	itttt	eq
 800bd3e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800bed8 <__ieee754_powf+0x3d4>
 800bd42:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800bd46:	f06f 0317 	mvneq.w	r3, #23
 800bd4a:	ee17 5a90 	vmoveq	r5, s15
 800bd4e:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800bd52:	bf18      	it	ne
 800bd54:	2300      	movne	r3, #0
 800bd56:	3a7f      	subs	r2, #127	; 0x7f
 800bd58:	441a      	add	r2, r3
 800bd5a:	4b60      	ldr	r3, [pc, #384]	; (800bedc <__ieee754_powf+0x3d8>)
 800bd5c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800bd60:	429d      	cmp	r5, r3
 800bd62:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800bd66:	dd06      	ble.n	800bd76 <__ieee754_powf+0x272>
 800bd68:	4b5d      	ldr	r3, [pc, #372]	; (800bee0 <__ieee754_powf+0x3dc>)
 800bd6a:	429d      	cmp	r5, r3
 800bd6c:	f340 80a4 	ble.w	800beb8 <__ieee754_powf+0x3b4>
 800bd70:	3201      	adds	r2, #1
 800bd72:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800bd76:	2500      	movs	r5, #0
 800bd78:	4b5a      	ldr	r3, [pc, #360]	; (800bee4 <__ieee754_powf+0x3e0>)
 800bd7a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800bd7e:	ee07 1a10 	vmov	s14, r1
 800bd82:	edd3 5a00 	vldr	s11, [r3]
 800bd86:	4b58      	ldr	r3, [pc, #352]	; (800bee8 <__ieee754_powf+0x3e4>)
 800bd88:	ee75 7a87 	vadd.f32	s15, s11, s14
 800bd8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd90:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800bd94:	1049      	asrs	r1, r1, #1
 800bd96:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800bd9a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800bd9e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800bda2:	ee37 6a65 	vsub.f32	s12, s14, s11
 800bda6:	ee07 1a90 	vmov	s15, r1
 800bdaa:	ee26 5a24 	vmul.f32	s10, s12, s9
 800bdae:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800bdb2:	ee15 7a10 	vmov	r7, s10
 800bdb6:	401f      	ands	r7, r3
 800bdb8:	ee06 7a90 	vmov	s13, r7
 800bdbc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800bdc0:	ee37 7a65 	vsub.f32	s14, s14, s11
 800bdc4:	ee65 7a05 	vmul.f32	s15, s10, s10
 800bdc8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800bdcc:	eddf 5a47 	vldr	s11, [pc, #284]	; 800beec <__ieee754_powf+0x3e8>
 800bdd0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800bef0 <__ieee754_powf+0x3ec>
 800bdd4:	eee7 5a87 	vfma.f32	s11, s15, s14
 800bdd8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800bef4 <__ieee754_powf+0x3f0>
 800bddc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bde0:	eddf 5a39 	vldr	s11, [pc, #228]	; 800bec8 <__ieee754_powf+0x3c4>
 800bde4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bde8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800bef8 <__ieee754_powf+0x3f4>
 800bdec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bdf0:	eddf 5a42 	vldr	s11, [pc, #264]	; 800befc <__ieee754_powf+0x3f8>
 800bdf4:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bdf8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bdfc:	ee35 7a26 	vadd.f32	s14, s10, s13
 800be00:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800be04:	ee27 7a06 	vmul.f32	s14, s14, s12
 800be08:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800be0c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800be10:	eef0 5a67 	vmov.f32	s11, s15
 800be14:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800be18:	ee75 5a87 	vadd.f32	s11, s11, s14
 800be1c:	ee15 1a90 	vmov	r1, s11
 800be20:	4019      	ands	r1, r3
 800be22:	ee05 1a90 	vmov	s11, r1
 800be26:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800be2a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800be2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be32:	ee67 7a85 	vmul.f32	s15, s15, s10
 800be36:	eee6 7a25 	vfma.f32	s15, s12, s11
 800be3a:	eeb0 6a67 	vmov.f32	s12, s15
 800be3e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800be42:	ee16 1a10 	vmov	r1, s12
 800be46:	4019      	ands	r1, r3
 800be48:	ee07 1a10 	vmov	s14, r1
 800be4c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800be50:	ee06 1a10 	vmov	s12, r1
 800be54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be58:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800bf00 <__ieee754_powf+0x3fc>
 800be5c:	4929      	ldr	r1, [pc, #164]	; (800bf04 <__ieee754_powf+0x400>)
 800be5e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800bf08 <__ieee754_powf+0x404>
 800be62:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be66:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800bf0c <__ieee754_powf+0x408>
 800be6a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800be6e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800be72:	ed91 7a00 	vldr	s14, [r1]
 800be76:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be7a:	ee07 2a10 	vmov	s14, r2
 800be7e:	eef0 6a67 	vmov.f32	s13, s15
 800be82:	4a23      	ldr	r2, [pc, #140]	; (800bf10 <__ieee754_powf+0x40c>)
 800be84:	eee6 6a25 	vfma.f32	s13, s12, s11
 800be88:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800be8c:	ed92 5a00 	vldr	s10, [r2]
 800be90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800be94:	ee76 6a85 	vadd.f32	s13, s13, s10
 800be98:	ee76 6a87 	vadd.f32	s13, s13, s14
 800be9c:	ee16 2a90 	vmov	r2, s13
 800bea0:	4013      	ands	r3, r2
 800bea2:	ee06 3a90 	vmov	s13, r3
 800bea6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800beaa:	ee37 7a45 	vsub.f32	s14, s14, s10
 800beae:	eea6 7a65 	vfms.f32	s14, s12, s11
 800beb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800beb6:	e70f      	b.n	800bcd8 <__ieee754_powf+0x1d4>
 800beb8:	2501      	movs	r5, #1
 800beba:	e75d      	b.n	800bd78 <__ieee754_powf+0x274>
 800bebc:	00000000 	.word	0x00000000
 800bec0:	3f7ffff3 	.word	0x3f7ffff3
 800bec4:	3f800007 	.word	0x3f800007
 800bec8:	3eaaaaab 	.word	0x3eaaaaab
 800becc:	3fb8aa3b 	.word	0x3fb8aa3b
 800bed0:	36eca570 	.word	0x36eca570
 800bed4:	3fb8aa00 	.word	0x3fb8aa00
 800bed8:	4b800000 	.word	0x4b800000
 800bedc:	001cc471 	.word	0x001cc471
 800bee0:	005db3d6 	.word	0x005db3d6
 800bee4:	0800c298 	.word	0x0800c298
 800bee8:	fffff000 	.word	0xfffff000
 800beec:	3e6c3255 	.word	0x3e6c3255
 800bef0:	3e53f142 	.word	0x3e53f142
 800bef4:	3e8ba305 	.word	0x3e8ba305
 800bef8:	3edb6db7 	.word	0x3edb6db7
 800befc:	3f19999a 	.word	0x3f19999a
 800bf00:	3f76384f 	.word	0x3f76384f
 800bf04:	0800c2a8 	.word	0x0800c2a8
 800bf08:	3f763800 	.word	0x3f763800
 800bf0c:	369dc3a0 	.word	0x369dc3a0
 800bf10:	0800c2a0 	.word	0x0800c2a0
 800bf14:	3338aa3c 	.word	0x3338aa3c
 800bf18:	f040 8093 	bne.w	800c042 <__ieee754_powf+0x53e>
 800bf1c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800bf14 <__ieee754_powf+0x410>
 800bf20:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bf24:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800bf28:	eef4 6ac7 	vcmpe.f32	s13, s14
 800bf2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf30:	f73f aefa 	bgt.w	800bd28 <__ieee754_powf+0x224>
 800bf34:	15db      	asrs	r3, r3, #23
 800bf36:	3b7e      	subs	r3, #126	; 0x7e
 800bf38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800bf3c:	4118      	asrs	r0, r3
 800bf3e:	4408      	add	r0, r1
 800bf40:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bf44:	4a49      	ldr	r2, [pc, #292]	; (800c06c <__ieee754_powf+0x568>)
 800bf46:	3b7f      	subs	r3, #127	; 0x7f
 800bf48:	411a      	asrs	r2, r3
 800bf4a:	4002      	ands	r2, r0
 800bf4c:	ee07 2a10 	vmov	s14, r2
 800bf50:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800bf54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800bf58:	f1c3 0317 	rsb	r3, r3, #23
 800bf5c:	4118      	asrs	r0, r3
 800bf5e:	2900      	cmp	r1, #0
 800bf60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf64:	bfb8      	it	lt
 800bf66:	4240      	neglt	r0, r0
 800bf68:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800bf6c:	eddf 6a40 	vldr	s13, [pc, #256]	; 800c070 <__ieee754_powf+0x56c>
 800bf70:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800c074 <__ieee754_powf+0x570>
 800bf74:	ee17 3a10 	vmov	r3, s14
 800bf78:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bf7c:	f023 030f 	bic.w	r3, r3, #15
 800bf80:	ee07 3a10 	vmov	s14, r3
 800bf84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bf8c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800bf90:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c078 <__ieee754_powf+0x574>
 800bf94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf98:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800bf9c:	eef0 6a67 	vmov.f32	s13, s15
 800bfa0:	eee7 6a06 	vfma.f32	s13, s14, s12
 800bfa4:	eef0 5a66 	vmov.f32	s11, s13
 800bfa8:	eee7 5a46 	vfms.f32	s11, s14, s12
 800bfac:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bfb0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bfb4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800c07c <__ieee754_powf+0x578>
 800bfb8:	eddf 5a31 	vldr	s11, [pc, #196]	; 800c080 <__ieee754_powf+0x57c>
 800bfbc:	eea7 6a25 	vfma.f32	s12, s14, s11
 800bfc0:	eddf 5a30 	vldr	s11, [pc, #192]	; 800c084 <__ieee754_powf+0x580>
 800bfc4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bfc8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800c088 <__ieee754_powf+0x584>
 800bfcc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bfd0:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c08c <__ieee754_powf+0x588>
 800bfd4:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bfd8:	eeb0 6a66 	vmov.f32	s12, s13
 800bfdc:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800bfe0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bfe4:	ee66 5a86 	vmul.f32	s11, s13, s12
 800bfe8:	ee36 6a47 	vsub.f32	s12, s12, s14
 800bfec:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800bff0:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800bff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bff8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bffc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c000:	ee10 3a10 	vmov	r3, s0
 800c004:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c008:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c00c:	da1f      	bge.n	800c04e <__ieee754_powf+0x54a>
 800c00e:	f000 f84b 	bl	800c0a8 <scalbnf>
 800c012:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c016:	e58d      	b.n	800bb34 <__ieee754_powf+0x30>
 800c018:	4a1d      	ldr	r2, [pc, #116]	; (800c090 <__ieee754_powf+0x58c>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	dd07      	ble.n	800c02e <__ieee754_powf+0x52a>
 800c01e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c026:	bf4c      	ite	mi
 800c028:	2001      	movmi	r0, #1
 800c02a:	2000      	movpl	r0, #0
 800c02c:	e622      	b.n	800bc74 <__ieee754_powf+0x170>
 800c02e:	d108      	bne.n	800c042 <__ieee754_powf+0x53e>
 800c030:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c034:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c03c:	f6ff af7a 	blt.w	800bf34 <__ieee754_powf+0x430>
 800c040:	e7ed      	b.n	800c01e <__ieee754_powf+0x51a>
 800c042:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800c046:	f73f af75 	bgt.w	800bf34 <__ieee754_powf+0x430>
 800c04a:	2000      	movs	r0, #0
 800c04c:	e78c      	b.n	800bf68 <__ieee754_powf+0x464>
 800c04e:	ee00 3a10 	vmov	s0, r3
 800c052:	e7de      	b.n	800c012 <__ieee754_powf+0x50e>
 800c054:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c058:	e56c      	b.n	800bb34 <__ieee754_powf+0x30>
 800c05a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c094 <__ieee754_powf+0x590>
 800c05e:	e569      	b.n	800bb34 <__ieee754_powf+0x30>
 800c060:	eeb0 0a48 	vmov.f32	s0, s16
 800c064:	e566      	b.n	800bb34 <__ieee754_powf+0x30>
 800c066:	2600      	movs	r6, #0
 800c068:	e591      	b.n	800bb8e <__ieee754_powf+0x8a>
 800c06a:	bf00      	nop
 800c06c:	ff800000 	.word	0xff800000
 800c070:	3f317218 	.word	0x3f317218
 800c074:	3f317200 	.word	0x3f317200
 800c078:	35bfbe8c 	.word	0x35bfbe8c
 800c07c:	b5ddea0e 	.word	0xb5ddea0e
 800c080:	3331bb4c 	.word	0x3331bb4c
 800c084:	388ab355 	.word	0x388ab355
 800c088:	bb360b61 	.word	0xbb360b61
 800c08c:	3e2aaaab 	.word	0x3e2aaaab
 800c090:	43160000 	.word	0x43160000
 800c094:	00000000 	.word	0x00000000

0800c098 <fabsf>:
 800c098:	ee10 3a10 	vmov	r3, s0
 800c09c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0a0:	ee00 3a10 	vmov	s0, r3
 800c0a4:	4770      	bx	lr
	...

0800c0a8 <scalbnf>:
 800c0a8:	ee10 3a10 	vmov	r3, s0
 800c0ac:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c0b0:	d02b      	beq.n	800c10a <scalbnf+0x62>
 800c0b2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c0b6:	d302      	bcc.n	800c0be <scalbnf+0x16>
 800c0b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c0bc:	4770      	bx	lr
 800c0be:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c0c2:	d123      	bne.n	800c10c <scalbnf+0x64>
 800c0c4:	4b24      	ldr	r3, [pc, #144]	; (800c158 <scalbnf+0xb0>)
 800c0c6:	eddf 7a25 	vldr	s15, [pc, #148]	; 800c15c <scalbnf+0xb4>
 800c0ca:	4298      	cmp	r0, r3
 800c0cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c0d0:	db17      	blt.n	800c102 <scalbnf+0x5a>
 800c0d2:	ee10 3a10 	vmov	r3, s0
 800c0d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c0da:	3a19      	subs	r2, #25
 800c0dc:	f24c 3150 	movw	r1, #50000	; 0xc350
 800c0e0:	4288      	cmp	r0, r1
 800c0e2:	dd15      	ble.n	800c110 <scalbnf+0x68>
 800c0e4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c160 <scalbnf+0xb8>
 800c0e8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800c164 <scalbnf+0xbc>
 800c0ec:	ee10 3a10 	vmov	r3, s0
 800c0f0:	eeb0 7a67 	vmov.f32	s14, s15
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	bfb8      	it	lt
 800c0f8:	eef0 7a66 	vmovlt.f32	s15, s13
 800c0fc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c100:	4770      	bx	lr
 800c102:	eddf 7a19 	vldr	s15, [pc, #100]	; 800c168 <scalbnf+0xc0>
 800c106:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c10a:	4770      	bx	lr
 800c10c:	0dd2      	lsrs	r2, r2, #23
 800c10e:	e7e5      	b.n	800c0dc <scalbnf+0x34>
 800c110:	4410      	add	r0, r2
 800c112:	28fe      	cmp	r0, #254	; 0xfe
 800c114:	dce6      	bgt.n	800c0e4 <scalbnf+0x3c>
 800c116:	2800      	cmp	r0, #0
 800c118:	dd06      	ble.n	800c128 <scalbnf+0x80>
 800c11a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c11e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c122:	ee00 3a10 	vmov	s0, r3
 800c126:	4770      	bx	lr
 800c128:	f110 0f16 	cmn.w	r0, #22
 800c12c:	da09      	bge.n	800c142 <scalbnf+0x9a>
 800c12e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c168 <scalbnf+0xc0>
 800c132:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800c16c <scalbnf+0xc4>
 800c136:	ee10 3a10 	vmov	r3, s0
 800c13a:	eeb0 7a67 	vmov.f32	s14, s15
 800c13e:	2b00      	cmp	r3, #0
 800c140:	e7d9      	b.n	800c0f6 <scalbnf+0x4e>
 800c142:	3019      	adds	r0, #25
 800c144:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c148:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c14c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800c170 <scalbnf+0xc8>
 800c150:	ee07 3a90 	vmov	s15, r3
 800c154:	e7d7      	b.n	800c106 <scalbnf+0x5e>
 800c156:	bf00      	nop
 800c158:	ffff3cb0 	.word	0xffff3cb0
 800c15c:	4c000000 	.word	0x4c000000
 800c160:	7149f2ca 	.word	0x7149f2ca
 800c164:	f149f2ca 	.word	0xf149f2ca
 800c168:	0da24260 	.word	0x0da24260
 800c16c:	8da24260 	.word	0x8da24260
 800c170:	33000000 	.word	0x33000000

0800c174 <with_errnof>:
 800c174:	b513      	push	{r0, r1, r4, lr}
 800c176:	4604      	mov	r4, r0
 800c178:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c17c:	f7ff fc02 	bl	800b984 <__errno>
 800c180:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c184:	6004      	str	r4, [r0, #0]
 800c186:	b002      	add	sp, #8
 800c188:	bd10      	pop	{r4, pc}

0800c18a <xflowf>:
 800c18a:	b130      	cbz	r0, 800c19a <xflowf+0x10>
 800c18c:	eef1 7a40 	vneg.f32	s15, s0
 800c190:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c194:	2022      	movs	r0, #34	; 0x22
 800c196:	f7ff bfed 	b.w	800c174 <with_errnof>
 800c19a:	eef0 7a40 	vmov.f32	s15, s0
 800c19e:	e7f7      	b.n	800c190 <xflowf+0x6>

0800c1a0 <__math_uflowf>:
 800c1a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c1a8 <__math_uflowf+0x8>
 800c1a4:	f7ff bff1 	b.w	800c18a <xflowf>
 800c1a8:	10000000 	.word	0x10000000

0800c1ac <__math_oflowf>:
 800c1ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c1b4 <__math_oflowf+0x8>
 800c1b0:	f7ff bfeb 	b.w	800c18a <xflowf>
 800c1b4:	70000000 	.word	0x70000000

0800c1b8 <__ieee754_sqrtf>:
 800c1b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c1bc:	4770      	bx	lr
	...

0800c1c0 <_init>:
 800c1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c2:	bf00      	nop
 800c1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1c6:	bc08      	pop	{r3}
 800c1c8:	469e      	mov	lr, r3
 800c1ca:	4770      	bx	lr

0800c1cc <_fini>:
 800c1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ce:	bf00      	nop
 800c1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1d2:	bc08      	pop	{r3}
 800c1d4:	469e      	mov	lr, r3
 800c1d6:	4770      	bx	lr
